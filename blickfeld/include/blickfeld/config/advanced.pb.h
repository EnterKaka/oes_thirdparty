// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/config/advanced.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fadvanced_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fadvanced_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/stream/connection.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fconfig_2fadvanced_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fconfig_2fadvanced_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fconfig_2fadvanced_2eproto;
namespace blickfeld {
namespace protocol {
namespace config {
class Advanced;
struct AdvancedDefaultTypeInternal;
BF_DLLEXPORT extern AdvancedDefaultTypeInternal _Advanced_default_instance_;
class Advanced_Detector;
struct Advanced_DetectorDefaultTypeInternal;
BF_DLLEXPORT extern Advanced_DetectorDefaultTypeInternal _Advanced_Detector_default_instance_;
class Advanced_Processing;
struct Advanced_ProcessingDefaultTypeInternal;
BF_DLLEXPORT extern Advanced_ProcessingDefaultTypeInternal _Advanced_Processing_default_instance_;
class Advanced_Server;
struct Advanced_ServerDefaultTypeInternal;
BF_DLLEXPORT extern Advanced_ServerDefaultTypeInternal _Advanced_Server_default_instance_;
class Advanced_TimeSynchronization;
struct Advanced_TimeSynchronizationDefaultTypeInternal;
BF_DLLEXPORT extern Advanced_TimeSynchronizationDefaultTypeInternal _Advanced_TimeSynchronization_default_instance_;
class Advanced_TimeSynchronization_NTP;
struct Advanced_TimeSynchronization_NTPDefaultTypeInternal;
BF_DLLEXPORT extern Advanced_TimeSynchronization_NTPDefaultTypeInternal _Advanced_TimeSynchronization_NTP_default_instance_;
class Advanced_TimeSynchronization_PTP;
struct Advanced_TimeSynchronization_PTPDefaultTypeInternal;
BF_DLLEXPORT extern Advanced_TimeSynchronization_PTPDefaultTypeInternal _Advanced_TimeSynchronization_PTP_default_instance_;
}  // namespace config
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::config::Advanced* Arena::CreateMaybeMessage<::blickfeld::protocol::config::Advanced>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::Advanced_Detector* Arena::CreateMaybeMessage<::blickfeld::protocol::config::Advanced_Detector>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::Advanced_Processing* Arena::CreateMaybeMessage<::blickfeld::protocol::config::Advanced_Processing>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::Advanced_Server* Arena::CreateMaybeMessage<::blickfeld::protocol::config::Advanced_Server>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::Advanced_TimeSynchronization* Arena::CreateMaybeMessage<::blickfeld::protocol::config::Advanced_TimeSynchronization>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* Arena::CreateMaybeMessage<::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* Arena::CreateMaybeMessage<::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace config {

enum Advanced_TimeSynchronization_PTP_DelayMechanism : int {
  Advanced_TimeSynchronization_PTP_DelayMechanism_E2E = 1,
  Advanced_TimeSynchronization_PTP_DelayMechanism_P2P = 2
};
BF_DLLEXPORT bool Advanced_TimeSynchronization_PTP_DelayMechanism_IsValid(int value);
constexpr Advanced_TimeSynchronization_PTP_DelayMechanism Advanced_TimeSynchronization_PTP_DelayMechanism_DelayMechanism_MIN = Advanced_TimeSynchronization_PTP_DelayMechanism_E2E;
constexpr Advanced_TimeSynchronization_PTP_DelayMechanism Advanced_TimeSynchronization_PTP_DelayMechanism_DelayMechanism_MAX = Advanced_TimeSynchronization_PTP_DelayMechanism_P2P;
constexpr int Advanced_TimeSynchronization_PTP_DelayMechanism_DelayMechanism_ARRAYSIZE = Advanced_TimeSynchronization_PTP_DelayMechanism_DelayMechanism_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Advanced_TimeSynchronization_PTP_DelayMechanism_descriptor();
template<typename T>
inline const std::string& Advanced_TimeSynchronization_PTP_DelayMechanism_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Advanced_TimeSynchronization_PTP_DelayMechanism>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Advanced_TimeSynchronization_PTP_DelayMechanism_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Advanced_TimeSynchronization_PTP_DelayMechanism_descriptor(), enum_t_value);
}
inline bool Advanced_TimeSynchronization_PTP_DelayMechanism_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Advanced_TimeSynchronization_PTP_DelayMechanism* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Advanced_TimeSynchronization_PTP_DelayMechanism>(
    Advanced_TimeSynchronization_PTP_DelayMechanism_descriptor(), name, value);
}
// ===================================================================

class BF_DLLEXPORT Advanced_Detector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.Advanced.Detector) */ {
 public:
  inline Advanced_Detector() : Advanced_Detector(nullptr) {}
  ~Advanced_Detector() override;
  explicit constexpr Advanced_Detector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Advanced_Detector(const Advanced_Detector& from);
  Advanced_Detector(Advanced_Detector&& from) noexcept
    : Advanced_Detector() {
    *this = ::std::move(from);
  }

  inline Advanced_Detector& operator=(const Advanced_Detector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Advanced_Detector& operator=(Advanced_Detector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Advanced_Detector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Advanced_Detector* internal_default_instance() {
    return reinterpret_cast<const Advanced_Detector*>(
               &_Advanced_Detector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Advanced_Detector& a, Advanced_Detector& b) {
    a.Swap(&b);
  }
  inline void Swap(Advanced_Detector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Advanced_Detector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Advanced_Detector* New() const final {
    return CreateMaybeMessage<Advanced_Detector>(nullptr);
  }

  Advanced_Detector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Advanced_Detector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Advanced_Detector& from);
  void MergeFrom(const Advanced_Detector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Advanced_Detector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.Advanced.Detector";
  }
  protected:
  explicit Advanced_Detector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensitivityFieldNumber = 1,
  };
  // optional float sensitivity = 1 [default = 1, (.blickfeld.protocol.d_min) = 0.8, (.blickfeld.protocol.d_max) = 1.2];
  bool has_sensitivity() const;
  private:
  bool _internal_has_sensitivity() const;
  public:
  void clear_sensitivity();
  float sensitivity() const;
  void set_sensitivity(float value);
  private:
  float _internal_sensitivity() const;
  void _internal_set_sensitivity(float value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.Advanced.Detector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float sensitivity_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fadvanced_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Advanced_Processing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.Advanced.Processing) */ {
 public:
  inline Advanced_Processing() : Advanced_Processing(nullptr) {}
  ~Advanced_Processing() override;
  explicit constexpr Advanced_Processing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Advanced_Processing(const Advanced_Processing& from);
  Advanced_Processing(Advanced_Processing&& from) noexcept
    : Advanced_Processing() {
    *this = ::std::move(from);
  }

  inline Advanced_Processing& operator=(const Advanced_Processing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Advanced_Processing& operator=(Advanced_Processing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Advanced_Processing& default_instance() {
    return *internal_default_instance();
  }
  static inline const Advanced_Processing* internal_default_instance() {
    return reinterpret_cast<const Advanced_Processing*>(
               &_Advanced_Processing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Advanced_Processing& a, Advanced_Processing& b) {
    a.Swap(&b);
  }
  inline void Swap(Advanced_Processing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Advanced_Processing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Advanced_Processing* New() const final {
    return CreateMaybeMessage<Advanced_Processing>(nullptr);
  }

  Advanced_Processing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Advanced_Processing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Advanced_Processing& from);
  void MergeFrom(const Advanced_Processing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Advanced_Processing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.Advanced.Processing";
  }
  protected:
  explicit Advanced_Processing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeOffsetFieldNumber = 1,
  };
  // optional float range_offset = 1 [default = 0, (.blickfeld.protocol.d_min) = -2, (.blickfeld.protocol.d_max) = 2];
  bool has_range_offset() const;
  private:
  bool _internal_has_range_offset() const;
  public:
  void clear_range_offset();
  float range_offset() const;
  void set_range_offset(float value);
  private:
  float _internal_range_offset() const;
  void _internal_set_range_offset(float value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.Advanced.Processing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float range_offset_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fadvanced_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Advanced_Server PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.Advanced.Server) */ {
 public:
  inline Advanced_Server() : Advanced_Server(nullptr) {}
  ~Advanced_Server() override;
  explicit constexpr Advanced_Server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Advanced_Server(const Advanced_Server& from);
  Advanced_Server(Advanced_Server&& from) noexcept
    : Advanced_Server() {
    *this = ::std::move(from);
  }

  inline Advanced_Server& operator=(const Advanced_Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Advanced_Server& operator=(Advanced_Server&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Advanced_Server& default_instance() {
    return *internal_default_instance();
  }
  static inline const Advanced_Server* internal_default_instance() {
    return reinterpret_cast<const Advanced_Server*>(
               &_Advanced_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Advanced_Server& a, Advanced_Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Advanced_Server* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Advanced_Server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Advanced_Server* New() const final {
    return CreateMaybeMessage<Advanced_Server>(nullptr);
  }

  Advanced_Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Advanced_Server>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Advanced_Server& from);
  void MergeFrom(const Advanced_Server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Advanced_Server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.Advanced.Server";
  }
  protected:
  explicit Advanced_Server(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultPointCloudSubscriptionFieldNumber = 1,
  };
  // optional .blickfeld.protocol.stream.Subscribe.PointCloud default_point_cloud_subscription = 1;
  bool has_default_point_cloud_subscription() const;
  private:
  bool _internal_has_default_point_cloud_subscription() const;
  public:
  void clear_default_point_cloud_subscription();
  const ::blickfeld::protocol::stream::Subscribe_PointCloud& default_point_cloud_subscription() const;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* release_default_point_cloud_subscription();
  ::blickfeld::protocol::stream::Subscribe_PointCloud* mutable_default_point_cloud_subscription();
  void set_allocated_default_point_cloud_subscription(::blickfeld::protocol::stream::Subscribe_PointCloud* default_point_cloud_subscription);
  private:
  const ::blickfeld::protocol::stream::Subscribe_PointCloud& _internal_default_point_cloud_subscription() const;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* _internal_mutable_default_point_cloud_subscription();
  public:
  void unsafe_arena_set_allocated_default_point_cloud_subscription(
      ::blickfeld::protocol::stream::Subscribe_PointCloud* default_point_cloud_subscription);
  ::blickfeld::protocol::stream::Subscribe_PointCloud* unsafe_arena_release_default_point_cloud_subscription();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.Advanced.Server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* default_point_cloud_subscription_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fadvanced_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Advanced_TimeSynchronization_NTP PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP) */ {
 public:
  inline Advanced_TimeSynchronization_NTP() : Advanced_TimeSynchronization_NTP(nullptr) {}
  ~Advanced_TimeSynchronization_NTP() override;
  explicit constexpr Advanced_TimeSynchronization_NTP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Advanced_TimeSynchronization_NTP(const Advanced_TimeSynchronization_NTP& from);
  Advanced_TimeSynchronization_NTP(Advanced_TimeSynchronization_NTP&& from) noexcept
    : Advanced_TimeSynchronization_NTP() {
    *this = ::std::move(from);
  }

  inline Advanced_TimeSynchronization_NTP& operator=(const Advanced_TimeSynchronization_NTP& from) {
    CopyFrom(from);
    return *this;
  }
  inline Advanced_TimeSynchronization_NTP& operator=(Advanced_TimeSynchronization_NTP&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Advanced_TimeSynchronization_NTP& default_instance() {
    return *internal_default_instance();
  }
  static inline const Advanced_TimeSynchronization_NTP* internal_default_instance() {
    return reinterpret_cast<const Advanced_TimeSynchronization_NTP*>(
               &_Advanced_TimeSynchronization_NTP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Advanced_TimeSynchronization_NTP& a, Advanced_TimeSynchronization_NTP& b) {
    a.Swap(&b);
  }
  inline void Swap(Advanced_TimeSynchronization_NTP* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Advanced_TimeSynchronization_NTP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Advanced_TimeSynchronization_NTP* New() const final {
    return CreateMaybeMessage<Advanced_TimeSynchronization_NTP>(nullptr);
  }

  Advanced_TimeSynchronization_NTP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Advanced_TimeSynchronization_NTP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Advanced_TimeSynchronization_NTP& from);
  void MergeFrom(const Advanced_TimeSynchronization_NTP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Advanced_TimeSynchronization_NTP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.Advanced.TimeSynchronization.NTP";
  }
  protected:
  explicit Advanced_TimeSynchronization_NTP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
  };
  // repeated string servers = 1 [(.blickfeld.protocol.regex) = "[[:alnum:]\\.\\-]+", (.blickfeld.protocol.optional) = true];
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  const std::string& servers(int index) const;
  std::string* mutable_servers(int index);
  void set_servers(int index, const std::string& value);
  void set_servers(int index, std::string&& value);
  void set_servers(int index, const char* value);
  void set_servers(int index, const char* value, size_t size);
  std::string* add_servers();
  void add_servers(const std::string& value);
  void add_servers(std::string&& value);
  void add_servers(const char* value);
  void add_servers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& servers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_servers();
  private:
  const std::string& _internal_servers(int index) const;
  std::string* _internal_add_servers();
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> servers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fadvanced_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Advanced_TimeSynchronization_PTP PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP) */ {
 public:
  inline Advanced_TimeSynchronization_PTP() : Advanced_TimeSynchronization_PTP(nullptr) {}
  ~Advanced_TimeSynchronization_PTP() override;
  explicit constexpr Advanced_TimeSynchronization_PTP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Advanced_TimeSynchronization_PTP(const Advanced_TimeSynchronization_PTP& from);
  Advanced_TimeSynchronization_PTP(Advanced_TimeSynchronization_PTP&& from) noexcept
    : Advanced_TimeSynchronization_PTP() {
    *this = ::std::move(from);
  }

  inline Advanced_TimeSynchronization_PTP& operator=(const Advanced_TimeSynchronization_PTP& from) {
    CopyFrom(from);
    return *this;
  }
  inline Advanced_TimeSynchronization_PTP& operator=(Advanced_TimeSynchronization_PTP&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Advanced_TimeSynchronization_PTP& default_instance() {
    return *internal_default_instance();
  }
  static inline const Advanced_TimeSynchronization_PTP* internal_default_instance() {
    return reinterpret_cast<const Advanced_TimeSynchronization_PTP*>(
               &_Advanced_TimeSynchronization_PTP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Advanced_TimeSynchronization_PTP& a, Advanced_TimeSynchronization_PTP& b) {
    a.Swap(&b);
  }
  inline void Swap(Advanced_TimeSynchronization_PTP* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Advanced_TimeSynchronization_PTP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Advanced_TimeSynchronization_PTP* New() const final {
    return CreateMaybeMessage<Advanced_TimeSynchronization_PTP>(nullptr);
  }

  Advanced_TimeSynchronization_PTP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Advanced_TimeSynchronization_PTP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Advanced_TimeSynchronization_PTP& from);
  void MergeFrom(const Advanced_TimeSynchronization_PTP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Advanced_TimeSynchronization_PTP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.Advanced.TimeSynchronization.PTP";
  }
  protected:
  explicit Advanced_TimeSynchronization_PTP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Advanced_TimeSynchronization_PTP_DelayMechanism DelayMechanism;
  static constexpr DelayMechanism E2E =
    Advanced_TimeSynchronization_PTP_DelayMechanism_E2E;
  static constexpr DelayMechanism P2P =
    Advanced_TimeSynchronization_PTP_DelayMechanism_P2P;
  static inline bool DelayMechanism_IsValid(int value) {
    return Advanced_TimeSynchronization_PTP_DelayMechanism_IsValid(value);
  }
  static constexpr DelayMechanism DelayMechanism_MIN =
    Advanced_TimeSynchronization_PTP_DelayMechanism_DelayMechanism_MIN;
  static constexpr DelayMechanism DelayMechanism_MAX =
    Advanced_TimeSynchronization_PTP_DelayMechanism_DelayMechanism_MAX;
  static constexpr int DelayMechanism_ARRAYSIZE =
    Advanced_TimeSynchronization_PTP_DelayMechanism_DelayMechanism_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DelayMechanism_descriptor() {
    return Advanced_TimeSynchronization_PTP_DelayMechanism_descriptor();
  }
  template<typename T>
  static inline const std::string& DelayMechanism_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DelayMechanism>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DelayMechanism_Name.");
    return Advanced_TimeSynchronization_PTP_DelayMechanism_Name(enum_t_value);
  }
  static inline bool DelayMechanism_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DelayMechanism* value) {
    return Advanced_TimeSynchronization_PTP_DelayMechanism_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUnicastDestinationsFieldNumber = 3,
    kDomainFieldNumber = 1,
    kDelayMechanismFieldNumber = 2,
  };
  // repeated string unicast_destinations = 3 [(.blickfeld.protocol.regex) = "[[:alnum:]\\.\\-]+", (.blickfeld.protocol.optional) = true];
  int unicast_destinations_size() const;
  private:
  int _internal_unicast_destinations_size() const;
  public:
  void clear_unicast_destinations();
  const std::string& unicast_destinations(int index) const;
  std::string* mutable_unicast_destinations(int index);
  void set_unicast_destinations(int index, const std::string& value);
  void set_unicast_destinations(int index, std::string&& value);
  void set_unicast_destinations(int index, const char* value);
  void set_unicast_destinations(int index, const char* value, size_t size);
  std::string* add_unicast_destinations();
  void add_unicast_destinations(const std::string& value);
  void add_unicast_destinations(std::string&& value);
  void add_unicast_destinations(const char* value);
  void add_unicast_destinations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unicast_destinations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unicast_destinations();
  private:
  const std::string& _internal_unicast_destinations(int index) const;
  std::string* _internal_add_unicast_destinations();
  public:

  // optional uint32 domain = 1 [default = 0];
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  ::PROTOBUF_NAMESPACE_ID::uint32 domain() const;
  void set_domain(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_domain() const;
  void _internal_set_domain(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.DelayMechanism delay_mechanism = 2 [default = E2E];
  bool has_delay_mechanism() const;
  private:
  bool _internal_has_delay_mechanism() const;
  public:
  void clear_delay_mechanism();
  ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism delay_mechanism() const;
  void set_delay_mechanism(::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism value);
  private:
  ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism _internal_delay_mechanism() const;
  void _internal_set_delay_mechanism(::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unicast_destinations_;
  ::PROTOBUF_NAMESPACE_ID::uint32 domain_;
  int delay_mechanism_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fadvanced_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Advanced_TimeSynchronization PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.Advanced.TimeSynchronization) */ {
 public:
  inline Advanced_TimeSynchronization() : Advanced_TimeSynchronization(nullptr) {}
  ~Advanced_TimeSynchronization() override;
  explicit constexpr Advanced_TimeSynchronization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Advanced_TimeSynchronization(const Advanced_TimeSynchronization& from);
  Advanced_TimeSynchronization(Advanced_TimeSynchronization&& from) noexcept
    : Advanced_TimeSynchronization() {
    *this = ::std::move(from);
  }

  inline Advanced_TimeSynchronization& operator=(const Advanced_TimeSynchronization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Advanced_TimeSynchronization& operator=(Advanced_TimeSynchronization&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Advanced_TimeSynchronization& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kNtp = 1,
    kPtp = 2,
    KIND_NOT_SET = 0,
  };

  static inline const Advanced_TimeSynchronization* internal_default_instance() {
    return reinterpret_cast<const Advanced_TimeSynchronization*>(
               &_Advanced_TimeSynchronization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Advanced_TimeSynchronization& a, Advanced_TimeSynchronization& b) {
    a.Swap(&b);
  }
  inline void Swap(Advanced_TimeSynchronization* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Advanced_TimeSynchronization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Advanced_TimeSynchronization* New() const final {
    return CreateMaybeMessage<Advanced_TimeSynchronization>(nullptr);
  }

  Advanced_TimeSynchronization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Advanced_TimeSynchronization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Advanced_TimeSynchronization& from);
  void MergeFrom(const Advanced_TimeSynchronization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Advanced_TimeSynchronization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.Advanced.TimeSynchronization";
  }
  protected:
  explicit Advanced_TimeSynchronization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Advanced_TimeSynchronization_NTP NTP;
  typedef Advanced_TimeSynchronization_PTP PTP;

  // accessors -------------------------------------------------------

  enum : int {
    kNtpFieldNumber = 1,
    kPtpFieldNumber = 2,
  };
  // .blickfeld.protocol.config.Advanced.TimeSynchronization.NTP ntp = 1;
  bool has_ntp() const;
  private:
  bool _internal_has_ntp() const;
  public:
  void clear_ntp();
  const ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP& ntp() const;
  ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* release_ntp();
  ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* mutable_ntp();
  void set_allocated_ntp(::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* ntp);
  private:
  const ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP& _internal_ntp() const;
  ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* _internal_mutable_ntp();
  public:
  void unsafe_arena_set_allocated_ntp(
      ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* ntp);
  ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* unsafe_arena_release_ntp();

  // .blickfeld.protocol.config.Advanced.TimeSynchronization.PTP ptp = 2;
  bool has_ptp() const;
  private:
  bool _internal_has_ptp() const;
  public:
  void clear_ptp();
  const ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP& ptp() const;
  ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* release_ptp();
  ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* mutable_ptp();
  void set_allocated_ptp(::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* ptp);
  private:
  const ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP& _internal_ptp() const;
  ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* _internal_mutable_ptp();
  public:
  void unsafe_arena_set_allocated_ptp(
      ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* ptp);
  ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* unsafe_arena_release_ptp();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.Advanced.TimeSynchronization)
 private:
  class _Internal;
  void set_has_ntp();
  void set_has_ptp();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* ntp_;
    ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* ptp_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fconfig_2fadvanced_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Advanced PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.Advanced) */ {
 public:
  inline Advanced() : Advanced(nullptr) {}
  ~Advanced() override;
  explicit constexpr Advanced(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Advanced(const Advanced& from);
  Advanced(Advanced&& from) noexcept
    : Advanced() {
    *this = ::std::move(from);
  }

  inline Advanced& operator=(const Advanced& from) {
    CopyFrom(from);
    return *this;
  }
  inline Advanced& operator=(Advanced&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Advanced& default_instance() {
    return *internal_default_instance();
  }
  static inline const Advanced* internal_default_instance() {
    return reinterpret_cast<const Advanced*>(
               &_Advanced_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Advanced& a, Advanced& b) {
    a.Swap(&b);
  }
  inline void Swap(Advanced* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Advanced* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Advanced* New() const final {
    return CreateMaybeMessage<Advanced>(nullptr);
  }

  Advanced* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Advanced>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Advanced& from);
  void MergeFrom(const Advanced& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Advanced* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.Advanced";
  }
  protected:
  explicit Advanced(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Advanced_Detector Detector;
  typedef Advanced_Processing Processing;
  typedef Advanced_Server Server;
  typedef Advanced_TimeSynchronization TimeSynchronization;

  // accessors -------------------------------------------------------

  enum : int {
    kDetectorFieldNumber = 1,
    kProcessingFieldNumber = 2,
    kServerFieldNumber = 3,
    kTimeSynchronizationFieldNumber = 4,
  };
  // optional .blickfeld.protocol.config.Advanced.Detector detector = 1;
  bool has_detector() const;
  private:
  bool _internal_has_detector() const;
  public:
  void clear_detector();
  const ::blickfeld::protocol::config::Advanced_Detector& detector() const;
  ::blickfeld::protocol::config::Advanced_Detector* release_detector();
  ::blickfeld::protocol::config::Advanced_Detector* mutable_detector();
  void set_allocated_detector(::blickfeld::protocol::config::Advanced_Detector* detector);
  private:
  const ::blickfeld::protocol::config::Advanced_Detector& _internal_detector() const;
  ::blickfeld::protocol::config::Advanced_Detector* _internal_mutable_detector();
  public:
  void unsafe_arena_set_allocated_detector(
      ::blickfeld::protocol::config::Advanced_Detector* detector);
  ::blickfeld::protocol::config::Advanced_Detector* unsafe_arena_release_detector();

  // optional .blickfeld.protocol.config.Advanced.Processing processing = 2;
  bool has_processing() const;
  private:
  bool _internal_has_processing() const;
  public:
  void clear_processing();
  const ::blickfeld::protocol::config::Advanced_Processing& processing() const;
  ::blickfeld::protocol::config::Advanced_Processing* release_processing();
  ::blickfeld::protocol::config::Advanced_Processing* mutable_processing();
  void set_allocated_processing(::blickfeld::protocol::config::Advanced_Processing* processing);
  private:
  const ::blickfeld::protocol::config::Advanced_Processing& _internal_processing() const;
  ::blickfeld::protocol::config::Advanced_Processing* _internal_mutable_processing();
  public:
  void unsafe_arena_set_allocated_processing(
      ::blickfeld::protocol::config::Advanced_Processing* processing);
  ::blickfeld::protocol::config::Advanced_Processing* unsafe_arena_release_processing();

  // optional .blickfeld.protocol.config.Advanced.Server server = 3;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::blickfeld::protocol::config::Advanced_Server& server() const;
  ::blickfeld::protocol::config::Advanced_Server* release_server();
  ::blickfeld::protocol::config::Advanced_Server* mutable_server();
  void set_allocated_server(::blickfeld::protocol::config::Advanced_Server* server);
  private:
  const ::blickfeld::protocol::config::Advanced_Server& _internal_server() const;
  ::blickfeld::protocol::config::Advanced_Server* _internal_mutable_server();
  public:
  void unsafe_arena_set_allocated_server(
      ::blickfeld::protocol::config::Advanced_Server* server);
  ::blickfeld::protocol::config::Advanced_Server* unsafe_arena_release_server();

  // optional .blickfeld.protocol.config.Advanced.TimeSynchronization time_synchronization = 4;
  bool has_time_synchronization() const;
  private:
  bool _internal_has_time_synchronization() const;
  public:
  void clear_time_synchronization();
  const ::blickfeld::protocol::config::Advanced_TimeSynchronization& time_synchronization() const;
  ::blickfeld::protocol::config::Advanced_TimeSynchronization* release_time_synchronization();
  ::blickfeld::protocol::config::Advanced_TimeSynchronization* mutable_time_synchronization();
  void set_allocated_time_synchronization(::blickfeld::protocol::config::Advanced_TimeSynchronization* time_synchronization);
  private:
  const ::blickfeld::protocol::config::Advanced_TimeSynchronization& _internal_time_synchronization() const;
  ::blickfeld::protocol::config::Advanced_TimeSynchronization* _internal_mutable_time_synchronization();
  public:
  void unsafe_arena_set_allocated_time_synchronization(
      ::blickfeld::protocol::config::Advanced_TimeSynchronization* time_synchronization);
  ::blickfeld::protocol::config::Advanced_TimeSynchronization* unsafe_arena_release_time_synchronization();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.Advanced)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::config::Advanced_Detector* detector_;
  ::blickfeld::protocol::config::Advanced_Processing* processing_;
  ::blickfeld::protocol::config::Advanced_Server* server_;
  ::blickfeld::protocol::config::Advanced_TimeSynchronization* time_synchronization_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fadvanced_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Advanced_Detector

// optional float sensitivity = 1 [default = 1, (.blickfeld.protocol.d_min) = 0.8, (.blickfeld.protocol.d_max) = 1.2];
inline bool Advanced_Detector::_internal_has_sensitivity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Advanced_Detector::has_sensitivity() const {
  return _internal_has_sensitivity();
}
inline void Advanced_Detector::clear_sensitivity() {
  sensitivity_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Advanced_Detector::_internal_sensitivity() const {
  return sensitivity_;
}
inline float Advanced_Detector::sensitivity() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.Detector.sensitivity)
  return _internal_sensitivity();
}
inline void Advanced_Detector::_internal_set_sensitivity(float value) {
  _has_bits_[0] |= 0x00000001u;
  sensitivity_ = value;
}
inline void Advanced_Detector::set_sensitivity(float value) {
  _internal_set_sensitivity(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Advanced.Detector.sensitivity)
}

// -------------------------------------------------------------------

// Advanced_Processing

// optional float range_offset = 1 [default = 0, (.blickfeld.protocol.d_min) = -2, (.blickfeld.protocol.d_max) = 2];
inline bool Advanced_Processing::_internal_has_range_offset() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Advanced_Processing::has_range_offset() const {
  return _internal_has_range_offset();
}
inline void Advanced_Processing::clear_range_offset() {
  range_offset_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Advanced_Processing::_internal_range_offset() const {
  return range_offset_;
}
inline float Advanced_Processing::range_offset() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.Processing.range_offset)
  return _internal_range_offset();
}
inline void Advanced_Processing::_internal_set_range_offset(float value) {
  _has_bits_[0] |= 0x00000001u;
  range_offset_ = value;
}
inline void Advanced_Processing::set_range_offset(float value) {
  _internal_set_range_offset(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Advanced.Processing.range_offset)
}

// -------------------------------------------------------------------

// Advanced_Server

// optional .blickfeld.protocol.stream.Subscribe.PointCloud default_point_cloud_subscription = 1;
inline bool Advanced_Server::_internal_has_default_point_cloud_subscription() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || default_point_cloud_subscription_ != nullptr);
  return value;
}
inline bool Advanced_Server::has_default_point_cloud_subscription() const {
  return _internal_has_default_point_cloud_subscription();
}
inline const ::blickfeld::protocol::stream::Subscribe_PointCloud& Advanced_Server::_internal_default_point_cloud_subscription() const {
  const ::blickfeld::protocol::stream::Subscribe_PointCloud* p = default_point_cloud_subscription_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::stream::Subscribe_PointCloud&>(
      ::blickfeld::protocol::stream::_Subscribe_PointCloud_default_instance_);
}
inline const ::blickfeld::protocol::stream::Subscribe_PointCloud& Advanced_Server::default_point_cloud_subscription() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.Server.default_point_cloud_subscription)
  return _internal_default_point_cloud_subscription();
}
inline void Advanced_Server::unsafe_arena_set_allocated_default_point_cloud_subscription(
    ::blickfeld::protocol::stream::Subscribe_PointCloud* default_point_cloud_subscription) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_point_cloud_subscription_);
  }
  default_point_cloud_subscription_ = default_point_cloud_subscription;
  if (default_point_cloud_subscription) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.Advanced.Server.default_point_cloud_subscription)
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Advanced_Server::release_default_point_cloud_subscription() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* temp = default_point_cloud_subscription_;
  default_point_cloud_subscription_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Advanced_Server::unsafe_arena_release_default_point_cloud_subscription() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.Advanced.Server.default_point_cloud_subscription)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* temp = default_point_cloud_subscription_;
  default_point_cloud_subscription_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Advanced_Server::_internal_mutable_default_point_cloud_subscription() {
  _has_bits_[0] |= 0x00000001u;
  if (default_point_cloud_subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::stream::Subscribe_PointCloud>(GetArena());
    default_point_cloud_subscription_ = p;
  }
  return default_point_cloud_subscription_;
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Advanced_Server::mutable_default_point_cloud_subscription() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.Advanced.Server.default_point_cloud_subscription)
  return _internal_mutable_default_point_cloud_subscription();
}
inline void Advanced_Server::set_allocated_default_point_cloud_subscription(::blickfeld::protocol::stream::Subscribe_PointCloud* default_point_cloud_subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_point_cloud_subscription_);
  }
  if (default_point_cloud_subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_point_cloud_subscription)->GetArena();
    if (message_arena != submessage_arena) {
      default_point_cloud_subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_point_cloud_subscription, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  default_point_cloud_subscription_ = default_point_cloud_subscription;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.Advanced.Server.default_point_cloud_subscription)
}

// -------------------------------------------------------------------

// Advanced_TimeSynchronization_NTP

// repeated string servers = 1 [(.blickfeld.protocol.regex) = "[[:alnum:]\\.\\-]+", (.blickfeld.protocol.optional) = true];
inline int Advanced_TimeSynchronization_NTP::_internal_servers_size() const {
  return servers_.size();
}
inline int Advanced_TimeSynchronization_NTP::servers_size() const {
  return _internal_servers_size();
}
inline void Advanced_TimeSynchronization_NTP::clear_servers() {
  servers_.Clear();
}
inline std::string* Advanced_TimeSynchronization_NTP::add_servers() {
  // @@protoc_insertion_point(field_add_mutable:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
  return _internal_add_servers();
}
inline const std::string& Advanced_TimeSynchronization_NTP::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const std::string& Advanced_TimeSynchronization_NTP::servers(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
  return _internal_servers(index);
}
inline std::string* Advanced_TimeSynchronization_NTP::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
  return servers_.Mutable(index);
}
inline void Advanced_TimeSynchronization_NTP::set_servers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
  servers_.Mutable(index)->assign(value);
}
inline void Advanced_TimeSynchronization_NTP::set_servers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
  servers_.Mutable(index)->assign(std::move(value));
}
inline void Advanced_TimeSynchronization_NTP::set_servers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
}
inline void Advanced_TimeSynchronization_NTP::set_servers(int index, const char* value, size_t size) {
  servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
}
inline std::string* Advanced_TimeSynchronization_NTP::_internal_add_servers() {
  return servers_.Add();
}
inline void Advanced_TimeSynchronization_NTP::add_servers(const std::string& value) {
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
}
inline void Advanced_TimeSynchronization_NTP::add_servers(std::string&& value) {
  servers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
}
inline void Advanced_TimeSynchronization_NTP::add_servers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
}
inline void Advanced_TimeSynchronization_NTP::add_servers(const char* value, size_t size) {
  servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Advanced_TimeSynchronization_NTP::servers() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
  return servers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Advanced_TimeSynchronization_NTP::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.config.Advanced.TimeSynchronization.NTP.servers)
  return &servers_;
}

// -------------------------------------------------------------------

// Advanced_TimeSynchronization_PTP

// optional uint32 domain = 1 [default = 0];
inline bool Advanced_TimeSynchronization_PTP::_internal_has_domain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Advanced_TimeSynchronization_PTP::has_domain() const {
  return _internal_has_domain();
}
inline void Advanced_TimeSynchronization_PTP::clear_domain() {
  domain_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Advanced_TimeSynchronization_PTP::_internal_domain() const {
  return domain_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Advanced_TimeSynchronization_PTP::domain() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.domain)
  return _internal_domain();
}
inline void Advanced_TimeSynchronization_PTP::_internal_set_domain(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  domain_ = value;
}
inline void Advanced_TimeSynchronization_PTP::set_domain(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.domain)
}

// optional .blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.DelayMechanism delay_mechanism = 2 [default = E2E];
inline bool Advanced_TimeSynchronization_PTP::_internal_has_delay_mechanism() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Advanced_TimeSynchronization_PTP::has_delay_mechanism() const {
  return _internal_has_delay_mechanism();
}
inline void Advanced_TimeSynchronization_PTP::clear_delay_mechanism() {
  delay_mechanism_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism Advanced_TimeSynchronization_PTP::_internal_delay_mechanism() const {
  return static_cast< ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism >(delay_mechanism_);
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism Advanced_TimeSynchronization_PTP::delay_mechanism() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.delay_mechanism)
  return _internal_delay_mechanism();
}
inline void Advanced_TimeSynchronization_PTP::_internal_set_delay_mechanism(::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism value) {
  assert(::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  delay_mechanism_ = value;
}
inline void Advanced_TimeSynchronization_PTP::set_delay_mechanism(::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism value) {
  _internal_set_delay_mechanism(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.delay_mechanism)
}

// repeated string unicast_destinations = 3 [(.blickfeld.protocol.regex) = "[[:alnum:]\\.\\-]+", (.blickfeld.protocol.optional) = true];
inline int Advanced_TimeSynchronization_PTP::_internal_unicast_destinations_size() const {
  return unicast_destinations_.size();
}
inline int Advanced_TimeSynchronization_PTP::unicast_destinations_size() const {
  return _internal_unicast_destinations_size();
}
inline void Advanced_TimeSynchronization_PTP::clear_unicast_destinations() {
  unicast_destinations_.Clear();
}
inline std::string* Advanced_TimeSynchronization_PTP::add_unicast_destinations() {
  // @@protoc_insertion_point(field_add_mutable:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
  return _internal_add_unicast_destinations();
}
inline const std::string& Advanced_TimeSynchronization_PTP::_internal_unicast_destinations(int index) const {
  return unicast_destinations_.Get(index);
}
inline const std::string& Advanced_TimeSynchronization_PTP::unicast_destinations(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
  return _internal_unicast_destinations(index);
}
inline std::string* Advanced_TimeSynchronization_PTP::mutable_unicast_destinations(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
  return unicast_destinations_.Mutable(index);
}
inline void Advanced_TimeSynchronization_PTP::set_unicast_destinations(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
  unicast_destinations_.Mutable(index)->assign(value);
}
inline void Advanced_TimeSynchronization_PTP::set_unicast_destinations(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
  unicast_destinations_.Mutable(index)->assign(std::move(value));
}
inline void Advanced_TimeSynchronization_PTP::set_unicast_destinations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unicast_destinations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
}
inline void Advanced_TimeSynchronization_PTP::set_unicast_destinations(int index, const char* value, size_t size) {
  unicast_destinations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
}
inline std::string* Advanced_TimeSynchronization_PTP::_internal_add_unicast_destinations() {
  return unicast_destinations_.Add();
}
inline void Advanced_TimeSynchronization_PTP::add_unicast_destinations(const std::string& value) {
  unicast_destinations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
}
inline void Advanced_TimeSynchronization_PTP::add_unicast_destinations(std::string&& value) {
  unicast_destinations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
}
inline void Advanced_TimeSynchronization_PTP::add_unicast_destinations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unicast_destinations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
}
inline void Advanced_TimeSynchronization_PTP::add_unicast_destinations(const char* value, size_t size) {
  unicast_destinations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Advanced_TimeSynchronization_PTP::unicast_destinations() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
  return unicast_destinations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Advanced_TimeSynchronization_PTP::mutable_unicast_destinations() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.config.Advanced.TimeSynchronization.PTP.unicast_destinations)
  return &unicast_destinations_;
}

// -------------------------------------------------------------------

// Advanced_TimeSynchronization

// .blickfeld.protocol.config.Advanced.TimeSynchronization.NTP ntp = 1;
inline bool Advanced_TimeSynchronization::_internal_has_ntp() const {
  return kind_case() == kNtp;
}
inline bool Advanced_TimeSynchronization::has_ntp() const {
  return _internal_has_ntp();
}
inline void Advanced_TimeSynchronization::set_has_ntp() {
  _oneof_case_[0] = kNtp;
}
inline void Advanced_TimeSynchronization::clear_ntp() {
  if (_internal_has_ntp()) {
    if (GetArena() == nullptr) {
      delete kind_.ntp_;
    }
    clear_has_kind();
  }
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* Advanced_TimeSynchronization::release_ntp() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.Advanced.TimeSynchronization.ntp)
  if (_internal_has_ntp()) {
    clear_has_kind();
      ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* temp = kind_.ntp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.ntp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP& Advanced_TimeSynchronization::_internal_ntp() const {
  return _internal_has_ntp()
      ? *kind_.ntp_
      : reinterpret_cast< ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP&>(::blickfeld::protocol::config::_Advanced_TimeSynchronization_NTP_default_instance_);
}
inline const ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP& Advanced_TimeSynchronization::ntp() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.TimeSynchronization.ntp)
  return _internal_ntp();
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* Advanced_TimeSynchronization::unsafe_arena_release_ntp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.config.Advanced.TimeSynchronization.ntp)
  if (_internal_has_ntp()) {
    clear_has_kind();
    ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* temp = kind_.ntp_;
    kind_.ntp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Advanced_TimeSynchronization::unsafe_arena_set_allocated_ntp(::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* ntp) {
  clear_kind();
  if (ntp) {
    set_has_ntp();
    kind_.ntp_ = ntp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.Advanced.TimeSynchronization.ntp)
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* Advanced_TimeSynchronization::_internal_mutable_ntp() {
  if (!_internal_has_ntp()) {
    clear_kind();
    set_has_ntp();
    kind_.ntp_ = CreateMaybeMessage< ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP >(GetArena());
  }
  return kind_.ntp_;
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization_NTP* Advanced_TimeSynchronization::mutable_ntp() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.Advanced.TimeSynchronization.ntp)
  return _internal_mutable_ntp();
}

// .blickfeld.protocol.config.Advanced.TimeSynchronization.PTP ptp = 2;
inline bool Advanced_TimeSynchronization::_internal_has_ptp() const {
  return kind_case() == kPtp;
}
inline bool Advanced_TimeSynchronization::has_ptp() const {
  return _internal_has_ptp();
}
inline void Advanced_TimeSynchronization::set_has_ptp() {
  _oneof_case_[0] = kPtp;
}
inline void Advanced_TimeSynchronization::clear_ptp() {
  if (_internal_has_ptp()) {
    if (GetArena() == nullptr) {
      delete kind_.ptp_;
    }
    clear_has_kind();
  }
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* Advanced_TimeSynchronization::release_ptp() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.Advanced.TimeSynchronization.ptp)
  if (_internal_has_ptp()) {
    clear_has_kind();
      ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* temp = kind_.ptp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.ptp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP& Advanced_TimeSynchronization::_internal_ptp() const {
  return _internal_has_ptp()
      ? *kind_.ptp_
      : reinterpret_cast< ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP&>(::blickfeld::protocol::config::_Advanced_TimeSynchronization_PTP_default_instance_);
}
inline const ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP& Advanced_TimeSynchronization::ptp() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.TimeSynchronization.ptp)
  return _internal_ptp();
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* Advanced_TimeSynchronization::unsafe_arena_release_ptp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.config.Advanced.TimeSynchronization.ptp)
  if (_internal_has_ptp()) {
    clear_has_kind();
    ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* temp = kind_.ptp_;
    kind_.ptp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Advanced_TimeSynchronization::unsafe_arena_set_allocated_ptp(::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* ptp) {
  clear_kind();
  if (ptp) {
    set_has_ptp();
    kind_.ptp_ = ptp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.Advanced.TimeSynchronization.ptp)
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* Advanced_TimeSynchronization::_internal_mutable_ptp() {
  if (!_internal_has_ptp()) {
    clear_kind();
    set_has_ptp();
    kind_.ptp_ = CreateMaybeMessage< ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP >(GetArena());
  }
  return kind_.ptp_;
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP* Advanced_TimeSynchronization::mutable_ptp() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.Advanced.TimeSynchronization.ptp)
  return _internal_mutable_ptp();
}

inline bool Advanced_TimeSynchronization::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Advanced_TimeSynchronization::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline Advanced_TimeSynchronization::KindCase Advanced_TimeSynchronization::kind_case() const {
  return Advanced_TimeSynchronization::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Advanced

// optional .blickfeld.protocol.config.Advanced.Detector detector = 1;
inline bool Advanced::_internal_has_detector() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || detector_ != nullptr);
  return value;
}
inline bool Advanced::has_detector() const {
  return _internal_has_detector();
}
inline void Advanced::clear_detector() {
  if (detector_ != nullptr) detector_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::blickfeld::protocol::config::Advanced_Detector& Advanced::_internal_detector() const {
  const ::blickfeld::protocol::config::Advanced_Detector* p = detector_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::Advanced_Detector&>(
      ::blickfeld::protocol::config::_Advanced_Detector_default_instance_);
}
inline const ::blickfeld::protocol::config::Advanced_Detector& Advanced::detector() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.detector)
  return _internal_detector();
}
inline void Advanced::unsafe_arena_set_allocated_detector(
    ::blickfeld::protocol::config::Advanced_Detector* detector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detector_);
  }
  detector_ = detector;
  if (detector) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.Advanced.detector)
}
inline ::blickfeld::protocol::config::Advanced_Detector* Advanced::release_detector() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::Advanced_Detector* temp = detector_;
  detector_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::Advanced_Detector* Advanced::unsafe_arena_release_detector() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.Advanced.detector)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::Advanced_Detector* temp = detector_;
  detector_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::Advanced_Detector* Advanced::_internal_mutable_detector() {
  _has_bits_[0] |= 0x00000001u;
  if (detector_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::Advanced_Detector>(GetArena());
    detector_ = p;
  }
  return detector_;
}
inline ::blickfeld::protocol::config::Advanced_Detector* Advanced::mutable_detector() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.Advanced.detector)
  return _internal_mutable_detector();
}
inline void Advanced::set_allocated_detector(::blickfeld::protocol::config::Advanced_Detector* detector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete detector_;
  }
  if (detector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detector);
    if (message_arena != submessage_arena) {
      detector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detector, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  detector_ = detector;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.Advanced.detector)
}

// optional .blickfeld.protocol.config.Advanced.Processing processing = 2;
inline bool Advanced::_internal_has_processing() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || processing_ != nullptr);
  return value;
}
inline bool Advanced::has_processing() const {
  return _internal_has_processing();
}
inline void Advanced::clear_processing() {
  if (processing_ != nullptr) processing_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::blickfeld::protocol::config::Advanced_Processing& Advanced::_internal_processing() const {
  const ::blickfeld::protocol::config::Advanced_Processing* p = processing_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::Advanced_Processing&>(
      ::blickfeld::protocol::config::_Advanced_Processing_default_instance_);
}
inline const ::blickfeld::protocol::config::Advanced_Processing& Advanced::processing() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.processing)
  return _internal_processing();
}
inline void Advanced::unsafe_arena_set_allocated_processing(
    ::blickfeld::protocol::config::Advanced_Processing* processing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processing_);
  }
  processing_ = processing;
  if (processing) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.Advanced.processing)
}
inline ::blickfeld::protocol::config::Advanced_Processing* Advanced::release_processing() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::Advanced_Processing* temp = processing_;
  processing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::Advanced_Processing* Advanced::unsafe_arena_release_processing() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.Advanced.processing)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::Advanced_Processing* temp = processing_;
  processing_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::Advanced_Processing* Advanced::_internal_mutable_processing() {
  _has_bits_[0] |= 0x00000002u;
  if (processing_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::Advanced_Processing>(GetArena());
    processing_ = p;
  }
  return processing_;
}
inline ::blickfeld::protocol::config::Advanced_Processing* Advanced::mutable_processing() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.Advanced.processing)
  return _internal_mutable_processing();
}
inline void Advanced::set_allocated_processing(::blickfeld::protocol::config::Advanced_Processing* processing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete processing_;
  }
  if (processing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(processing);
    if (message_arena != submessage_arena) {
      processing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  processing_ = processing;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.Advanced.processing)
}

// optional .blickfeld.protocol.config.Advanced.Server server = 3;
inline bool Advanced::_internal_has_server() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || server_ != nullptr);
  return value;
}
inline bool Advanced::has_server() const {
  return _internal_has_server();
}
inline void Advanced::clear_server() {
  if (server_ != nullptr) server_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::blickfeld::protocol::config::Advanced_Server& Advanced::_internal_server() const {
  const ::blickfeld::protocol::config::Advanced_Server* p = server_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::Advanced_Server&>(
      ::blickfeld::protocol::config::_Advanced_Server_default_instance_);
}
inline const ::blickfeld::protocol::config::Advanced_Server& Advanced::server() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.server)
  return _internal_server();
}
inline void Advanced::unsafe_arena_set_allocated_server(
    ::blickfeld::protocol::config::Advanced_Server* server) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_);
  }
  server_ = server;
  if (server) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.Advanced.server)
}
inline ::blickfeld::protocol::config::Advanced_Server* Advanced::release_server() {
  _has_bits_[0] &= ~0x00000004u;
  ::blickfeld::protocol::config::Advanced_Server* temp = server_;
  server_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::Advanced_Server* Advanced::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.Advanced.server)
  _has_bits_[0] &= ~0x00000004u;
  ::blickfeld::protocol::config::Advanced_Server* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::Advanced_Server* Advanced::_internal_mutable_server() {
  _has_bits_[0] |= 0x00000004u;
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::Advanced_Server>(GetArena());
    server_ = p;
  }
  return server_;
}
inline ::blickfeld::protocol::config::Advanced_Server* Advanced::mutable_server() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.Advanced.server)
  return _internal_mutable_server();
}
inline void Advanced::set_allocated_server(::blickfeld::protocol::config::Advanced_Server* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_;
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server);
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.Advanced.server)
}

// optional .blickfeld.protocol.config.Advanced.TimeSynchronization time_synchronization = 4;
inline bool Advanced::_internal_has_time_synchronization() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || time_synchronization_ != nullptr);
  return value;
}
inline bool Advanced::has_time_synchronization() const {
  return _internal_has_time_synchronization();
}
inline void Advanced::clear_time_synchronization() {
  if (time_synchronization_ != nullptr) time_synchronization_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::blickfeld::protocol::config::Advanced_TimeSynchronization& Advanced::_internal_time_synchronization() const {
  const ::blickfeld::protocol::config::Advanced_TimeSynchronization* p = time_synchronization_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::Advanced_TimeSynchronization&>(
      ::blickfeld::protocol::config::_Advanced_TimeSynchronization_default_instance_);
}
inline const ::blickfeld::protocol::config::Advanced_TimeSynchronization& Advanced::time_synchronization() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Advanced.time_synchronization)
  return _internal_time_synchronization();
}
inline void Advanced::unsafe_arena_set_allocated_time_synchronization(
    ::blickfeld::protocol::config::Advanced_TimeSynchronization* time_synchronization) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_synchronization_);
  }
  time_synchronization_ = time_synchronization;
  if (time_synchronization) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.Advanced.time_synchronization)
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization* Advanced::release_time_synchronization() {
  _has_bits_[0] &= ~0x00000008u;
  ::blickfeld::protocol::config::Advanced_TimeSynchronization* temp = time_synchronization_;
  time_synchronization_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization* Advanced::unsafe_arena_release_time_synchronization() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.Advanced.time_synchronization)
  _has_bits_[0] &= ~0x00000008u;
  ::blickfeld::protocol::config::Advanced_TimeSynchronization* temp = time_synchronization_;
  time_synchronization_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization* Advanced::_internal_mutable_time_synchronization() {
  _has_bits_[0] |= 0x00000008u;
  if (time_synchronization_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::Advanced_TimeSynchronization>(GetArena());
    time_synchronization_ = p;
  }
  return time_synchronization_;
}
inline ::blickfeld::protocol::config::Advanced_TimeSynchronization* Advanced::mutable_time_synchronization() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.Advanced.time_synchronization)
  return _internal_mutable_time_synchronization();
}
inline void Advanced::set_allocated_time_synchronization(::blickfeld::protocol::config::Advanced_TimeSynchronization* time_synchronization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete time_synchronization_;
  }
  if (time_synchronization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_synchronization);
    if (message_arena != submessage_arena) {
      time_synchronization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_synchronization, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  time_synchronization_ = time_synchronization;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.Advanced.time_synchronization)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace protocol
}  // namespace blickfeld

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism>() {
  return ::blickfeld::protocol::config::Advanced_TimeSynchronization_PTP_DelayMechanism_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fadvanced_2eproto
