// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/config/secure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fsecure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fsecure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fconfig_2fsecure_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fconfig_2fsecure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fconfig_2fsecure_2eproto;
namespace blickfeld {
namespace protocol {
namespace config {
class Secure;
struct SecureDefaultTypeInternal;
BF_DLLEXPORT extern SecureDefaultTypeInternal _Secure_default_instance_;
}  // namespace config
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::config::Secure* Arena::CreateMaybeMessage<::blickfeld::protocol::config::Secure>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace config {

enum Secure_Permissions : int {
  Secure_Permissions_PUBLIC = 0,
  Secure_Permissions_DEVELOPER = 1
};
BF_DLLEXPORT bool Secure_Permissions_IsValid(int value);
constexpr Secure_Permissions Secure_Permissions_Permissions_MIN = Secure_Permissions_PUBLIC;
constexpr Secure_Permissions Secure_Permissions_Permissions_MAX = Secure_Permissions_DEVELOPER;
constexpr int Secure_Permissions_Permissions_ARRAYSIZE = Secure_Permissions_Permissions_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Secure_Permissions_descriptor();
template<typename T>
inline const std::string& Secure_Permissions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Secure_Permissions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Secure_Permissions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Secure_Permissions_descriptor(), enum_t_value);
}
inline bool Secure_Permissions_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Secure_Permissions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Secure_Permissions>(
    Secure_Permissions_descriptor(), name, value);
}
enum Secure_CertType : int {
  Secure_CertType_CLIENT = 0,
  Secure_CertType_CUBE = 1
};
BF_DLLEXPORT bool Secure_CertType_IsValid(int value);
constexpr Secure_CertType Secure_CertType_CertType_MIN = Secure_CertType_CLIENT;
constexpr Secure_CertType Secure_CertType_CertType_MAX = Secure_CertType_CUBE;
constexpr int Secure_CertType_CertType_ARRAYSIZE = Secure_CertType_CertType_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Secure_CertType_descriptor();
template<typename T>
inline const std::string& Secure_CertType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Secure_CertType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Secure_CertType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Secure_CertType_descriptor(), enum_t_value);
}
inline bool Secure_CertType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Secure_CertType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Secure_CertType>(
    Secure_CertType_descriptor(), name, value);
}
// ===================================================================

class BF_DLLEXPORT Secure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.Secure) */ {
 public:
  inline Secure() : Secure(nullptr) {}
  ~Secure() override;
  explicit constexpr Secure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Secure(const Secure& from);
  Secure(Secure&& from) noexcept
    : Secure() {
    *this = ::std::move(from);
  }

  inline Secure& operator=(const Secure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Secure& operator=(Secure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Secure& default_instance() {
    return *internal_default_instance();
  }
  static inline const Secure* internal_default_instance() {
    return reinterpret_cast<const Secure*>(
               &_Secure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Secure& a, Secure& b) {
    a.Swap(&b);
  }
  inline void Swap(Secure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Secure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Secure* New() const final {
    return CreateMaybeMessage<Secure>(nullptr);
  }

  Secure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Secure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Secure& from);
  void MergeFrom(const Secure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Secure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.Secure";
  }
  protected:
  explicit Secure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Secure_Permissions Permissions;
  static constexpr Permissions PUBLIC =
    Secure_Permissions_PUBLIC;
  static constexpr Permissions DEVELOPER =
    Secure_Permissions_DEVELOPER;
  static inline bool Permissions_IsValid(int value) {
    return Secure_Permissions_IsValid(value);
  }
  static constexpr Permissions Permissions_MIN =
    Secure_Permissions_Permissions_MIN;
  static constexpr Permissions Permissions_MAX =
    Secure_Permissions_Permissions_MAX;
  static constexpr int Permissions_ARRAYSIZE =
    Secure_Permissions_Permissions_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Permissions_descriptor() {
    return Secure_Permissions_descriptor();
  }
  template<typename T>
  static inline const std::string& Permissions_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Permissions>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Permissions_Name.");
    return Secure_Permissions_Name(enum_t_value);
  }
  static inline bool Permissions_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Permissions* value) {
    return Secure_Permissions_Parse(name, value);
  }

  typedef Secure_CertType CertType;
  static constexpr CertType CLIENT =
    Secure_CertType_CLIENT;
  static constexpr CertType CUBE =
    Secure_CertType_CUBE;
  static inline bool CertType_IsValid(int value) {
    return Secure_CertType_IsValid(value);
  }
  static constexpr CertType CertType_MIN =
    Secure_CertType_CertType_MIN;
  static constexpr CertType CertType_MAX =
    Secure_CertType_CertType_MAX;
  static constexpr int CertType_ARRAYSIZE =
    Secure_CertType_CertType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CertType_descriptor() {
    return Secure_CertType_descriptor();
  }
  template<typename T>
  static inline const std::string& CertType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CertType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CertType_Name.");
    return Secure_CertType_Name(enum_t_value);
  }
  static inline bool CertType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CertType* value) {
    return Secure_CertType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 1,
    kCertTypeFieldNumber = 2,
    kVersionMajorFieldNumber = 3,
    kVersionMinorFieldNumber = 4,
    kVersionPatchFieldNumber = 5,
  };
  // repeated .blickfeld.protocol.config.Secure.Permissions permissions = 1;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  private:
  ::blickfeld::protocol::config::Secure_Permissions _internal_permissions(int index) const;
  void _internal_add_permissions(::blickfeld::protocol::config::Secure_Permissions value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_permissions();
  public:
  ::blickfeld::protocol::config::Secure_Permissions permissions(int index) const;
  void set_permissions(int index, ::blickfeld::protocol::config::Secure_Permissions value);
  void add_permissions(::blickfeld::protocol::config::Secure_Permissions value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& permissions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_permissions();

  // optional .blickfeld.protocol.config.Secure.CertType cert_type = 2;
  bool has_cert_type() const;
  private:
  bool _internal_has_cert_type() const;
  public:
  void clear_cert_type();
  ::blickfeld::protocol::config::Secure_CertType cert_type() const;
  void set_cert_type(::blickfeld::protocol::config::Secure_CertType value);
  private:
  ::blickfeld::protocol::config::Secure_CertType _internal_cert_type() const;
  void _internal_set_cert_type(::blickfeld::protocol::config::Secure_CertType value);
  public:

  // optional uint32 version_major = 3;
  bool has_version_major() const;
  private:
  bool _internal_has_version_major() const;
  public:
  void clear_version_major();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_major() const;
  void set_version_major(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version_major() const;
  void _internal_set_version_major(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 version_minor = 4;
  bool has_version_minor() const;
  private:
  bool _internal_has_version_minor() const;
  public:
  void clear_version_minor();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_minor() const;
  void set_version_minor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version_minor() const;
  void _internal_set_version_minor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 version_patch = 5;
  bool has_version_patch() const;
  private:
  bool _internal_has_version_patch() const;
  public:
  void clear_version_patch();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_patch() const;
  void set_version_patch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version_patch() const;
  void _internal_set_version_patch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.Secure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> permissions_;
  int cert_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_major_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_minor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_patch_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fsecure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Secure

// repeated .blickfeld.protocol.config.Secure.Permissions permissions = 1;
inline int Secure::_internal_permissions_size() const {
  return permissions_.size();
}
inline int Secure::permissions_size() const {
  return _internal_permissions_size();
}
inline void Secure::clear_permissions() {
  permissions_.Clear();
}
inline ::blickfeld::protocol::config::Secure_Permissions Secure::_internal_permissions(int index) const {
  return static_cast< ::blickfeld::protocol::config::Secure_Permissions >(permissions_.Get(index));
}
inline ::blickfeld::protocol::config::Secure_Permissions Secure::permissions(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Secure.permissions)
  return _internal_permissions(index);
}
inline void Secure::set_permissions(int index, ::blickfeld::protocol::config::Secure_Permissions value) {
  assert(::blickfeld::protocol::config::Secure_Permissions_IsValid(value));
  permissions_.Set(index, value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Secure.permissions)
}
inline void Secure::_internal_add_permissions(::blickfeld::protocol::config::Secure_Permissions value) {
  assert(::blickfeld::protocol::config::Secure_Permissions_IsValid(value));
  permissions_.Add(value);
}
inline void Secure::add_permissions(::blickfeld::protocol::config::Secure_Permissions value) {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.config.Secure.permissions)
  _internal_add_permissions(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Secure::permissions() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.config.Secure.permissions)
  return permissions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Secure::_internal_mutable_permissions() {
  return &permissions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Secure::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.config.Secure.permissions)
  return _internal_mutable_permissions();
}

// optional .blickfeld.protocol.config.Secure.CertType cert_type = 2;
inline bool Secure::_internal_has_cert_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Secure::has_cert_type() const {
  return _internal_has_cert_type();
}
inline void Secure::clear_cert_type() {
  cert_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::blickfeld::protocol::config::Secure_CertType Secure::_internal_cert_type() const {
  return static_cast< ::blickfeld::protocol::config::Secure_CertType >(cert_type_);
}
inline ::blickfeld::protocol::config::Secure_CertType Secure::cert_type() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Secure.cert_type)
  return _internal_cert_type();
}
inline void Secure::_internal_set_cert_type(::blickfeld::protocol::config::Secure_CertType value) {
  assert(::blickfeld::protocol::config::Secure_CertType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  cert_type_ = value;
}
inline void Secure::set_cert_type(::blickfeld::protocol::config::Secure_CertType value) {
  _internal_set_cert_type(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Secure.cert_type)
}

// optional uint32 version_major = 3;
inline bool Secure::_internal_has_version_major() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Secure::has_version_major() const {
  return _internal_has_version_major();
}
inline void Secure::clear_version_major() {
  version_major_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secure::_internal_version_major() const {
  return version_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secure::version_major() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Secure.version_major)
  return _internal_version_major();
}
inline void Secure::_internal_set_version_major(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_major_ = value;
}
inline void Secure::set_version_major(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version_major(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Secure.version_major)
}

// optional uint32 version_minor = 4;
inline bool Secure::_internal_has_version_minor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Secure::has_version_minor() const {
  return _internal_has_version_minor();
}
inline void Secure::clear_version_minor() {
  version_minor_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secure::_internal_version_minor() const {
  return version_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secure::version_minor() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Secure.version_minor)
  return _internal_version_minor();
}
inline void Secure::_internal_set_version_minor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_minor_ = value;
}
inline void Secure::set_version_minor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version_minor(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Secure.version_minor)
}

// optional uint32 version_patch = 5;
inline bool Secure::_internal_has_version_patch() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Secure::has_version_patch() const {
  return _internal_has_version_patch();
}
inline void Secure::clear_version_patch() {
  version_patch_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secure::_internal_version_patch() const {
  return version_patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secure::version_patch() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.Secure.version_patch)
  return _internal_version_patch();
}
inline void Secure::_internal_set_version_patch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_patch_ = value;
}
inline void Secure::set_version_patch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version_patch(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.Secure.version_patch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace protocol
}  // namespace blickfeld

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blickfeld::protocol::config::Secure_Permissions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::config::Secure_Permissions>() {
  return ::blickfeld::protocol::config::Secure_Permissions_descriptor();
}
template <> struct is_proto_enum< ::blickfeld::protocol::config::Secure_CertType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::config::Secure_CertType>() {
  return ::blickfeld::protocol::config::Secure_CertType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fsecure_2eproto
