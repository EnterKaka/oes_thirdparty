// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/config/scan_pattern.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fscan_5fpattern_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fscan_5fpattern_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/common.pb.h"
#include "blickfeld/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fconfig_2fscan_5fpattern_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
namespace blickfeld {
namespace protocol {
namespace config {
class ScanPattern;
struct ScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern ScanPatternDefaultTypeInternal _ScanPattern_default_instance_;
class ScanPattern_Filter;
struct ScanPattern_FilterDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_FilterDefaultTypeInternal _ScanPattern_Filter_default_instance_;
class ScanPattern_Filter_Noise;
struct ScanPattern_Filter_NoiseDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_Filter_NoiseDefaultTypeInternal _ScanPattern_Filter_Noise_default_instance_;
class ScanPattern_FrameRate;
struct ScanPattern_FrameRateDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_FrameRateDefaultTypeInternal _ScanPattern_FrameRate_default_instance_;
class ScanPattern_Horizontal;
struct ScanPattern_HorizontalDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_HorizontalDefaultTypeInternal _ScanPattern_Horizontal_default_instance_;
class ScanPattern_Pulse;
struct ScanPattern_PulseDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_PulseDefaultTypeInternal _ScanPattern_Pulse_default_instance_;
class ScanPattern_Pulse_Custom;
struct ScanPattern_Pulse_CustomDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_Pulse_CustomDefaultTypeInternal _ScanPattern_Pulse_Custom_default_instance_;
class ScanPattern_Pulse_Custom_AngleTrigger;
struct ScanPattern_Pulse_Custom_AngleTriggerDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_Pulse_Custom_AngleTriggerDefaultTypeInternal _ScanPattern_Pulse_Custom_AngleTrigger_default_instance_;
class ScanPattern_Pulse_Custom_AngleTrigger_Angle;
struct ScanPattern_Pulse_Custom_AngleTrigger_AngleDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_Pulse_Custom_AngleTrigger_AngleDefaultTypeInternal _ScanPattern_Pulse_Custom_AngleTrigger_Angle_default_instance_;
class ScanPattern_Pulse_Custom_Duration;
struct ScanPattern_Pulse_Custom_DurationDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_Pulse_Custom_DurationDefaultTypeInternal _ScanPattern_Pulse_Custom_Duration_default_instance_;
class ScanPattern_Pulse_Custom_PointTrigger;
struct ScanPattern_Pulse_Custom_PointTriggerDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_Pulse_Custom_PointTriggerDefaultTypeInternal _ScanPattern_Pulse_Custom_PointTrigger_default_instance_;
class ScanPattern_Pulse_Custom_PointTrigger_Point;
struct ScanPattern_Pulse_Custom_PointTrigger_PointDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_Pulse_Custom_PointTrigger_PointDefaultTypeInternal _ScanPattern_Pulse_Custom_PointTrigger_Point_default_instance_;
class ScanPattern_Vertical;
struct ScanPattern_VerticalDefaultTypeInternal;
BF_DLLEXPORT extern ScanPattern_VerticalDefaultTypeInternal _ScanPattern_Vertical_default_instance_;
}  // namespace config
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_Filter* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Filter>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_Filter_Noise* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Filter_Noise>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_FrameRate* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_FrameRate>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_Horizontal* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Horizontal>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_Pulse* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Pulse>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Pulse_Custom>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::config::ScanPattern_Vertical* Arena::CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Vertical>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace config {

enum ScanPattern_Pulse_Custom_Trigger : int {
  ScanPattern_Pulse_Custom_Trigger_TRG_EXTERNAL_0 = 1,
  ScanPattern_Pulse_Custom_Trigger_TRG_EXTERNAL_1 = 2,
  ScanPattern_Pulse_Custom_Trigger_TRG_DETECTOR = 3,
  ScanPattern_Pulse_Custom_Trigger_TRG_LASER = 4
};
BF_DLLEXPORT bool ScanPattern_Pulse_Custom_Trigger_IsValid(int value);
constexpr ScanPattern_Pulse_Custom_Trigger ScanPattern_Pulse_Custom_Trigger_Trigger_MIN = ScanPattern_Pulse_Custom_Trigger_TRG_EXTERNAL_0;
constexpr ScanPattern_Pulse_Custom_Trigger ScanPattern_Pulse_Custom_Trigger_Trigger_MAX = ScanPattern_Pulse_Custom_Trigger_TRG_LASER;
constexpr int ScanPattern_Pulse_Custom_Trigger_Trigger_ARRAYSIZE = ScanPattern_Pulse_Custom_Trigger_Trigger_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScanPattern_Pulse_Custom_Trigger_descriptor();
template<typename T>
inline const std::string& ScanPattern_Pulse_Custom_Trigger_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScanPattern_Pulse_Custom_Trigger>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScanPattern_Pulse_Custom_Trigger_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScanPattern_Pulse_Custom_Trigger_descriptor(), enum_t_value);
}
inline bool ScanPattern_Pulse_Custom_Trigger_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScanPattern_Pulse_Custom_Trigger* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScanPattern_Pulse_Custom_Trigger>(
    ScanPattern_Pulse_Custom_Trigger_descriptor(), name, value);
}
enum ScanPattern_Pulse_Type : int {
  ScanPattern_Pulse_Type_EQUI_HORIZONTAL_ANGLE = 0,
  ScanPattern_Pulse_Type_EQUI_DENSITY = 1,
  ScanPattern_Pulse_Type_CUSTOM = 2,
  ScanPattern_Pulse_Type_INTERLEAVE = 3
};
BF_DLLEXPORT bool ScanPattern_Pulse_Type_IsValid(int value);
constexpr ScanPattern_Pulse_Type ScanPattern_Pulse_Type_Type_MIN = ScanPattern_Pulse_Type_EQUI_HORIZONTAL_ANGLE;
constexpr ScanPattern_Pulse_Type ScanPattern_Pulse_Type_Type_MAX = ScanPattern_Pulse_Type_INTERLEAVE;
constexpr int ScanPattern_Pulse_Type_Type_ARRAYSIZE = ScanPattern_Pulse_Type_Type_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScanPattern_Pulse_Type_descriptor();
template<typename T>
inline const std::string& ScanPattern_Pulse_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScanPattern_Pulse_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScanPattern_Pulse_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScanPattern_Pulse_Type_descriptor(), enum_t_value);
}
inline bool ScanPattern_Pulse_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScanPattern_Pulse_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScanPattern_Pulse_Type>(
    ScanPattern_Pulse_Type_descriptor(), name, value);
}
enum ScanPattern_Pulse_FrameMode : int {
  ScanPattern_Pulse_FrameMode_NONE = 0,
  ScanPattern_Pulse_FrameMode_COMBINE_UP_DOWN = 1,
  ScanPattern_Pulse_FrameMode_ONLY_UP = 2,
  ScanPattern_Pulse_FrameMode_ONLY_DOWN = 3,
  ScanPattern_Pulse_FrameMode_SEPARATE = 4
};
BF_DLLEXPORT bool ScanPattern_Pulse_FrameMode_IsValid(int value);
constexpr ScanPattern_Pulse_FrameMode ScanPattern_Pulse_FrameMode_FrameMode_MIN = ScanPattern_Pulse_FrameMode_NONE;
constexpr ScanPattern_Pulse_FrameMode ScanPattern_Pulse_FrameMode_FrameMode_MAX = ScanPattern_Pulse_FrameMode_SEPARATE;
constexpr int ScanPattern_Pulse_FrameMode_FrameMode_ARRAYSIZE = ScanPattern_Pulse_FrameMode_FrameMode_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScanPattern_Pulse_FrameMode_descriptor();
template<typename T>
inline const std::string& ScanPattern_Pulse_FrameMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScanPattern_Pulse_FrameMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScanPattern_Pulse_FrameMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScanPattern_Pulse_FrameMode_descriptor(), enum_t_value);
}
inline bool ScanPattern_Pulse_FrameMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScanPattern_Pulse_FrameMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScanPattern_Pulse_FrameMode>(
    ScanPattern_Pulse_FrameMode_descriptor(), name, value);
}
// ===================================================================

class BF_DLLEXPORT ScanPattern_Horizontal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.Horizontal) */ {
 public:
  inline ScanPattern_Horizontal() : ScanPattern_Horizontal(nullptr) {}
  ~ScanPattern_Horizontal() override;
  explicit constexpr ScanPattern_Horizontal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_Horizontal(const ScanPattern_Horizontal& from);
  ScanPattern_Horizontal(ScanPattern_Horizontal&& from) noexcept
    : ScanPattern_Horizontal() {
    *this = ::std::move(from);
  }

  inline ScanPattern_Horizontal& operator=(const ScanPattern_Horizontal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_Horizontal& operator=(ScanPattern_Horizontal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_Horizontal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern_Horizontal* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_Horizontal*>(
               &_ScanPattern_Horizontal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScanPattern_Horizontal& a, ScanPattern_Horizontal& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_Horizontal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_Horizontal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_Horizontal* New() const final {
    return CreateMaybeMessage<ScanPattern_Horizontal>(nullptr);
  }

  ScanPattern_Horizontal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_Horizontal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_Horizontal& from);
  void MergeFrom(const ScanPattern_Horizontal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_Horizontal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.Horizontal";
  }
  protected:
  explicit ScanPattern_Horizontal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFovFieldNumber = 1,
  };
  // optional float fov = 1 [(.blickfeld.protocol.unit) = "rad", (.blickfeld.protocol.ui_unit) = "deg", (.blickfeld.protocol.ui_scale) = 57.295779513, (.blickfeld.protocol.ui_decimal_places) = 2];
  bool has_fov() const;
  private:
  bool _internal_has_fov() const;
  public:
  void clear_fov();
  float fov() const;
  void set_fov(float value);
  private:
  float _internal_fov() const;
  void _internal_set_fov(float value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.Horizontal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float fov_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern_Vertical PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.Vertical) */ {
 public:
  inline ScanPattern_Vertical() : ScanPattern_Vertical(nullptr) {}
  ~ScanPattern_Vertical() override;
  explicit constexpr ScanPattern_Vertical(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_Vertical(const ScanPattern_Vertical& from);
  ScanPattern_Vertical(ScanPattern_Vertical&& from) noexcept
    : ScanPattern_Vertical() {
    *this = ::std::move(from);
  }

  inline ScanPattern_Vertical& operator=(const ScanPattern_Vertical& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_Vertical& operator=(ScanPattern_Vertical&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_Vertical& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern_Vertical* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_Vertical*>(
               &_ScanPattern_Vertical_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScanPattern_Vertical& a, ScanPattern_Vertical& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_Vertical* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_Vertical* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_Vertical* New() const final {
    return CreateMaybeMessage<ScanPattern_Vertical>(nullptr);
  }

  ScanPattern_Vertical* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_Vertical>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_Vertical& from);
  void MergeFrom(const ScanPattern_Vertical& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_Vertical* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.Vertical";
  }
  protected:
  explicit ScanPattern_Vertical(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFovFieldNumber = 1,
    kScanlinesUpFieldNumber = 2,
    kScanlinesDownFieldNumber = 3,
  };
  // optional float fov = 1 [(.blickfeld.protocol.unit) = "rad", (.blickfeld.protocol.ui_unit) = "deg", (.blickfeld.protocol.ui_scale) = 57.295779513, (.blickfeld.protocol.ui_decimal_places) = 2];
  bool has_fov() const;
  private:
  bool _internal_has_fov() const;
  public:
  void clear_fov();
  float fov() const;
  void set_fov(float value);
  private:
  float _internal_fov() const;
  void _internal_set_fov(float value);
  public:

  // optional uint32 scanlines_up = 2 [default = 40, (.blickfeld.protocol.d_min) = 1];
  bool has_scanlines_up() const;
  private:
  bool _internal_has_scanlines_up() const;
  public:
  void clear_scanlines_up();
  ::PROTOBUF_NAMESPACE_ID::uint32 scanlines_up() const;
  void set_scanlines_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scanlines_up() const;
  void _internal_set_scanlines_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 scanlines_down = 3 [default = 40, (.blickfeld.protocol.d_min) = 1];
  bool has_scanlines_down() const;
  private:
  bool _internal_has_scanlines_down() const;
  public:
  void clear_scanlines_down();
  ::PROTOBUF_NAMESPACE_ID::uint32 scanlines_down() const;
  void set_scanlines_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scanlines_down() const;
  void _internal_set_scanlines_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.Vertical)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float fov_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scanlines_up_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scanlines_down_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern_Pulse_Custom_Duration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.Pulse.Custom.Duration) */ {
 public:
  inline ScanPattern_Pulse_Custom_Duration() : ScanPattern_Pulse_Custom_Duration(nullptr) {}
  ~ScanPattern_Pulse_Custom_Duration() override;
  explicit constexpr ScanPattern_Pulse_Custom_Duration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_Pulse_Custom_Duration(const ScanPattern_Pulse_Custom_Duration& from);
  ScanPattern_Pulse_Custom_Duration(ScanPattern_Pulse_Custom_Duration&& from) noexcept
    : ScanPattern_Pulse_Custom_Duration() {
    *this = ::std::move(from);
  }

  inline ScanPattern_Pulse_Custom_Duration& operator=(const ScanPattern_Pulse_Custom_Duration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_Pulse_Custom_Duration& operator=(ScanPattern_Pulse_Custom_Duration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_Pulse_Custom_Duration& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern_Pulse_Custom_Duration* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_Pulse_Custom_Duration*>(
               &_ScanPattern_Pulse_Custom_Duration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScanPattern_Pulse_Custom_Duration& a, ScanPattern_Pulse_Custom_Duration& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_Pulse_Custom_Duration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_Pulse_Custom_Duration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_Pulse_Custom_Duration* New() const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom_Duration>(nullptr);
  }

  ScanPattern_Pulse_Custom_Duration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom_Duration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_Pulse_Custom_Duration& from);
  void MergeFrom(const ScanPattern_Pulse_Custom_Duration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_Pulse_Custom_Duration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.Pulse.Custom.Duration";
  }
  protected:
  explicit ScanPattern_Pulse_Custom_Duration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternal0FieldNumber = 1,
    kExternal1FieldNumber = 2,
  };
  // optional float external_0 = 1 [default = 0.0001, (.blickfeld.protocol.d_min) = 8e-09, (.blickfeld.protocol.d_max) = 0.1];
  bool has_external_0() const;
  private:
  bool _internal_has_external_0() const;
  public:
  void clear_external_0();
  float external_0() const;
  void set_external_0(float value);
  private:
  float _internal_external_0() const;
  void _internal_set_external_0(float value);
  public:

  // optional float external_1 = 2 [default = 0.0001, (.blickfeld.protocol.d_min) = 8e-09, (.blickfeld.protocol.d_max) = 0.1];
  bool has_external_1() const;
  private:
  bool _internal_has_external_1() const;
  public:
  void clear_external_1();
  float external_1() const;
  void set_external_1(float value);
  private:
  float _internal_external_1() const;
  void _internal_set_external_1(float value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.Pulse.Custom.Duration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float external_0_;
  float external_1_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern_Pulse_Custom_AngleTrigger_Angle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle) */ {
 public:
  inline ScanPattern_Pulse_Custom_AngleTrigger_Angle() : ScanPattern_Pulse_Custom_AngleTrigger_Angle(nullptr) {}
  ~ScanPattern_Pulse_Custom_AngleTrigger_Angle() override;
  explicit constexpr ScanPattern_Pulse_Custom_AngleTrigger_Angle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_Pulse_Custom_AngleTrigger_Angle(const ScanPattern_Pulse_Custom_AngleTrigger_Angle& from);
  ScanPattern_Pulse_Custom_AngleTrigger_Angle(ScanPattern_Pulse_Custom_AngleTrigger_Angle&& from) noexcept
    : ScanPattern_Pulse_Custom_AngleTrigger_Angle() {
    *this = ::std::move(from);
  }

  inline ScanPattern_Pulse_Custom_AngleTrigger_Angle& operator=(const ScanPattern_Pulse_Custom_AngleTrigger_Angle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_Pulse_Custom_AngleTrigger_Angle& operator=(ScanPattern_Pulse_Custom_AngleTrigger_Angle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_Pulse_Custom_AngleTrigger_Angle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern_Pulse_Custom_AngleTrigger_Angle* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_Pulse_Custom_AngleTrigger_Angle*>(
               &_ScanPattern_Pulse_Custom_AngleTrigger_Angle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScanPattern_Pulse_Custom_AngleTrigger_Angle& a, ScanPattern_Pulse_Custom_AngleTrigger_Angle& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_Pulse_Custom_AngleTrigger_Angle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_Pulse_Custom_AngleTrigger_Angle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_Pulse_Custom_AngleTrigger_Angle* New() const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom_AngleTrigger_Angle>(nullptr);
  }

  ScanPattern_Pulse_Custom_AngleTrigger_Angle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom_AngleTrigger_Angle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_Pulse_Custom_AngleTrigger_Angle& from);
  void MergeFrom(const ScanPattern_Pulse_Custom_AngleTrigger_Angle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_Pulse_Custom_AngleTrigger_Angle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle";
  }
  protected:
  explicit ScanPattern_Pulse_Custom_AngleTrigger_Angle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledTriggersFieldNumber = 3,
    kScanlineIdFieldNumber = 2,
    kHorizontalAngleFieldNumber = 1,
  };
  // repeated .blickfeld.protocol.config.ScanPattern.Pulse.Custom.Trigger enabled_triggers = 3;
  int enabled_triggers_size() const;
  private:
  int _internal_enabled_triggers_size() const;
  public:
  void clear_enabled_triggers();
  private:
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger _internal_enabled_triggers(int index) const;
  void _internal_add_enabled_triggers(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enabled_triggers();
  public:
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger enabled_triggers(int index) const;
  void set_enabled_triggers(int index, ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value);
  void add_enabled_triggers(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enabled_triggers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enabled_triggers();

  // optional uint64 scanline_id = 2 [(.blickfeld.protocol.optional) = true];
  bool has_scanline_id() const;
  private:
  bool _internal_has_scanline_id() const;
  public:
  void clear_scanline_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 scanline_id() const;
  void set_scanline_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_scanline_id() const;
  void _internal_set_scanline_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float horizontal_angle = 1;
  bool has_horizontal_angle() const;
  private:
  bool _internal_has_horizontal_angle() const;
  public:
  void clear_horizontal_angle();
  float horizontal_angle() const;
  void set_horizontal_angle(float value);
  private:
  float _internal_horizontal_angle() const;
  void _internal_set_horizontal_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enabled_triggers_;
  ::PROTOBUF_NAMESPACE_ID::uint64 scanline_id_;
  float horizontal_angle_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern_Pulse_Custom_AngleTrigger PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger) */ {
 public:
  inline ScanPattern_Pulse_Custom_AngleTrigger() : ScanPattern_Pulse_Custom_AngleTrigger(nullptr) {}
  ~ScanPattern_Pulse_Custom_AngleTrigger() override;
  explicit constexpr ScanPattern_Pulse_Custom_AngleTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_Pulse_Custom_AngleTrigger(const ScanPattern_Pulse_Custom_AngleTrigger& from);
  ScanPattern_Pulse_Custom_AngleTrigger(ScanPattern_Pulse_Custom_AngleTrigger&& from) noexcept
    : ScanPattern_Pulse_Custom_AngleTrigger() {
    *this = ::std::move(from);
  }

  inline ScanPattern_Pulse_Custom_AngleTrigger& operator=(const ScanPattern_Pulse_Custom_AngleTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_Pulse_Custom_AngleTrigger& operator=(ScanPattern_Pulse_Custom_AngleTrigger&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_Pulse_Custom_AngleTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern_Pulse_Custom_AngleTrigger* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_Pulse_Custom_AngleTrigger*>(
               &_ScanPattern_Pulse_Custom_AngleTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ScanPattern_Pulse_Custom_AngleTrigger& a, ScanPattern_Pulse_Custom_AngleTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_Pulse_Custom_AngleTrigger* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_Pulse_Custom_AngleTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_Pulse_Custom_AngleTrigger* New() const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom_AngleTrigger>(nullptr);
  }

  ScanPattern_Pulse_Custom_AngleTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom_AngleTrigger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_Pulse_Custom_AngleTrigger& from);
  void MergeFrom(const ScanPattern_Pulse_Custom_AngleTrigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_Pulse_Custom_AngleTrigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger";
  }
  protected:
  explicit ScanPattern_Pulse_Custom_AngleTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScanPattern_Pulse_Custom_AngleTrigger_Angle Angle;

  // accessors -------------------------------------------------------

  enum : int {
    kAnglesFieldNumber = 1,
  };
  // repeated .blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle angles = 1;
  int angles_size() const;
  private:
  int _internal_angles_size() const;
  public:
  void clear_angles();
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle* mutable_angles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle >*
      mutable_angles();
  private:
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle& _internal_angles(int index) const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle* _internal_add_angles();
  public:
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle& angles(int index) const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle* add_angles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle >&
      angles() const;

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle > angles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern_Pulse_Custom_PointTrigger_Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point) */ {
 public:
  inline ScanPattern_Pulse_Custom_PointTrigger_Point() : ScanPattern_Pulse_Custom_PointTrigger_Point(nullptr) {}
  ~ScanPattern_Pulse_Custom_PointTrigger_Point() override;
  explicit constexpr ScanPattern_Pulse_Custom_PointTrigger_Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_Pulse_Custom_PointTrigger_Point(const ScanPattern_Pulse_Custom_PointTrigger_Point& from);
  ScanPattern_Pulse_Custom_PointTrigger_Point(ScanPattern_Pulse_Custom_PointTrigger_Point&& from) noexcept
    : ScanPattern_Pulse_Custom_PointTrigger_Point() {
    *this = ::std::move(from);
  }

  inline ScanPattern_Pulse_Custom_PointTrigger_Point& operator=(const ScanPattern_Pulse_Custom_PointTrigger_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_Pulse_Custom_PointTrigger_Point& operator=(ScanPattern_Pulse_Custom_PointTrigger_Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_Pulse_Custom_PointTrigger_Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern_Pulse_Custom_PointTrigger_Point* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_Pulse_Custom_PointTrigger_Point*>(
               &_ScanPattern_Pulse_Custom_PointTrigger_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ScanPattern_Pulse_Custom_PointTrigger_Point& a, ScanPattern_Pulse_Custom_PointTrigger_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_Pulse_Custom_PointTrigger_Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_Pulse_Custom_PointTrigger_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_Pulse_Custom_PointTrigger_Point* New() const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom_PointTrigger_Point>(nullptr);
  }

  ScanPattern_Pulse_Custom_PointTrigger_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom_PointTrigger_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_Pulse_Custom_PointTrigger_Point& from);
  void MergeFrom(const ScanPattern_Pulse_Custom_PointTrigger_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_Pulse_Custom_PointTrigger_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point";
  }
  protected:
  explicit ScanPattern_Pulse_Custom_PointTrigger_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledTriggersFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .blickfeld.protocol.config.ScanPattern.Pulse.Custom.Trigger enabled_triggers = 2;
  int enabled_triggers_size() const;
  private:
  int _internal_enabled_triggers_size() const;
  public:
  void clear_enabled_triggers();
  private:
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger _internal_enabled_triggers(int index) const;
  void _internal_add_enabled_triggers(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enabled_triggers();
  public:
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger enabled_triggers(int index) const;
  void set_enabled_triggers(int index, ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value);
  void add_enabled_triggers(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enabled_triggers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enabled_triggers();

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enabled_triggers_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern_Pulse_Custom_PointTrigger PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger) */ {
 public:
  inline ScanPattern_Pulse_Custom_PointTrigger() : ScanPattern_Pulse_Custom_PointTrigger(nullptr) {}
  ~ScanPattern_Pulse_Custom_PointTrigger() override;
  explicit constexpr ScanPattern_Pulse_Custom_PointTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_Pulse_Custom_PointTrigger(const ScanPattern_Pulse_Custom_PointTrigger& from);
  ScanPattern_Pulse_Custom_PointTrigger(ScanPattern_Pulse_Custom_PointTrigger&& from) noexcept
    : ScanPattern_Pulse_Custom_PointTrigger() {
    *this = ::std::move(from);
  }

  inline ScanPattern_Pulse_Custom_PointTrigger& operator=(const ScanPattern_Pulse_Custom_PointTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_Pulse_Custom_PointTrigger& operator=(ScanPattern_Pulse_Custom_PointTrigger&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_Pulse_Custom_PointTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern_Pulse_Custom_PointTrigger* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_Pulse_Custom_PointTrigger*>(
               &_ScanPattern_Pulse_Custom_PointTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ScanPattern_Pulse_Custom_PointTrigger& a, ScanPattern_Pulse_Custom_PointTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_Pulse_Custom_PointTrigger* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_Pulse_Custom_PointTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_Pulse_Custom_PointTrigger* New() const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom_PointTrigger>(nullptr);
  }

  ScanPattern_Pulse_Custom_PointTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom_PointTrigger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_Pulse_Custom_PointTrigger& from);
  void MergeFrom(const ScanPattern_Pulse_Custom_PointTrigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_Pulse_Custom_PointTrigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger";
  }
  protected:
  explicit ScanPattern_Pulse_Custom_PointTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScanPattern_Pulse_Custom_PointTrigger_Point Point;

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point >*
      mutable_points();
  private:
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point& _internal_points(int index) const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point* _internal_add_points();
  public:
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point& points(int index) const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point >&
      points() const;

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern_Pulse_Custom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.Pulse.Custom) */ {
 public:
  inline ScanPattern_Pulse_Custom() : ScanPattern_Pulse_Custom(nullptr) {}
  ~ScanPattern_Pulse_Custom() override;
  explicit constexpr ScanPattern_Pulse_Custom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_Pulse_Custom(const ScanPattern_Pulse_Custom& from);
  ScanPattern_Pulse_Custom(ScanPattern_Pulse_Custom&& from) noexcept
    : ScanPattern_Pulse_Custom() {
    *this = ::std::move(from);
  }

  inline ScanPattern_Pulse_Custom& operator=(const ScanPattern_Pulse_Custom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_Pulse_Custom& operator=(ScanPattern_Pulse_Custom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_Pulse_Custom& default_instance() {
    return *internal_default_instance();
  }
  enum CustomTypeCase {
    kAngleTrigger = 1,
    kPointTrigger = 2,
    CUSTOM_TYPE_NOT_SET = 0,
  };

  static inline const ScanPattern_Pulse_Custom* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_Pulse_Custom*>(
               &_ScanPattern_Pulse_Custom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ScanPattern_Pulse_Custom& a, ScanPattern_Pulse_Custom& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_Pulse_Custom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_Pulse_Custom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_Pulse_Custom* New() const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom>(nullptr);
  }

  ScanPattern_Pulse_Custom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_Pulse_Custom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_Pulse_Custom& from);
  void MergeFrom(const ScanPattern_Pulse_Custom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_Pulse_Custom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.Pulse.Custom";
  }
  protected:
  explicit ScanPattern_Pulse_Custom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScanPattern_Pulse_Custom_Duration Duration;
  typedef ScanPattern_Pulse_Custom_AngleTrigger AngleTrigger;
  typedef ScanPattern_Pulse_Custom_PointTrigger PointTrigger;

  typedef ScanPattern_Pulse_Custom_Trigger Trigger;
  static constexpr Trigger TRG_EXTERNAL_0 =
    ScanPattern_Pulse_Custom_Trigger_TRG_EXTERNAL_0;
  static constexpr Trigger TRG_EXTERNAL_1 =
    ScanPattern_Pulse_Custom_Trigger_TRG_EXTERNAL_1;
  static constexpr Trigger TRG_DETECTOR =
    ScanPattern_Pulse_Custom_Trigger_TRG_DETECTOR;
  static constexpr Trigger TRG_LASER =
    ScanPattern_Pulse_Custom_Trigger_TRG_LASER;
  static inline bool Trigger_IsValid(int value) {
    return ScanPattern_Pulse_Custom_Trigger_IsValid(value);
  }
  static constexpr Trigger Trigger_MIN =
    ScanPattern_Pulse_Custom_Trigger_Trigger_MIN;
  static constexpr Trigger Trigger_MAX =
    ScanPattern_Pulse_Custom_Trigger_Trigger_MAX;
  static constexpr int Trigger_ARRAYSIZE =
    ScanPattern_Pulse_Custom_Trigger_Trigger_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Trigger_descriptor() {
    return ScanPattern_Pulse_Custom_Trigger_descriptor();
  }
  template<typename T>
  static inline const std::string& Trigger_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Trigger>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Trigger_Name.");
    return ScanPattern_Pulse_Custom_Trigger_Name(enum_t_value);
  }
  static inline bool Trigger_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Trigger* value) {
    return ScanPattern_Pulse_Custom_Trigger_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 3,
    kAngleTriggerFieldNumber = 1,
    kPointTriggerFieldNumber = 2,
  };
  // optional .blickfeld.protocol.config.ScanPattern.Pulse.Custom.Duration duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration& duration() const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* release_duration();
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* mutable_duration();
  void set_allocated_duration(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* duration);
  private:
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration& _internal_duration() const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* duration);
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* unsafe_arena_release_duration();

  // .blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger angle_trigger = 1;
  bool has_angle_trigger() const;
  private:
  bool _internal_has_angle_trigger() const;
  public:
  void clear_angle_trigger();
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger& angle_trigger() const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* release_angle_trigger();
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* mutable_angle_trigger();
  void set_allocated_angle_trigger(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* angle_trigger);
  private:
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger& _internal_angle_trigger() const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* _internal_mutable_angle_trigger();
  public:
  void unsafe_arena_set_allocated_angle_trigger(
      ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* angle_trigger);
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* unsafe_arena_release_angle_trigger();

  // .blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger point_trigger = 2;
  bool has_point_trigger() const;
  private:
  bool _internal_has_point_trigger() const;
  public:
  void clear_point_trigger();
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger& point_trigger() const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* release_point_trigger();
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* mutable_point_trigger();
  void set_allocated_point_trigger(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* point_trigger);
  private:
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger& _internal_point_trigger() const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* _internal_mutable_point_trigger();
  public:
  void unsafe_arena_set_allocated_point_trigger(
      ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* point_trigger);
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* unsafe_arena_release_point_trigger();

  void clear_custom_type();
  CustomTypeCase custom_type_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.Pulse.Custom)
 private:
  class _Internal;
  void set_has_angle_trigger();
  void set_has_point_trigger();

  inline bool has_custom_type() const;
  inline void clear_has_custom_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* duration_;
  union CustomTypeUnion {
    constexpr CustomTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* angle_trigger_;
    ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* point_trigger_;
  } custom_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern_Pulse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.Pulse) */ {
 public:
  inline ScanPattern_Pulse() : ScanPattern_Pulse(nullptr) {}
  ~ScanPattern_Pulse() override;
  explicit constexpr ScanPattern_Pulse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_Pulse(const ScanPattern_Pulse& from);
  ScanPattern_Pulse(ScanPattern_Pulse&& from) noexcept
    : ScanPattern_Pulse() {
    *this = ::std::move(from);
  }

  inline ScanPattern_Pulse& operator=(const ScanPattern_Pulse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_Pulse& operator=(ScanPattern_Pulse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_Pulse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern_Pulse* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_Pulse*>(
               &_ScanPattern_Pulse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ScanPattern_Pulse& a, ScanPattern_Pulse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_Pulse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_Pulse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_Pulse* New() const final {
    return CreateMaybeMessage<ScanPattern_Pulse>(nullptr);
  }

  ScanPattern_Pulse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_Pulse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_Pulse& from);
  void MergeFrom(const ScanPattern_Pulse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_Pulse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.Pulse";
  }
  protected:
  explicit ScanPattern_Pulse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScanPattern_Pulse_Custom Custom;

  typedef ScanPattern_Pulse_Type Type;
  static constexpr Type EQUI_HORIZONTAL_ANGLE =
    ScanPattern_Pulse_Type_EQUI_HORIZONTAL_ANGLE;
  static constexpr Type EQUI_DENSITY =
    ScanPattern_Pulse_Type_EQUI_DENSITY;
  static constexpr Type CUSTOM =
    ScanPattern_Pulse_Type_CUSTOM;
  static constexpr Type INTERLEAVE =
    ScanPattern_Pulse_Type_INTERLEAVE;
  static inline bool Type_IsValid(int value) {
    return ScanPattern_Pulse_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ScanPattern_Pulse_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ScanPattern_Pulse_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ScanPattern_Pulse_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ScanPattern_Pulse_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ScanPattern_Pulse_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ScanPattern_Pulse_Type_Parse(name, value);
  }

  typedef ScanPattern_Pulse_FrameMode FrameMode;
  static constexpr FrameMode NONE =
    ScanPattern_Pulse_FrameMode_NONE;
  static constexpr FrameMode COMBINE_UP_DOWN =
    ScanPattern_Pulse_FrameMode_COMBINE_UP_DOWN;
  static constexpr FrameMode ONLY_UP =
    ScanPattern_Pulse_FrameMode_ONLY_UP;
  static constexpr FrameMode ONLY_DOWN =
    ScanPattern_Pulse_FrameMode_ONLY_DOWN;
  static constexpr FrameMode SEPARATE =
    ScanPattern_Pulse_FrameMode_SEPARATE;
  static inline bool FrameMode_IsValid(int value) {
    return ScanPattern_Pulse_FrameMode_IsValid(value);
  }
  static constexpr FrameMode FrameMode_MIN =
    ScanPattern_Pulse_FrameMode_FrameMode_MIN;
  static constexpr FrameMode FrameMode_MAX =
    ScanPattern_Pulse_FrameMode_FrameMode_MAX;
  static constexpr int FrameMode_ARRAYSIZE =
    ScanPattern_Pulse_FrameMode_FrameMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrameMode_descriptor() {
    return ScanPattern_Pulse_FrameMode_descriptor();
  }
  template<typename T>
  static inline const std::string& FrameMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrameMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrameMode_Name.");
    return ScanPattern_Pulse_FrameMode_Name(enum_t_value);
  }
  static inline bool FrameMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrameMode* value) {
    return ScanPattern_Pulse_FrameMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFieldNumber = 8,
    kAngleSpacingFieldNumber = 2,
    kDistortionCorrectionFieldNumber = 5,
    kTypeFieldNumber = 3,
    kFrameModeFieldNumber = 4,
  };
  // optional .blickfeld.protocol.config.ScanPattern.Pulse.Custom custom = 8 [(.blickfeld.protocol.optional) = true];
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom& custom() const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* release_custom();
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* mutable_custom();
  void set_allocated_custom(::blickfeld::protocol::config::ScanPattern_Pulse_Custom* custom);
  private:
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom& _internal_custom() const;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* custom);
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* unsafe_arena_release_custom();

  // optional float angle_spacing = 2 [(.blickfeld.protocol.unit) = "rad", (.blickfeld.protocol.ui_unit) = "deg", (.blickfeld.protocol.ui_scale) = 57.295779513, (.blickfeld.protocol.ui_decimal_places) = 2];
  bool has_angle_spacing() const;
  private:
  bool _internal_has_angle_spacing() const;
  public:
  void clear_angle_spacing();
  float angle_spacing() const;
  void set_angle_spacing(float value);
  private:
  float _internal_angle_spacing() const;
  void _internal_set_angle_spacing(float value);
  public:

  // optional bool distortion_correction = 5 [default = true];
  bool has_distortion_correction() const;
  private:
  bool _internal_has_distortion_correction() const;
  public:
  void clear_distortion_correction();
  bool distortion_correction() const;
  void set_distortion_correction(bool value);
  private:
  bool _internal_distortion_correction() const;
  void _internal_set_distortion_correction(bool value);
  public:

  // optional .blickfeld.protocol.config.ScanPattern.Pulse.Type type = 3 [default = INTERLEAVE];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::blickfeld::protocol::config::ScanPattern_Pulse_Type type() const;
  void set_type(::blickfeld::protocol::config::ScanPattern_Pulse_Type value);
  private:
  ::blickfeld::protocol::config::ScanPattern_Pulse_Type _internal_type() const;
  void _internal_set_type(::blickfeld::protocol::config::ScanPattern_Pulse_Type value);
  public:

  // optional .blickfeld.protocol.config.ScanPattern.Pulse.FrameMode frame_mode = 4 [default = COMBINE_UP_DOWN];
  bool has_frame_mode() const;
  private:
  bool _internal_has_frame_mode() const;
  public:
  void clear_frame_mode();
  ::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode frame_mode() const;
  void set_frame_mode(::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode value);
  private:
  ::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode _internal_frame_mode() const;
  void _internal_set_frame_mode(::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ScanPattern_Pulse)
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.Pulse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* custom_;
  float angle_spacing_;
  bool distortion_correction_;
  int type_;
  int frame_mode_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern_FrameRate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.FrameRate) */ {
 public:
  inline ScanPattern_FrameRate() : ScanPattern_FrameRate(nullptr) {}
  ~ScanPattern_FrameRate() override;
  explicit constexpr ScanPattern_FrameRate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_FrameRate(const ScanPattern_FrameRate& from);
  ScanPattern_FrameRate(ScanPattern_FrameRate&& from) noexcept
    : ScanPattern_FrameRate() {
    *this = ::std::move(from);
  }

  inline ScanPattern_FrameRate& operator=(const ScanPattern_FrameRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_FrameRate& operator=(ScanPattern_FrameRate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_FrameRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern_FrameRate* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_FrameRate*>(
               &_ScanPattern_FrameRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ScanPattern_FrameRate& a, ScanPattern_FrameRate& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_FrameRate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_FrameRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_FrameRate* New() const final {
    return CreateMaybeMessage<ScanPattern_FrameRate>(nullptr);
  }

  ScanPattern_FrameRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_FrameRate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_FrameRate& from);
  void MergeFrom(const ScanPattern_FrameRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_FrameRate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.FrameRate";
  }
  protected:
  explicit ScanPattern_FrameRate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kMaximumFieldNumber = 2,
    kReferenceTimeOffsetFieldNumber = 3,
  };
  // optional double target = 1 [(.blickfeld.protocol.optional) = true, (.blickfeld.protocol.unit) = "Hz", (.blickfeld.protocol.ui_decimal_places) = 2];
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  double target() const;
  void set_target(double value);
  private:
  double _internal_target() const;
  void _internal_set_target(double value);
  public:

  // optional double maximum = 2 [(.blickfeld.protocol.optional) = true, (.blickfeld.protocol.unit) = "Hz", (.blickfeld.protocol.ui_decimal_places) = 2];
  bool has_maximum() const;
  private:
  bool _internal_has_maximum() const;
  public:
  void clear_maximum();
  double maximum() const;
  void set_maximum(double value);
  private:
  double _internal_maximum() const;
  void _internal_set_maximum(double value);
  public:

  // optional double reference_time_offset = 3 [default = 0, (.blickfeld.protocol.unit) = "s", (.blickfeld.protocol.ui_unit) = "ms", (.blickfeld.protocol.ui_scale) = 0.001, (.blickfeld.protocol.ui_decimal_places) = 1];
  bool has_reference_time_offset() const;
  private:
  bool _internal_has_reference_time_offset() const;
  public:
  void clear_reference_time_offset();
  double reference_time_offset() const;
  void set_reference_time_offset(double value);
  private:
  double _internal_reference_time_offset() const;
  void _internal_set_reference_time_offset(double value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.FrameRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double target_;
  double maximum_;
  double reference_time_offset_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern_Filter_Noise PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.Filter.Noise) */ {
 public:
  inline ScanPattern_Filter_Noise() : ScanPattern_Filter_Noise(nullptr) {}
  ~ScanPattern_Filter_Noise() override;
  explicit constexpr ScanPattern_Filter_Noise(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_Filter_Noise(const ScanPattern_Filter_Noise& from);
  ScanPattern_Filter_Noise(ScanPattern_Filter_Noise&& from) noexcept
    : ScanPattern_Filter_Noise() {
    *this = ::std::move(from);
  }

  inline ScanPattern_Filter_Noise& operator=(const ScanPattern_Filter_Noise& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_Filter_Noise& operator=(ScanPattern_Filter_Noise&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_Filter_Noise& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern_Filter_Noise* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_Filter_Noise*>(
               &_ScanPattern_Filter_Noise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ScanPattern_Filter_Noise& a, ScanPattern_Filter_Noise& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_Filter_Noise* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_Filter_Noise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_Filter_Noise* New() const final {
    return CreateMaybeMessage<ScanPattern_Filter_Noise>(nullptr);
  }

  ScanPattern_Filter_Noise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_Filter_Noise>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_Filter_Noise& from);
  void MergeFrom(const ScanPattern_Filter_Noise& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_Filter_Noise* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.Filter.Noise";
  }
  protected:
  explicit ScanPattern_Filter_Noise(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kGainFieldNumber = 2,
    kEnableFieldNumber = 3,
  };
  // optional uint32 offset = 1 [(.blickfeld.protocol.d_min) = 0, (.blickfeld.protocol.d_max) = 50];
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float gain = 2 [(.blickfeld.protocol.d_min) = 0, (.blickfeld.protocol.d_max) = 0.5];
  bool has_gain() const;
  private:
  bool _internal_has_gain() const;
  public:
  void clear_gain();
  float gain() const;
  void set_gain(float value);
  private:
  float _internal_gain() const;
  void _internal_set_gain(float value);
  public:

  // optional bool enable = 3 [default = true];
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.Filter.Noise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  float gain_;
  bool enable_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern_Filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern.Filter) */ {
 public:
  inline ScanPattern_Filter() : ScanPattern_Filter(nullptr) {}
  ~ScanPattern_Filter() override;
  explicit constexpr ScanPattern_Filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern_Filter(const ScanPattern_Filter& from);
  ScanPattern_Filter(ScanPattern_Filter&& from) noexcept
    : ScanPattern_Filter() {
    *this = ::std::move(from);
  }

  inline ScanPattern_Filter& operator=(const ScanPattern_Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern_Filter& operator=(ScanPattern_Filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern_Filter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern_Filter* internal_default_instance() {
    return reinterpret_cast<const ScanPattern_Filter*>(
               &_ScanPattern_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ScanPattern_Filter& a, ScanPattern_Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern_Filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern_Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern_Filter* New() const final {
    return CreateMaybeMessage<ScanPattern_Filter>(nullptr);
  }

  ScanPattern_Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern_Filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern_Filter& from);
  void MergeFrom(const ScanPattern_Filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern_Filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern.Filter";
  }
  protected:
  explicit ScanPattern_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScanPattern_Filter_Noise Noise;

  // accessors -------------------------------------------------------

  enum : int {
    kIntensityFieldNumber = 2,
    kAmbientLightLevelFieldNumber = 3,
    kRangeFieldNumber = 4,
    kNoiseFieldNumber = 5,
    kDeletePointsWithoutReturnsFieldNumber = 6,
    kMaxNumberOfReturnsPerPointFieldNumber = 1,
  };
  // optional .blickfeld.protocol.OptionalValueRange intensity = 2;
  bool has_intensity() const;
  private:
  bool _internal_has_intensity() const;
  public:
  void clear_intensity();
  const ::blickfeld::protocol::OptionalValueRange& intensity() const;
  ::blickfeld::protocol::OptionalValueRange* release_intensity();
  ::blickfeld::protocol::OptionalValueRange* mutable_intensity();
  void set_allocated_intensity(::blickfeld::protocol::OptionalValueRange* intensity);
  private:
  const ::blickfeld::protocol::OptionalValueRange& _internal_intensity() const;
  ::blickfeld::protocol::OptionalValueRange* _internal_mutable_intensity();
  public:
  void unsafe_arena_set_allocated_intensity(
      ::blickfeld::protocol::OptionalValueRange* intensity);
  ::blickfeld::protocol::OptionalValueRange* unsafe_arena_release_intensity();

  // optional .blickfeld.protocol.OptionalValueRange ambient_light_level = 3;
  bool has_ambient_light_level() const;
  private:
  bool _internal_has_ambient_light_level() const;
  public:
  void clear_ambient_light_level();
  const ::blickfeld::protocol::OptionalValueRange& ambient_light_level() const;
  ::blickfeld::protocol::OptionalValueRange* release_ambient_light_level();
  ::blickfeld::protocol::OptionalValueRange* mutable_ambient_light_level();
  void set_allocated_ambient_light_level(::blickfeld::protocol::OptionalValueRange* ambient_light_level);
  private:
  const ::blickfeld::protocol::OptionalValueRange& _internal_ambient_light_level() const;
  ::blickfeld::protocol::OptionalValueRange* _internal_mutable_ambient_light_level();
  public:
  void unsafe_arena_set_allocated_ambient_light_level(
      ::blickfeld::protocol::OptionalValueRange* ambient_light_level);
  ::blickfeld::protocol::OptionalValueRange* unsafe_arena_release_ambient_light_level();

  // optional .blickfeld.protocol.OptionalValueRange range = 4;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::blickfeld::protocol::OptionalValueRange& range() const;
  ::blickfeld::protocol::OptionalValueRange* release_range();
  ::blickfeld::protocol::OptionalValueRange* mutable_range();
  void set_allocated_range(::blickfeld::protocol::OptionalValueRange* range);
  private:
  const ::blickfeld::protocol::OptionalValueRange& _internal_range() const;
  ::blickfeld::protocol::OptionalValueRange* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::blickfeld::protocol::OptionalValueRange* range);
  ::blickfeld::protocol::OptionalValueRange* unsafe_arena_release_range();

  // optional .blickfeld.protocol.config.ScanPattern.Filter.Noise noise = 5 [(.blickfeld.protocol.optional) = true];
  bool has_noise() const;
  private:
  bool _internal_has_noise() const;
  public:
  void clear_noise();
  const ::blickfeld::protocol::config::ScanPattern_Filter_Noise& noise() const;
  ::blickfeld::protocol::config::ScanPattern_Filter_Noise* release_noise();
  ::blickfeld::protocol::config::ScanPattern_Filter_Noise* mutable_noise();
  void set_allocated_noise(::blickfeld::protocol::config::ScanPattern_Filter_Noise* noise);
  private:
  const ::blickfeld::protocol::config::ScanPattern_Filter_Noise& _internal_noise() const;
  ::blickfeld::protocol::config::ScanPattern_Filter_Noise* _internal_mutable_noise();
  public:
  void unsafe_arena_set_allocated_noise(
      ::blickfeld::protocol::config::ScanPattern_Filter_Noise* noise);
  ::blickfeld::protocol::config::ScanPattern_Filter_Noise* unsafe_arena_release_noise();

  // optional bool delete_points_without_returns = 6 [default = false];
  bool has_delete_points_without_returns() const;
  private:
  bool _internal_has_delete_points_without_returns() const;
  public:
  void clear_delete_points_without_returns();
  bool delete_points_without_returns() const;
  void set_delete_points_without_returns(bool value);
  private:
  bool _internal_delete_points_without_returns() const;
  void _internal_set_delete_points_without_returns(bool value);
  public:

  // optional uint32 max_number_of_returns_per_point = 1 [default = 1, (.blickfeld.protocol.d_min) = 1, (.blickfeld.protocol.d_max) = 3];
  bool has_max_number_of_returns_per_point() const;
  private:
  bool _internal_has_max_number_of_returns_per_point() const;
  public:
  void clear_max_number_of_returns_per_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_of_returns_per_point() const;
  void set_max_number_of_returns_per_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_number_of_returns_per_point() const;
  void _internal_set_max_number_of_returns_per_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::OptionalValueRange* intensity_;
  ::blickfeld::protocol::OptionalValueRange* ambient_light_level_;
  ::blickfeld::protocol::OptionalValueRange* range_;
  ::blickfeld::protocol::config::ScanPattern_Filter_Noise* noise_;
  bool delete_points_without_returns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_number_of_returns_per_point_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT ScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.ScanPattern) */ {
 public:
  inline ScanPattern() : ScanPattern(nullptr) {}
  ~ScanPattern() override;
  explicit constexpr ScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScanPattern(const ScanPattern& from);
  ScanPattern(ScanPattern&& from) noexcept
    : ScanPattern() {
    *this = ::std::move(from);
  }

  inline ScanPattern& operator=(const ScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanPattern& operator=(ScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScanPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScanPattern* internal_default_instance() {
    return reinterpret_cast<const ScanPattern*>(
               &_ScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ScanPattern& a, ScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanPattern* New() const final {
    return CreateMaybeMessage<ScanPattern>(nullptr);
  }

  ScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanPattern& from);
  void MergeFrom(const ScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.ScanPattern";
  }
  protected:
  explicit ScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScanPattern_Horizontal Horizontal;
  typedef ScanPattern_Vertical Vertical;
  typedef ScanPattern_Pulse Pulse;
  typedef ScanPattern_FrameRate FrameRate;
  typedef ScanPattern_Filter Filter;

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 8,
    kHorizontalFieldNumber = 1,
    kVerticalFieldNumber = 2,
    kPulseFieldNumber = 3,
    kFrameRateFieldNumber = 4,
    kFilterFieldNumber = 7,
  };
  // repeated .blickfeld.protocol.Constraint constraints = 8;
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::blickfeld::protocol::Constraint* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >*
      mutable_constraints();
  private:
  const ::blickfeld::protocol::Constraint& _internal_constraints(int index) const;
  ::blickfeld::protocol::Constraint* _internal_add_constraints();
  public:
  const ::blickfeld::protocol::Constraint& constraints(int index) const;
  ::blickfeld::protocol::Constraint* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >&
      constraints() const;

  // optional .blickfeld.protocol.config.ScanPattern.Horizontal horizontal = 1;
  bool has_horizontal() const;
  private:
  bool _internal_has_horizontal() const;
  public:
  void clear_horizontal();
  const ::blickfeld::protocol::config::ScanPattern_Horizontal& horizontal() const;
  ::blickfeld::protocol::config::ScanPattern_Horizontal* release_horizontal();
  ::blickfeld::protocol::config::ScanPattern_Horizontal* mutable_horizontal();
  void set_allocated_horizontal(::blickfeld::protocol::config::ScanPattern_Horizontal* horizontal);
  private:
  const ::blickfeld::protocol::config::ScanPattern_Horizontal& _internal_horizontal() const;
  ::blickfeld::protocol::config::ScanPattern_Horizontal* _internal_mutable_horizontal();
  public:
  void unsafe_arena_set_allocated_horizontal(
      ::blickfeld::protocol::config::ScanPattern_Horizontal* horizontal);
  ::blickfeld::protocol::config::ScanPattern_Horizontal* unsafe_arena_release_horizontal();

  // optional .blickfeld.protocol.config.ScanPattern.Vertical vertical = 2;
  bool has_vertical() const;
  private:
  bool _internal_has_vertical() const;
  public:
  void clear_vertical();
  const ::blickfeld::protocol::config::ScanPattern_Vertical& vertical() const;
  ::blickfeld::protocol::config::ScanPattern_Vertical* release_vertical();
  ::blickfeld::protocol::config::ScanPattern_Vertical* mutable_vertical();
  void set_allocated_vertical(::blickfeld::protocol::config::ScanPattern_Vertical* vertical);
  private:
  const ::blickfeld::protocol::config::ScanPattern_Vertical& _internal_vertical() const;
  ::blickfeld::protocol::config::ScanPattern_Vertical* _internal_mutable_vertical();
  public:
  void unsafe_arena_set_allocated_vertical(
      ::blickfeld::protocol::config::ScanPattern_Vertical* vertical);
  ::blickfeld::protocol::config::ScanPattern_Vertical* unsafe_arena_release_vertical();

  // optional .blickfeld.protocol.config.ScanPattern.Pulse pulse = 3;
  bool has_pulse() const;
  private:
  bool _internal_has_pulse() const;
  public:
  void clear_pulse();
  const ::blickfeld::protocol::config::ScanPattern_Pulse& pulse() const;
  ::blickfeld::protocol::config::ScanPattern_Pulse* release_pulse();
  ::blickfeld::protocol::config::ScanPattern_Pulse* mutable_pulse();
  void set_allocated_pulse(::blickfeld::protocol::config::ScanPattern_Pulse* pulse);
  private:
  const ::blickfeld::protocol::config::ScanPattern_Pulse& _internal_pulse() const;
  ::blickfeld::protocol::config::ScanPattern_Pulse* _internal_mutable_pulse();
  public:
  void unsafe_arena_set_allocated_pulse(
      ::blickfeld::protocol::config::ScanPattern_Pulse* pulse);
  ::blickfeld::protocol::config::ScanPattern_Pulse* unsafe_arena_release_pulse();

  // optional .blickfeld.protocol.config.ScanPattern.FrameRate frame_rate = 4;
  bool has_frame_rate() const;
  private:
  bool _internal_has_frame_rate() const;
  public:
  void clear_frame_rate();
  const ::blickfeld::protocol::config::ScanPattern_FrameRate& frame_rate() const;
  ::blickfeld::protocol::config::ScanPattern_FrameRate* release_frame_rate();
  ::blickfeld::protocol::config::ScanPattern_FrameRate* mutable_frame_rate();
  void set_allocated_frame_rate(::blickfeld::protocol::config::ScanPattern_FrameRate* frame_rate);
  private:
  const ::blickfeld::protocol::config::ScanPattern_FrameRate& _internal_frame_rate() const;
  ::blickfeld::protocol::config::ScanPattern_FrameRate* _internal_mutable_frame_rate();
  public:
  void unsafe_arena_set_allocated_frame_rate(
      ::blickfeld::protocol::config::ScanPattern_FrameRate* frame_rate);
  ::blickfeld::protocol::config::ScanPattern_FrameRate* unsafe_arena_release_frame_rate();

  // optional .blickfeld.protocol.config.ScanPattern.Filter filter = 7;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::blickfeld::protocol::config::ScanPattern_Filter& filter() const;
  ::blickfeld::protocol::config::ScanPattern_Filter* release_filter();
  ::blickfeld::protocol::config::ScanPattern_Filter* mutable_filter();
  void set_allocated_filter(::blickfeld::protocol::config::ScanPattern_Filter* filter);
  private:
  const ::blickfeld::protocol::config::ScanPattern_Filter& _internal_filter() const;
  ::blickfeld::protocol::config::ScanPattern_Filter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::blickfeld::protocol::config::ScanPattern_Filter* filter);
  ::blickfeld::protocol::config::ScanPattern_Filter* unsafe_arena_release_filter();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ScanPattern)
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.ScanPattern)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint > constraints_;
  ::blickfeld::protocol::config::ScanPattern_Horizontal* horizontal_;
  ::blickfeld::protocol::config::ScanPattern_Vertical* vertical_;
  ::blickfeld::protocol::config::ScanPattern_Pulse* pulse_;
  ::blickfeld::protocol::config::ScanPattern_FrameRate* frame_rate_;
  ::blickfeld::protocol::config::ScanPattern_Filter* filter_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fscan_5fpattern_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScanPattern_Horizontal

// optional float fov = 1 [(.blickfeld.protocol.unit) = "rad", (.blickfeld.protocol.ui_unit) = "deg", (.blickfeld.protocol.ui_scale) = 57.295779513, (.blickfeld.protocol.ui_decimal_places) = 2];
inline bool ScanPattern_Horizontal::_internal_has_fov() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScanPattern_Horizontal::has_fov() const {
  return _internal_has_fov();
}
inline void ScanPattern_Horizontal::clear_fov() {
  fov_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ScanPattern_Horizontal::_internal_fov() const {
  return fov_;
}
inline float ScanPattern_Horizontal::fov() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Horizontal.fov)
  return _internal_fov();
}
inline void ScanPattern_Horizontal::_internal_set_fov(float value) {
  _has_bits_[0] |= 0x00000001u;
  fov_ = value;
}
inline void ScanPattern_Horizontal::set_fov(float value) {
  _internal_set_fov(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Horizontal.fov)
}

// -------------------------------------------------------------------

// ScanPattern_Vertical

// optional float fov = 1 [(.blickfeld.protocol.unit) = "rad", (.blickfeld.protocol.ui_unit) = "deg", (.blickfeld.protocol.ui_scale) = 57.295779513, (.blickfeld.protocol.ui_decimal_places) = 2];
inline bool ScanPattern_Vertical::_internal_has_fov() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScanPattern_Vertical::has_fov() const {
  return _internal_has_fov();
}
inline void ScanPattern_Vertical::clear_fov() {
  fov_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ScanPattern_Vertical::_internal_fov() const {
  return fov_;
}
inline float ScanPattern_Vertical::fov() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Vertical.fov)
  return _internal_fov();
}
inline void ScanPattern_Vertical::_internal_set_fov(float value) {
  _has_bits_[0] |= 0x00000001u;
  fov_ = value;
}
inline void ScanPattern_Vertical::set_fov(float value) {
  _internal_set_fov(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Vertical.fov)
}

// optional uint32 scanlines_up = 2 [default = 40, (.blickfeld.protocol.d_min) = 1];
inline bool ScanPattern_Vertical::_internal_has_scanlines_up() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScanPattern_Vertical::has_scanlines_up() const {
  return _internal_has_scanlines_up();
}
inline void ScanPattern_Vertical::clear_scanlines_up() {
  scanlines_up_ = 40u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScanPattern_Vertical::_internal_scanlines_up() const {
  return scanlines_up_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScanPattern_Vertical::scanlines_up() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Vertical.scanlines_up)
  return _internal_scanlines_up();
}
inline void ScanPattern_Vertical::_internal_set_scanlines_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  scanlines_up_ = value;
}
inline void ScanPattern_Vertical::set_scanlines_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scanlines_up(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Vertical.scanlines_up)
}

// optional uint32 scanlines_down = 3 [default = 40, (.blickfeld.protocol.d_min) = 1];
inline bool ScanPattern_Vertical::_internal_has_scanlines_down() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScanPattern_Vertical::has_scanlines_down() const {
  return _internal_has_scanlines_down();
}
inline void ScanPattern_Vertical::clear_scanlines_down() {
  scanlines_down_ = 40u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScanPattern_Vertical::_internal_scanlines_down() const {
  return scanlines_down_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScanPattern_Vertical::scanlines_down() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Vertical.scanlines_down)
  return _internal_scanlines_down();
}
inline void ScanPattern_Vertical::_internal_set_scanlines_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  scanlines_down_ = value;
}
inline void ScanPattern_Vertical::set_scanlines_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scanlines_down(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Vertical.scanlines_down)
}

// -------------------------------------------------------------------

// ScanPattern_Pulse_Custom_Duration

// optional float external_0 = 1 [default = 0.0001, (.blickfeld.protocol.d_min) = 8e-09, (.blickfeld.protocol.d_max) = 0.1];
inline bool ScanPattern_Pulse_Custom_Duration::_internal_has_external_0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScanPattern_Pulse_Custom_Duration::has_external_0() const {
  return _internal_has_external_0();
}
inline void ScanPattern_Pulse_Custom_Duration::clear_external_0() {
  external_0_ = 0.0001f;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ScanPattern_Pulse_Custom_Duration::_internal_external_0() const {
  return external_0_;
}
inline float ScanPattern_Pulse_Custom_Duration::external_0() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.Duration.external_0)
  return _internal_external_0();
}
inline void ScanPattern_Pulse_Custom_Duration::_internal_set_external_0(float value) {
  _has_bits_[0] |= 0x00000001u;
  external_0_ = value;
}
inline void ScanPattern_Pulse_Custom_Duration::set_external_0(float value) {
  _internal_set_external_0(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Pulse.Custom.Duration.external_0)
}

// optional float external_1 = 2 [default = 0.0001, (.blickfeld.protocol.d_min) = 8e-09, (.blickfeld.protocol.d_max) = 0.1];
inline bool ScanPattern_Pulse_Custom_Duration::_internal_has_external_1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScanPattern_Pulse_Custom_Duration::has_external_1() const {
  return _internal_has_external_1();
}
inline void ScanPattern_Pulse_Custom_Duration::clear_external_1() {
  external_1_ = 0.0001f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ScanPattern_Pulse_Custom_Duration::_internal_external_1() const {
  return external_1_;
}
inline float ScanPattern_Pulse_Custom_Duration::external_1() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.Duration.external_1)
  return _internal_external_1();
}
inline void ScanPattern_Pulse_Custom_Duration::_internal_set_external_1(float value) {
  _has_bits_[0] |= 0x00000002u;
  external_1_ = value;
}
inline void ScanPattern_Pulse_Custom_Duration::set_external_1(float value) {
  _internal_set_external_1(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Pulse.Custom.Duration.external_1)
}

// -------------------------------------------------------------------

// ScanPattern_Pulse_Custom_AngleTrigger_Angle

// optional float horizontal_angle = 1;
inline bool ScanPattern_Pulse_Custom_AngleTrigger_Angle::_internal_has_horizontal_angle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScanPattern_Pulse_Custom_AngleTrigger_Angle::has_horizontal_angle() const {
  return _internal_has_horizontal_angle();
}
inline void ScanPattern_Pulse_Custom_AngleTrigger_Angle::clear_horizontal_angle() {
  horizontal_angle_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ScanPattern_Pulse_Custom_AngleTrigger_Angle::_internal_horizontal_angle() const {
  return horizontal_angle_;
}
inline float ScanPattern_Pulse_Custom_AngleTrigger_Angle::horizontal_angle() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle.horizontal_angle)
  return _internal_horizontal_angle();
}
inline void ScanPattern_Pulse_Custom_AngleTrigger_Angle::_internal_set_horizontal_angle(float value) {
  _has_bits_[0] |= 0x00000002u;
  horizontal_angle_ = value;
}
inline void ScanPattern_Pulse_Custom_AngleTrigger_Angle::set_horizontal_angle(float value) {
  _internal_set_horizontal_angle(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle.horizontal_angle)
}

// optional uint64 scanline_id = 2 [(.blickfeld.protocol.optional) = true];
inline bool ScanPattern_Pulse_Custom_AngleTrigger_Angle::_internal_has_scanline_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScanPattern_Pulse_Custom_AngleTrigger_Angle::has_scanline_id() const {
  return _internal_has_scanline_id();
}
inline void ScanPattern_Pulse_Custom_AngleTrigger_Angle::clear_scanline_id() {
  scanline_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScanPattern_Pulse_Custom_AngleTrigger_Angle::_internal_scanline_id() const {
  return scanline_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScanPattern_Pulse_Custom_AngleTrigger_Angle::scanline_id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle.scanline_id)
  return _internal_scanline_id();
}
inline void ScanPattern_Pulse_Custom_AngleTrigger_Angle::_internal_set_scanline_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  scanline_id_ = value;
}
inline void ScanPattern_Pulse_Custom_AngleTrigger_Angle::set_scanline_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_scanline_id(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle.scanline_id)
}

// repeated .blickfeld.protocol.config.ScanPattern.Pulse.Custom.Trigger enabled_triggers = 3;
inline int ScanPattern_Pulse_Custom_AngleTrigger_Angle::_internal_enabled_triggers_size() const {
  return enabled_triggers_.size();
}
inline int ScanPattern_Pulse_Custom_AngleTrigger_Angle::enabled_triggers_size() const {
  return _internal_enabled_triggers_size();
}
inline void ScanPattern_Pulse_Custom_AngleTrigger_Angle::clear_enabled_triggers() {
  enabled_triggers_.Clear();
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger ScanPattern_Pulse_Custom_AngleTrigger_Angle::_internal_enabled_triggers(int index) const {
  return static_cast< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger >(enabled_triggers_.Get(index));
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger ScanPattern_Pulse_Custom_AngleTrigger_Angle::enabled_triggers(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle.enabled_triggers)
  return _internal_enabled_triggers(index);
}
inline void ScanPattern_Pulse_Custom_AngleTrigger_Angle::set_enabled_triggers(int index, ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value) {
  assert(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger_IsValid(value));
  enabled_triggers_.Set(index, value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle.enabled_triggers)
}
inline void ScanPattern_Pulse_Custom_AngleTrigger_Angle::_internal_add_enabled_triggers(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value) {
  assert(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger_IsValid(value));
  enabled_triggers_.Add(value);
}
inline void ScanPattern_Pulse_Custom_AngleTrigger_Angle::add_enabled_triggers(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value) {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle.enabled_triggers)
  _internal_add_enabled_triggers(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ScanPattern_Pulse_Custom_AngleTrigger_Angle::enabled_triggers() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle.enabled_triggers)
  return enabled_triggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ScanPattern_Pulse_Custom_AngleTrigger_Angle::_internal_mutable_enabled_triggers() {
  return &enabled_triggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ScanPattern_Pulse_Custom_AngleTrigger_Angle::mutable_enabled_triggers() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle.enabled_triggers)
  return _internal_mutable_enabled_triggers();
}

// -------------------------------------------------------------------

// ScanPattern_Pulse_Custom_AngleTrigger

// repeated .blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.Angle angles = 1;
inline int ScanPattern_Pulse_Custom_AngleTrigger::_internal_angles_size() const {
  return angles_.size();
}
inline int ScanPattern_Pulse_Custom_AngleTrigger::angles_size() const {
  return _internal_angles_size();
}
inline void ScanPattern_Pulse_Custom_AngleTrigger::clear_angles() {
  angles_.Clear();
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle* ScanPattern_Pulse_Custom_AngleTrigger::mutable_angles(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.angles)
  return angles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle >*
ScanPattern_Pulse_Custom_AngleTrigger::mutable_angles() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.angles)
  return &angles_;
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle& ScanPattern_Pulse_Custom_AngleTrigger::_internal_angles(int index) const {
  return angles_.Get(index);
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle& ScanPattern_Pulse_Custom_AngleTrigger::angles(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.angles)
  return _internal_angles(index);
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle* ScanPattern_Pulse_Custom_AngleTrigger::_internal_add_angles() {
  return angles_.Add();
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle* ScanPattern_Pulse_Custom_AngleTrigger::add_angles() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.angles)
  return _internal_add_angles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger_Angle >&
ScanPattern_Pulse_Custom_AngleTrigger::angles() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger.angles)
  return angles_;
}

// -------------------------------------------------------------------

// ScanPattern_Pulse_Custom_PointTrigger_Point

// optional uint64 id = 1;
inline bool ScanPattern_Pulse_Custom_PointTrigger_Point::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScanPattern_Pulse_Custom_PointTrigger_Point::has_id() const {
  return _internal_has_id();
}
inline void ScanPattern_Pulse_Custom_PointTrigger_Point::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScanPattern_Pulse_Custom_PointTrigger_Point::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScanPattern_Pulse_Custom_PointTrigger_Point::id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point.id)
  return _internal_id();
}
inline void ScanPattern_Pulse_Custom_PointTrigger_Point::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void ScanPattern_Pulse_Custom_PointTrigger_Point::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point.id)
}

// repeated .blickfeld.protocol.config.ScanPattern.Pulse.Custom.Trigger enabled_triggers = 2;
inline int ScanPattern_Pulse_Custom_PointTrigger_Point::_internal_enabled_triggers_size() const {
  return enabled_triggers_.size();
}
inline int ScanPattern_Pulse_Custom_PointTrigger_Point::enabled_triggers_size() const {
  return _internal_enabled_triggers_size();
}
inline void ScanPattern_Pulse_Custom_PointTrigger_Point::clear_enabled_triggers() {
  enabled_triggers_.Clear();
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger ScanPattern_Pulse_Custom_PointTrigger_Point::_internal_enabled_triggers(int index) const {
  return static_cast< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger >(enabled_triggers_.Get(index));
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger ScanPattern_Pulse_Custom_PointTrigger_Point::enabled_triggers(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point.enabled_triggers)
  return _internal_enabled_triggers(index);
}
inline void ScanPattern_Pulse_Custom_PointTrigger_Point::set_enabled_triggers(int index, ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value) {
  assert(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger_IsValid(value));
  enabled_triggers_.Set(index, value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point.enabled_triggers)
}
inline void ScanPattern_Pulse_Custom_PointTrigger_Point::_internal_add_enabled_triggers(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value) {
  assert(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger_IsValid(value));
  enabled_triggers_.Add(value);
}
inline void ScanPattern_Pulse_Custom_PointTrigger_Point::add_enabled_triggers(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger value) {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point.enabled_triggers)
  _internal_add_enabled_triggers(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ScanPattern_Pulse_Custom_PointTrigger_Point::enabled_triggers() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point.enabled_triggers)
  return enabled_triggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ScanPattern_Pulse_Custom_PointTrigger_Point::_internal_mutable_enabled_triggers() {
  return &enabled_triggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ScanPattern_Pulse_Custom_PointTrigger_Point::mutable_enabled_triggers() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point.enabled_triggers)
  return _internal_mutable_enabled_triggers();
}

// -------------------------------------------------------------------

// ScanPattern_Pulse_Custom_PointTrigger

// repeated .blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.Point points = 1;
inline int ScanPattern_Pulse_Custom_PointTrigger::_internal_points_size() const {
  return points_.size();
}
inline int ScanPattern_Pulse_Custom_PointTrigger::points_size() const {
  return _internal_points_size();
}
inline void ScanPattern_Pulse_Custom_PointTrigger::clear_points() {
  points_.Clear();
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point* ScanPattern_Pulse_Custom_PointTrigger::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point >*
ScanPattern_Pulse_Custom_PointTrigger::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.points)
  return &points_;
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point& ScanPattern_Pulse_Custom_PointTrigger::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point& ScanPattern_Pulse_Custom_PointTrigger::points(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.points)
  return _internal_points(index);
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point* ScanPattern_Pulse_Custom_PointTrigger::_internal_add_points() {
  return points_.Add();
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point* ScanPattern_Pulse_Custom_PointTrigger::add_points() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger_Point >&
ScanPattern_Pulse_Custom_PointTrigger::points() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger.points)
  return points_;
}

// -------------------------------------------------------------------

// ScanPattern_Pulse_Custom

// .blickfeld.protocol.config.ScanPattern.Pulse.Custom.AngleTrigger angle_trigger = 1;
inline bool ScanPattern_Pulse_Custom::_internal_has_angle_trigger() const {
  return custom_type_case() == kAngleTrigger;
}
inline bool ScanPattern_Pulse_Custom::has_angle_trigger() const {
  return _internal_has_angle_trigger();
}
inline void ScanPattern_Pulse_Custom::set_has_angle_trigger() {
  _oneof_case_[0] = kAngleTrigger;
}
inline void ScanPattern_Pulse_Custom::clear_angle_trigger() {
  if (_internal_has_angle_trigger()) {
    if (GetArena() == nullptr) {
      delete custom_type_.angle_trigger_;
    }
    clear_has_custom_type();
  }
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* ScanPattern_Pulse_Custom::release_angle_trigger() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.Pulse.Custom.angle_trigger)
  if (_internal_has_angle_trigger()) {
    clear_has_custom_type();
      ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* temp = custom_type_.angle_trigger_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    custom_type_.angle_trigger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger& ScanPattern_Pulse_Custom::_internal_angle_trigger() const {
  return _internal_has_angle_trigger()
      ? *custom_type_.angle_trigger_
      : reinterpret_cast< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger&>(::blickfeld::protocol::config::_ScanPattern_Pulse_Custom_AngleTrigger_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger& ScanPattern_Pulse_Custom::angle_trigger() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.angle_trigger)
  return _internal_angle_trigger();
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* ScanPattern_Pulse_Custom::unsafe_arena_release_angle_trigger() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.config.ScanPattern.Pulse.Custom.angle_trigger)
  if (_internal_has_angle_trigger()) {
    clear_has_custom_type();
    ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* temp = custom_type_.angle_trigger_;
    custom_type_.angle_trigger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScanPattern_Pulse_Custom::unsafe_arena_set_allocated_angle_trigger(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* angle_trigger) {
  clear_custom_type();
  if (angle_trigger) {
    set_has_angle_trigger();
    custom_type_.angle_trigger_ = angle_trigger;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.Pulse.Custom.angle_trigger)
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* ScanPattern_Pulse_Custom::_internal_mutable_angle_trigger() {
  if (!_internal_has_angle_trigger()) {
    clear_custom_type();
    set_has_angle_trigger();
    custom_type_.angle_trigger_ = CreateMaybeMessage< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger >(GetArena());
  }
  return custom_type_.angle_trigger_;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_AngleTrigger* ScanPattern_Pulse_Custom::mutable_angle_trigger() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.Pulse.Custom.angle_trigger)
  return _internal_mutable_angle_trigger();
}

// .blickfeld.protocol.config.ScanPattern.Pulse.Custom.PointTrigger point_trigger = 2;
inline bool ScanPattern_Pulse_Custom::_internal_has_point_trigger() const {
  return custom_type_case() == kPointTrigger;
}
inline bool ScanPattern_Pulse_Custom::has_point_trigger() const {
  return _internal_has_point_trigger();
}
inline void ScanPattern_Pulse_Custom::set_has_point_trigger() {
  _oneof_case_[0] = kPointTrigger;
}
inline void ScanPattern_Pulse_Custom::clear_point_trigger() {
  if (_internal_has_point_trigger()) {
    if (GetArena() == nullptr) {
      delete custom_type_.point_trigger_;
    }
    clear_has_custom_type();
  }
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* ScanPattern_Pulse_Custom::release_point_trigger() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.Pulse.Custom.point_trigger)
  if (_internal_has_point_trigger()) {
    clear_has_custom_type();
      ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* temp = custom_type_.point_trigger_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    custom_type_.point_trigger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger& ScanPattern_Pulse_Custom::_internal_point_trigger() const {
  return _internal_has_point_trigger()
      ? *custom_type_.point_trigger_
      : reinterpret_cast< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger&>(::blickfeld::protocol::config::_ScanPattern_Pulse_Custom_PointTrigger_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger& ScanPattern_Pulse_Custom::point_trigger() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.point_trigger)
  return _internal_point_trigger();
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* ScanPattern_Pulse_Custom::unsafe_arena_release_point_trigger() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.config.ScanPattern.Pulse.Custom.point_trigger)
  if (_internal_has_point_trigger()) {
    clear_has_custom_type();
    ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* temp = custom_type_.point_trigger_;
    custom_type_.point_trigger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScanPattern_Pulse_Custom::unsafe_arena_set_allocated_point_trigger(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* point_trigger) {
  clear_custom_type();
  if (point_trigger) {
    set_has_point_trigger();
    custom_type_.point_trigger_ = point_trigger;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.Pulse.Custom.point_trigger)
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* ScanPattern_Pulse_Custom::_internal_mutable_point_trigger() {
  if (!_internal_has_point_trigger()) {
    clear_custom_type();
    set_has_point_trigger();
    custom_type_.point_trigger_ = CreateMaybeMessage< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger >(GetArena());
  }
  return custom_type_.point_trigger_;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_PointTrigger* ScanPattern_Pulse_Custom::mutable_point_trigger() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.Pulse.Custom.point_trigger)
  return _internal_mutable_point_trigger();
}

// optional .blickfeld.protocol.config.ScanPattern.Pulse.Custom.Duration duration = 3;
inline bool ScanPattern_Pulse_Custom::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || duration_ != nullptr);
  return value;
}
inline bool ScanPattern_Pulse_Custom::has_duration() const {
  return _internal_has_duration();
}
inline void ScanPattern_Pulse_Custom::clear_duration() {
  if (duration_ != nullptr) duration_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration& ScanPattern_Pulse_Custom::_internal_duration() const {
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration&>(
      ::blickfeld::protocol::config::_ScanPattern_Pulse_Custom_Duration_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration& ScanPattern_Pulse_Custom::duration() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.Custom.duration)
  return _internal_duration();
}
inline void ScanPattern_Pulse_Custom::unsafe_arena_set_allocated_duration(
    ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.Pulse.Custom.duration)
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* ScanPattern_Pulse_Custom::release_duration() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* temp = duration_;
  duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* ScanPattern_Pulse_Custom::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.Pulse.Custom.duration)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* ScanPattern_Pulse_Custom::_internal_mutable_duration() {
  _has_bits_[0] |= 0x00000001u;
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* ScanPattern_Pulse_Custom::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.Pulse.Custom.duration)
  return _internal_mutable_duration();
}
inline void ScanPattern_Pulse_Custom::set_allocated_duration(::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete duration_;
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(duration);
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.ScanPattern.Pulse.Custom.duration)
}

inline bool ScanPattern_Pulse_Custom::has_custom_type() const {
  return custom_type_case() != CUSTOM_TYPE_NOT_SET;
}
inline void ScanPattern_Pulse_Custom::clear_has_custom_type() {
  _oneof_case_[0] = CUSTOM_TYPE_NOT_SET;
}
inline ScanPattern_Pulse_Custom::CustomTypeCase ScanPattern_Pulse_Custom::custom_type_case() const {
  return ScanPattern_Pulse_Custom::CustomTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ScanPattern_Pulse

// optional float angle_spacing = 2 [(.blickfeld.protocol.unit) = "rad", (.blickfeld.protocol.ui_unit) = "deg", (.blickfeld.protocol.ui_scale) = 57.295779513, (.blickfeld.protocol.ui_decimal_places) = 2];
inline bool ScanPattern_Pulse::_internal_has_angle_spacing() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScanPattern_Pulse::has_angle_spacing() const {
  return _internal_has_angle_spacing();
}
inline void ScanPattern_Pulse::clear_angle_spacing() {
  angle_spacing_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ScanPattern_Pulse::_internal_angle_spacing() const {
  return angle_spacing_;
}
inline float ScanPattern_Pulse::angle_spacing() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.angle_spacing)
  return _internal_angle_spacing();
}
inline void ScanPattern_Pulse::_internal_set_angle_spacing(float value) {
  _has_bits_[0] |= 0x00000002u;
  angle_spacing_ = value;
}
inline void ScanPattern_Pulse::set_angle_spacing(float value) {
  _internal_set_angle_spacing(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Pulse.angle_spacing)
}

// optional .blickfeld.protocol.config.ScanPattern.Pulse.Type type = 3 [default = INTERLEAVE];
inline bool ScanPattern_Pulse::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScanPattern_Pulse::has_type() const {
  return _internal_has_type();
}
inline void ScanPattern_Pulse::clear_type() {
  type_ = 3;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Type ScanPattern_Pulse::_internal_type() const {
  return static_cast< ::blickfeld::protocol::config::ScanPattern_Pulse_Type >(type_);
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Type ScanPattern_Pulse::type() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.type)
  return _internal_type();
}
inline void ScanPattern_Pulse::_internal_set_type(::blickfeld::protocol::config::ScanPattern_Pulse_Type value) {
  assert(::blickfeld::protocol::config::ScanPattern_Pulse_Type_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void ScanPattern_Pulse::set_type(::blickfeld::protocol::config::ScanPattern_Pulse_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Pulse.type)
}

// optional .blickfeld.protocol.config.ScanPattern.Pulse.FrameMode frame_mode = 4 [default = COMBINE_UP_DOWN];
inline bool ScanPattern_Pulse::_internal_has_frame_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScanPattern_Pulse::has_frame_mode() const {
  return _internal_has_frame_mode();
}
inline void ScanPattern_Pulse::clear_frame_mode() {
  frame_mode_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode ScanPattern_Pulse::_internal_frame_mode() const {
  return static_cast< ::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode >(frame_mode_);
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode ScanPattern_Pulse::frame_mode() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.frame_mode)
  return _internal_frame_mode();
}
inline void ScanPattern_Pulse::_internal_set_frame_mode(::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode value) {
  assert(::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  frame_mode_ = value;
}
inline void ScanPattern_Pulse::set_frame_mode(::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode value) {
  _internal_set_frame_mode(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Pulse.frame_mode)
}

// optional bool distortion_correction = 5 [default = true];
inline bool ScanPattern_Pulse::_internal_has_distortion_correction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScanPattern_Pulse::has_distortion_correction() const {
  return _internal_has_distortion_correction();
}
inline void ScanPattern_Pulse::clear_distortion_correction() {
  distortion_correction_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ScanPattern_Pulse::_internal_distortion_correction() const {
  return distortion_correction_;
}
inline bool ScanPattern_Pulse::distortion_correction() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.distortion_correction)
  return _internal_distortion_correction();
}
inline void ScanPattern_Pulse::_internal_set_distortion_correction(bool value) {
  _has_bits_[0] |= 0x00000004u;
  distortion_correction_ = value;
}
inline void ScanPattern_Pulse::set_distortion_correction(bool value) {
  _internal_set_distortion_correction(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Pulse.distortion_correction)
}

// optional .blickfeld.protocol.config.ScanPattern.Pulse.Custom custom = 8 [(.blickfeld.protocol.optional) = true];
inline bool ScanPattern_Pulse::_internal_has_custom() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || custom_ != nullptr);
  return value;
}
inline bool ScanPattern_Pulse::has_custom() const {
  return _internal_has_custom();
}
inline void ScanPattern_Pulse::clear_custom() {
  if (custom_ != nullptr) custom_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom& ScanPattern_Pulse::_internal_custom() const {
  const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* p = custom_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom&>(
      ::blickfeld::protocol::config::_ScanPattern_Pulse_Custom_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse_Custom& ScanPattern_Pulse::custom() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Pulse.custom)
  return _internal_custom();
}
inline void ScanPattern_Pulse::unsafe_arena_set_allocated_custom(
    ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* custom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_);
  }
  custom_ = custom;
  if (custom) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.Pulse.custom)
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* ScanPattern_Pulse::release_custom() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* temp = custom_;
  custom_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* ScanPattern_Pulse::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.Pulse.custom)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* temp = custom_;
  custom_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* ScanPattern_Pulse::_internal_mutable_custom() {
  _has_bits_[0] |= 0x00000001u;
  if (custom_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Pulse_Custom>(GetArena());
    custom_ = p;
  }
  return custom_;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse_Custom* ScanPattern_Pulse::mutable_custom() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.Pulse.custom)
  return _internal_mutable_custom();
}
inline void ScanPattern_Pulse::set_allocated_custom(::blickfeld::protocol::config::ScanPattern_Pulse_Custom* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete custom_;
  }
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  custom_ = custom;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.ScanPattern.Pulse.custom)
}

// -------------------------------------------------------------------

// ScanPattern_FrameRate

// optional double target = 1 [(.blickfeld.protocol.optional) = true, (.blickfeld.protocol.unit) = "Hz", (.blickfeld.protocol.ui_decimal_places) = 2];
inline bool ScanPattern_FrameRate::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScanPattern_FrameRate::has_target() const {
  return _internal_has_target();
}
inline void ScanPattern_FrameRate::clear_target() {
  target_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ScanPattern_FrameRate::_internal_target() const {
  return target_;
}
inline double ScanPattern_FrameRate::target() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.FrameRate.target)
  return _internal_target();
}
inline void ScanPattern_FrameRate::_internal_set_target(double value) {
  _has_bits_[0] |= 0x00000001u;
  target_ = value;
}
inline void ScanPattern_FrameRate::set_target(double value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.FrameRate.target)
}

// optional double maximum = 2 [(.blickfeld.protocol.optional) = true, (.blickfeld.protocol.unit) = "Hz", (.blickfeld.protocol.ui_decimal_places) = 2];
inline bool ScanPattern_FrameRate::_internal_has_maximum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScanPattern_FrameRate::has_maximum() const {
  return _internal_has_maximum();
}
inline void ScanPattern_FrameRate::clear_maximum() {
  maximum_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ScanPattern_FrameRate::_internal_maximum() const {
  return maximum_;
}
inline double ScanPattern_FrameRate::maximum() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.FrameRate.maximum)
  return _internal_maximum();
}
inline void ScanPattern_FrameRate::_internal_set_maximum(double value) {
  _has_bits_[0] |= 0x00000002u;
  maximum_ = value;
}
inline void ScanPattern_FrameRate::set_maximum(double value) {
  _internal_set_maximum(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.FrameRate.maximum)
}

// optional double reference_time_offset = 3 [default = 0, (.blickfeld.protocol.unit) = "s", (.blickfeld.protocol.ui_unit) = "ms", (.blickfeld.protocol.ui_scale) = 0.001, (.blickfeld.protocol.ui_decimal_places) = 1];
inline bool ScanPattern_FrameRate::_internal_has_reference_time_offset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScanPattern_FrameRate::has_reference_time_offset() const {
  return _internal_has_reference_time_offset();
}
inline void ScanPattern_FrameRate::clear_reference_time_offset() {
  reference_time_offset_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ScanPattern_FrameRate::_internal_reference_time_offset() const {
  return reference_time_offset_;
}
inline double ScanPattern_FrameRate::reference_time_offset() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.FrameRate.reference_time_offset)
  return _internal_reference_time_offset();
}
inline void ScanPattern_FrameRate::_internal_set_reference_time_offset(double value) {
  _has_bits_[0] |= 0x00000004u;
  reference_time_offset_ = value;
}
inline void ScanPattern_FrameRate::set_reference_time_offset(double value) {
  _internal_set_reference_time_offset(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.FrameRate.reference_time_offset)
}

// -------------------------------------------------------------------

// ScanPattern_Filter_Noise

// optional uint32 offset = 1 [(.blickfeld.protocol.d_min) = 0, (.blickfeld.protocol.d_max) = 50];
inline bool ScanPattern_Filter_Noise::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScanPattern_Filter_Noise::has_offset() const {
  return _internal_has_offset();
}
inline void ScanPattern_Filter_Noise::clear_offset() {
  offset_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScanPattern_Filter_Noise::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScanPattern_Filter_Noise::offset() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Filter.Noise.offset)
  return _internal_offset();
}
inline void ScanPattern_Filter_Noise::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  offset_ = value;
}
inline void ScanPattern_Filter_Noise::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Filter.Noise.offset)
}

// optional float gain = 2 [(.blickfeld.protocol.d_min) = 0, (.blickfeld.protocol.d_max) = 0.5];
inline bool ScanPattern_Filter_Noise::_internal_has_gain() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScanPattern_Filter_Noise::has_gain() const {
  return _internal_has_gain();
}
inline void ScanPattern_Filter_Noise::clear_gain() {
  gain_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ScanPattern_Filter_Noise::_internal_gain() const {
  return gain_;
}
inline float ScanPattern_Filter_Noise::gain() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Filter.Noise.gain)
  return _internal_gain();
}
inline void ScanPattern_Filter_Noise::_internal_set_gain(float value) {
  _has_bits_[0] |= 0x00000002u;
  gain_ = value;
}
inline void ScanPattern_Filter_Noise::set_gain(float value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Filter.Noise.gain)
}

// optional bool enable = 3 [default = true];
inline bool ScanPattern_Filter_Noise::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScanPattern_Filter_Noise::has_enable() const {
  return _internal_has_enable();
}
inline void ScanPattern_Filter_Noise::clear_enable() {
  enable_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ScanPattern_Filter_Noise::_internal_enable() const {
  return enable_;
}
inline bool ScanPattern_Filter_Noise::enable() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Filter.Noise.enable)
  return _internal_enable();
}
inline void ScanPattern_Filter_Noise::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_ = value;
}
inline void ScanPattern_Filter_Noise::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Filter.Noise.enable)
}

// -------------------------------------------------------------------

// ScanPattern_Filter

// optional uint32 max_number_of_returns_per_point = 1 [default = 1, (.blickfeld.protocol.d_min) = 1, (.blickfeld.protocol.d_max) = 3];
inline bool ScanPattern_Filter::_internal_has_max_number_of_returns_per_point() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScanPattern_Filter::has_max_number_of_returns_per_point() const {
  return _internal_has_max_number_of_returns_per_point();
}
inline void ScanPattern_Filter::clear_max_number_of_returns_per_point() {
  max_number_of_returns_per_point_ = 1u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScanPattern_Filter::_internal_max_number_of_returns_per_point() const {
  return max_number_of_returns_per_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScanPattern_Filter::max_number_of_returns_per_point() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Filter.max_number_of_returns_per_point)
  return _internal_max_number_of_returns_per_point();
}
inline void ScanPattern_Filter::_internal_set_max_number_of_returns_per_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_number_of_returns_per_point_ = value;
}
inline void ScanPattern_Filter::set_max_number_of_returns_per_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_number_of_returns_per_point(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Filter.max_number_of_returns_per_point)
}

// optional .blickfeld.protocol.OptionalValueRange intensity = 2;
inline bool ScanPattern_Filter::_internal_has_intensity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || intensity_ != nullptr);
  return value;
}
inline bool ScanPattern_Filter::has_intensity() const {
  return _internal_has_intensity();
}
inline const ::blickfeld::protocol::OptionalValueRange& ScanPattern_Filter::_internal_intensity() const {
  const ::blickfeld::protocol::OptionalValueRange* p = intensity_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::OptionalValueRange&>(
      ::blickfeld::protocol::_OptionalValueRange_default_instance_);
}
inline const ::blickfeld::protocol::OptionalValueRange& ScanPattern_Filter::intensity() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Filter.intensity)
  return _internal_intensity();
}
inline void ScanPattern_Filter::unsafe_arena_set_allocated_intensity(
    ::blickfeld::protocol::OptionalValueRange* intensity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intensity_);
  }
  intensity_ = intensity;
  if (intensity) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.Filter.intensity)
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::release_intensity() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::OptionalValueRange* temp = intensity_;
  intensity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::unsafe_arena_release_intensity() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.Filter.intensity)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::OptionalValueRange* temp = intensity_;
  intensity_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::_internal_mutable_intensity() {
  _has_bits_[0] |= 0x00000001u;
  if (intensity_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::OptionalValueRange>(GetArena());
    intensity_ = p;
  }
  return intensity_;
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::mutable_intensity() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.Filter.intensity)
  return _internal_mutable_intensity();
}
inline void ScanPattern_Filter::set_allocated_intensity(::blickfeld::protocol::OptionalValueRange* intensity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intensity_);
  }
  if (intensity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intensity)->GetArena();
    if (message_arena != submessage_arena) {
      intensity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intensity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  intensity_ = intensity;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.ScanPattern.Filter.intensity)
}

// optional .blickfeld.protocol.OptionalValueRange ambient_light_level = 3;
inline bool ScanPattern_Filter::_internal_has_ambient_light_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ambient_light_level_ != nullptr);
  return value;
}
inline bool ScanPattern_Filter::has_ambient_light_level() const {
  return _internal_has_ambient_light_level();
}
inline const ::blickfeld::protocol::OptionalValueRange& ScanPattern_Filter::_internal_ambient_light_level() const {
  const ::blickfeld::protocol::OptionalValueRange* p = ambient_light_level_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::OptionalValueRange&>(
      ::blickfeld::protocol::_OptionalValueRange_default_instance_);
}
inline const ::blickfeld::protocol::OptionalValueRange& ScanPattern_Filter::ambient_light_level() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Filter.ambient_light_level)
  return _internal_ambient_light_level();
}
inline void ScanPattern_Filter::unsafe_arena_set_allocated_ambient_light_level(
    ::blickfeld::protocol::OptionalValueRange* ambient_light_level) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ambient_light_level_);
  }
  ambient_light_level_ = ambient_light_level;
  if (ambient_light_level) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.Filter.ambient_light_level)
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::release_ambient_light_level() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::OptionalValueRange* temp = ambient_light_level_;
  ambient_light_level_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::unsafe_arena_release_ambient_light_level() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.Filter.ambient_light_level)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::OptionalValueRange* temp = ambient_light_level_;
  ambient_light_level_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::_internal_mutable_ambient_light_level() {
  _has_bits_[0] |= 0x00000002u;
  if (ambient_light_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::OptionalValueRange>(GetArena());
    ambient_light_level_ = p;
  }
  return ambient_light_level_;
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::mutable_ambient_light_level() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.Filter.ambient_light_level)
  return _internal_mutable_ambient_light_level();
}
inline void ScanPattern_Filter::set_allocated_ambient_light_level(::blickfeld::protocol::OptionalValueRange* ambient_light_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ambient_light_level_);
  }
  if (ambient_light_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ambient_light_level)->GetArena();
    if (message_arena != submessage_arena) {
      ambient_light_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ambient_light_level, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ambient_light_level_ = ambient_light_level;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.ScanPattern.Filter.ambient_light_level)
}

// optional .blickfeld.protocol.OptionalValueRange range = 4;
inline bool ScanPattern_Filter::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool ScanPattern_Filter::has_range() const {
  return _internal_has_range();
}
inline const ::blickfeld::protocol::OptionalValueRange& ScanPattern_Filter::_internal_range() const {
  const ::blickfeld::protocol::OptionalValueRange* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::OptionalValueRange&>(
      ::blickfeld::protocol::_OptionalValueRange_default_instance_);
}
inline const ::blickfeld::protocol::OptionalValueRange& ScanPattern_Filter::range() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Filter.range)
  return _internal_range();
}
inline void ScanPattern_Filter::unsafe_arena_set_allocated_range(
    ::blickfeld::protocol::OptionalValueRange* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.Filter.range)
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::release_range() {
  _has_bits_[0] &= ~0x00000004u;
  ::blickfeld::protocol::OptionalValueRange* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.Filter.range)
  _has_bits_[0] &= ~0x00000004u;
  ::blickfeld::protocol::OptionalValueRange* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000004u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::OptionalValueRange>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::blickfeld::protocol::OptionalValueRange* ScanPattern_Filter::mutable_range() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.Filter.range)
  return _internal_mutable_range();
}
inline void ScanPattern_Filter::set_allocated_range(::blickfeld::protocol::OptionalValueRange* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range)->GetArena();
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.ScanPattern.Filter.range)
}

// optional .blickfeld.protocol.config.ScanPattern.Filter.Noise noise = 5 [(.blickfeld.protocol.optional) = true];
inline bool ScanPattern_Filter::_internal_has_noise() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || noise_ != nullptr);
  return value;
}
inline bool ScanPattern_Filter::has_noise() const {
  return _internal_has_noise();
}
inline void ScanPattern_Filter::clear_noise() {
  if (noise_ != nullptr) noise_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::blickfeld::protocol::config::ScanPattern_Filter_Noise& ScanPattern_Filter::_internal_noise() const {
  const ::blickfeld::protocol::config::ScanPattern_Filter_Noise* p = noise_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern_Filter_Noise&>(
      ::blickfeld::protocol::config::_ScanPattern_Filter_Noise_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern_Filter_Noise& ScanPattern_Filter::noise() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Filter.noise)
  return _internal_noise();
}
inline void ScanPattern_Filter::unsafe_arena_set_allocated_noise(
    ::blickfeld::protocol::config::ScanPattern_Filter_Noise* noise) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(noise_);
  }
  noise_ = noise;
  if (noise) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.Filter.noise)
}
inline ::blickfeld::protocol::config::ScanPattern_Filter_Noise* ScanPattern_Filter::release_noise() {
  _has_bits_[0] &= ~0x00000008u;
  ::blickfeld::protocol::config::ScanPattern_Filter_Noise* temp = noise_;
  noise_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Filter_Noise* ScanPattern_Filter::unsafe_arena_release_noise() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.Filter.noise)
  _has_bits_[0] &= ~0x00000008u;
  ::blickfeld::protocol::config::ScanPattern_Filter_Noise* temp = noise_;
  noise_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Filter_Noise* ScanPattern_Filter::_internal_mutable_noise() {
  _has_bits_[0] |= 0x00000008u;
  if (noise_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Filter_Noise>(GetArena());
    noise_ = p;
  }
  return noise_;
}
inline ::blickfeld::protocol::config::ScanPattern_Filter_Noise* ScanPattern_Filter::mutable_noise() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.Filter.noise)
  return _internal_mutable_noise();
}
inline void ScanPattern_Filter::set_allocated_noise(::blickfeld::protocol::config::ScanPattern_Filter_Noise* noise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete noise_;
  }
  if (noise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(noise);
    if (message_arena != submessage_arena) {
      noise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, noise, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  noise_ = noise;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.ScanPattern.Filter.noise)
}

// optional bool delete_points_without_returns = 6 [default = false];
inline bool ScanPattern_Filter::_internal_has_delete_points_without_returns() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScanPattern_Filter::has_delete_points_without_returns() const {
  return _internal_has_delete_points_without_returns();
}
inline void ScanPattern_Filter::clear_delete_points_without_returns() {
  delete_points_without_returns_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ScanPattern_Filter::_internal_delete_points_without_returns() const {
  return delete_points_without_returns_;
}
inline bool ScanPattern_Filter::delete_points_without_returns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.Filter.delete_points_without_returns)
  return _internal_delete_points_without_returns();
}
inline void ScanPattern_Filter::_internal_set_delete_points_without_returns(bool value) {
  _has_bits_[0] |= 0x00000010u;
  delete_points_without_returns_ = value;
}
inline void ScanPattern_Filter::set_delete_points_without_returns(bool value) {
  _internal_set_delete_points_without_returns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.ScanPattern.Filter.delete_points_without_returns)
}

// -------------------------------------------------------------------

// ScanPattern

// optional .blickfeld.protocol.config.ScanPattern.Horizontal horizontal = 1;
inline bool ScanPattern::_internal_has_horizontal() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || horizontal_ != nullptr);
  return value;
}
inline bool ScanPattern::has_horizontal() const {
  return _internal_has_horizontal();
}
inline void ScanPattern::clear_horizontal() {
  if (horizontal_ != nullptr) horizontal_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::blickfeld::protocol::config::ScanPattern_Horizontal& ScanPattern::_internal_horizontal() const {
  const ::blickfeld::protocol::config::ScanPattern_Horizontal* p = horizontal_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern_Horizontal&>(
      ::blickfeld::protocol::config::_ScanPattern_Horizontal_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern_Horizontal& ScanPattern::horizontal() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.horizontal)
  return _internal_horizontal();
}
inline void ScanPattern::unsafe_arena_set_allocated_horizontal(
    ::blickfeld::protocol::config::ScanPattern_Horizontal* horizontal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(horizontal_);
  }
  horizontal_ = horizontal;
  if (horizontal) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.horizontal)
}
inline ::blickfeld::protocol::config::ScanPattern_Horizontal* ScanPattern::release_horizontal() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern_Horizontal* temp = horizontal_;
  horizontal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Horizontal* ScanPattern::unsafe_arena_release_horizontal() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.horizontal)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern_Horizontal* temp = horizontal_;
  horizontal_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Horizontal* ScanPattern::_internal_mutable_horizontal() {
  _has_bits_[0] |= 0x00000001u;
  if (horizontal_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Horizontal>(GetArena());
    horizontal_ = p;
  }
  return horizontal_;
}
inline ::blickfeld::protocol::config::ScanPattern_Horizontal* ScanPattern::mutable_horizontal() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.horizontal)
  return _internal_mutable_horizontal();
}
inline void ScanPattern::set_allocated_horizontal(::blickfeld::protocol::config::ScanPattern_Horizontal* horizontal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete horizontal_;
  }
  if (horizontal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(horizontal);
    if (message_arena != submessage_arena) {
      horizontal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horizontal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  horizontal_ = horizontal;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.ScanPattern.horizontal)
}

// optional .blickfeld.protocol.config.ScanPattern.Vertical vertical = 2;
inline bool ScanPattern::_internal_has_vertical() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || vertical_ != nullptr);
  return value;
}
inline bool ScanPattern::has_vertical() const {
  return _internal_has_vertical();
}
inline void ScanPattern::clear_vertical() {
  if (vertical_ != nullptr) vertical_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::blickfeld::protocol::config::ScanPattern_Vertical& ScanPattern::_internal_vertical() const {
  const ::blickfeld::protocol::config::ScanPattern_Vertical* p = vertical_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern_Vertical&>(
      ::blickfeld::protocol::config::_ScanPattern_Vertical_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern_Vertical& ScanPattern::vertical() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.vertical)
  return _internal_vertical();
}
inline void ScanPattern::unsafe_arena_set_allocated_vertical(
    ::blickfeld::protocol::config::ScanPattern_Vertical* vertical) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertical_);
  }
  vertical_ = vertical;
  if (vertical) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.vertical)
}
inline ::blickfeld::protocol::config::ScanPattern_Vertical* ScanPattern::release_vertical() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::ScanPattern_Vertical* temp = vertical_;
  vertical_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Vertical* ScanPattern::unsafe_arena_release_vertical() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.vertical)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::ScanPattern_Vertical* temp = vertical_;
  vertical_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Vertical* ScanPattern::_internal_mutable_vertical() {
  _has_bits_[0] |= 0x00000002u;
  if (vertical_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Vertical>(GetArena());
    vertical_ = p;
  }
  return vertical_;
}
inline ::blickfeld::protocol::config::ScanPattern_Vertical* ScanPattern::mutable_vertical() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.vertical)
  return _internal_mutable_vertical();
}
inline void ScanPattern::set_allocated_vertical(::blickfeld::protocol::config::ScanPattern_Vertical* vertical) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vertical_;
  }
  if (vertical) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vertical);
    if (message_arena != submessage_arena) {
      vertical = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertical, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vertical_ = vertical;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.ScanPattern.vertical)
}

// optional .blickfeld.protocol.config.ScanPattern.Pulse pulse = 3;
inline bool ScanPattern::_internal_has_pulse() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || pulse_ != nullptr);
  return value;
}
inline bool ScanPattern::has_pulse() const {
  return _internal_has_pulse();
}
inline void ScanPattern::clear_pulse() {
  if (pulse_ != nullptr) pulse_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse& ScanPattern::_internal_pulse() const {
  const ::blickfeld::protocol::config::ScanPattern_Pulse* p = pulse_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern_Pulse&>(
      ::blickfeld::protocol::config::_ScanPattern_Pulse_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern_Pulse& ScanPattern::pulse() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.pulse)
  return _internal_pulse();
}
inline void ScanPattern::unsafe_arena_set_allocated_pulse(
    ::blickfeld::protocol::config::ScanPattern_Pulse* pulse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulse_);
  }
  pulse_ = pulse;
  if (pulse) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.pulse)
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse* ScanPattern::release_pulse() {
  _has_bits_[0] &= ~0x00000004u;
  ::blickfeld::protocol::config::ScanPattern_Pulse* temp = pulse_;
  pulse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse* ScanPattern::unsafe_arena_release_pulse() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.pulse)
  _has_bits_[0] &= ~0x00000004u;
  ::blickfeld::protocol::config::ScanPattern_Pulse* temp = pulse_;
  pulse_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse* ScanPattern::_internal_mutable_pulse() {
  _has_bits_[0] |= 0x00000004u;
  if (pulse_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Pulse>(GetArena());
    pulse_ = p;
  }
  return pulse_;
}
inline ::blickfeld::protocol::config::ScanPattern_Pulse* ScanPattern::mutable_pulse() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.pulse)
  return _internal_mutable_pulse();
}
inline void ScanPattern::set_allocated_pulse(::blickfeld::protocol::config::ScanPattern_Pulse* pulse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pulse_;
  }
  if (pulse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pulse);
    if (message_arena != submessage_arena) {
      pulse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pulse_ = pulse;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.ScanPattern.pulse)
}

// optional .blickfeld.protocol.config.ScanPattern.FrameRate frame_rate = 4;
inline bool ScanPattern::_internal_has_frame_rate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || frame_rate_ != nullptr);
  return value;
}
inline bool ScanPattern::has_frame_rate() const {
  return _internal_has_frame_rate();
}
inline void ScanPattern::clear_frame_rate() {
  if (frame_rate_ != nullptr) frame_rate_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::blickfeld::protocol::config::ScanPattern_FrameRate& ScanPattern::_internal_frame_rate() const {
  const ::blickfeld::protocol::config::ScanPattern_FrameRate* p = frame_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern_FrameRate&>(
      ::blickfeld::protocol::config::_ScanPattern_FrameRate_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern_FrameRate& ScanPattern::frame_rate() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.frame_rate)
  return _internal_frame_rate();
}
inline void ScanPattern::unsafe_arena_set_allocated_frame_rate(
    ::blickfeld::protocol::config::ScanPattern_FrameRate* frame_rate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_rate_);
  }
  frame_rate_ = frame_rate;
  if (frame_rate) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.frame_rate)
}
inline ::blickfeld::protocol::config::ScanPattern_FrameRate* ScanPattern::release_frame_rate() {
  _has_bits_[0] &= ~0x00000008u;
  ::blickfeld::protocol::config::ScanPattern_FrameRate* temp = frame_rate_;
  frame_rate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_FrameRate* ScanPattern::unsafe_arena_release_frame_rate() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.frame_rate)
  _has_bits_[0] &= ~0x00000008u;
  ::blickfeld::protocol::config::ScanPattern_FrameRate* temp = frame_rate_;
  frame_rate_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_FrameRate* ScanPattern::_internal_mutable_frame_rate() {
  _has_bits_[0] |= 0x00000008u;
  if (frame_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_FrameRate>(GetArena());
    frame_rate_ = p;
  }
  return frame_rate_;
}
inline ::blickfeld::protocol::config::ScanPattern_FrameRate* ScanPattern::mutable_frame_rate() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.frame_rate)
  return _internal_mutable_frame_rate();
}
inline void ScanPattern::set_allocated_frame_rate(::blickfeld::protocol::config::ScanPattern_FrameRate* frame_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete frame_rate_;
  }
  if (frame_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frame_rate);
    if (message_arena != submessage_arena) {
      frame_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_rate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  frame_rate_ = frame_rate;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.ScanPattern.frame_rate)
}

// optional .blickfeld.protocol.config.ScanPattern.Filter filter = 7;
inline bool ScanPattern::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || filter_ != nullptr);
  return value;
}
inline bool ScanPattern::has_filter() const {
  return _internal_has_filter();
}
inline void ScanPattern::clear_filter() {
  if (filter_ != nullptr) filter_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::blickfeld::protocol::config::ScanPattern_Filter& ScanPattern::_internal_filter() const {
  const ::blickfeld::protocol::config::ScanPattern_Filter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern_Filter&>(
      ::blickfeld::protocol::config::_ScanPattern_Filter_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern_Filter& ScanPattern::filter() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.filter)
  return _internal_filter();
}
inline void ScanPattern::unsafe_arena_set_allocated_filter(
    ::blickfeld::protocol::config::ScanPattern_Filter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.ScanPattern.filter)
}
inline ::blickfeld::protocol::config::ScanPattern_Filter* ScanPattern::release_filter() {
  _has_bits_[0] &= ~0x00000010u;
  ::blickfeld::protocol::config::ScanPattern_Filter* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Filter* ScanPattern::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.ScanPattern.filter)
  _has_bits_[0] &= ~0x00000010u;
  ::blickfeld::protocol::config::ScanPattern_Filter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Filter* ScanPattern::_internal_mutable_filter() {
  _has_bits_[0] |= 0x00000010u;
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Filter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::blickfeld::protocol::config::ScanPattern_Filter* ScanPattern::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.filter)
  return _internal_mutable_filter();
}
inline void ScanPattern::set_allocated_filter(::blickfeld::protocol::config::ScanPattern_Filter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.ScanPattern.filter)
}

// repeated .blickfeld.protocol.Constraint constraints = 8;
inline int ScanPattern::_internal_constraints_size() const {
  return constraints_.size();
}
inline int ScanPattern::constraints_size() const {
  return _internal_constraints_size();
}
inline ::blickfeld::protocol::Constraint* ScanPattern::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.ScanPattern.constraints)
  return constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >*
ScanPattern::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.config.ScanPattern.constraints)
  return &constraints_;
}
inline const ::blickfeld::protocol::Constraint& ScanPattern::_internal_constraints(int index) const {
  return constraints_.Get(index);
}
inline const ::blickfeld::protocol::Constraint& ScanPattern::constraints(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.ScanPattern.constraints)
  return _internal_constraints(index);
}
inline ::blickfeld::protocol::Constraint* ScanPattern::_internal_add_constraints() {
  return constraints_.Add();
}
inline ::blickfeld::protocol::Constraint* ScanPattern::add_constraints() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.config.ScanPattern.constraints)
  return _internal_add_constraints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >&
ScanPattern::constraints() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.config.ScanPattern.constraints)
  return constraints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace protocol
}  // namespace blickfeld

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger>() {
  return ::blickfeld::protocol::config::ScanPattern_Pulse_Custom_Trigger_descriptor();
}
template <> struct is_proto_enum< ::blickfeld::protocol::config::ScanPattern_Pulse_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::config::ScanPattern_Pulse_Type>() {
  return ::blickfeld::protocol::config::ScanPattern_Pulse_Type_descriptor();
}
template <> struct is_proto_enum< ::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode>() {
  return ::blickfeld::protocol::config::ScanPattern_Pulse_FrameMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fscan_5fpattern_2eproto
