// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/config/named_scan_pattern.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fnamed_5fscan_5fpattern_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fnamed_5fscan_5fpattern_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/config/scan_pattern.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fconfig_2fnamed_5fscan_5fpattern_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fconfig_2fnamed_5fscan_5fpattern_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fconfig_2fnamed_5fscan_5fpattern_2eproto;
namespace blickfeld {
namespace protocol {
namespace config {
class NamedScanPattern;
struct NamedScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern NamedScanPatternDefaultTypeInternal _NamedScanPattern_default_instance_;
}  // namespace config
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::config::NamedScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::config::NamedScanPattern>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace config {

// ===================================================================

class BF_DLLEXPORT NamedScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.config.NamedScanPattern) */ {
 public:
  inline NamedScanPattern() : NamedScanPattern(nullptr) {}
  ~NamedScanPattern() override;
  explicit constexpr NamedScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamedScanPattern(const NamedScanPattern& from);
  NamedScanPattern(NamedScanPattern&& from) noexcept
    : NamedScanPattern() {
    *this = ::std::move(from);
  }

  inline NamedScanPattern& operator=(const NamedScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedScanPattern& operator=(NamedScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamedScanPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedScanPattern* internal_default_instance() {
    return reinterpret_cast<const NamedScanPattern*>(
               &_NamedScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NamedScanPattern& a, NamedScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedScanPattern* New() const final {
    return CreateMaybeMessage<NamedScanPattern>(nullptr);
  }

  NamedScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamedScanPattern& from);
  void MergeFrom(const NamedScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.config.NamedScanPattern";
  }
  protected:
  explicit NamedScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConfigFieldNumber = 2,
    kReadOnlyFieldNumber = 3,
  };
  // optional string name = 1 [(.blickfeld.protocol.regex) = "[a-zA-Z0-9]([a-zA-Z0-9]|[_ \\-][a-zA-Z0-9])*"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .blickfeld.protocol.config.ScanPattern config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::blickfeld::protocol::config::ScanPattern& config() const;
  ::blickfeld::protocol::config::ScanPattern* release_config();
  ::blickfeld::protocol::config::ScanPattern* mutable_config();
  void set_allocated_config(::blickfeld::protocol::config::ScanPattern* config);
  private:
  const ::blickfeld::protocol::config::ScanPattern& _internal_config() const;
  ::blickfeld::protocol::config::ScanPattern* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::blickfeld::protocol::config::ScanPattern* config);
  ::blickfeld::protocol::config::ScanPattern* unsafe_arena_release_config();

  // optional bool read_only = 3 [default = false];
  bool has_read_only() const;
  private:
  bool _internal_has_read_only() const;
  public:
  void clear_read_only();
  bool read_only() const;
  void set_read_only(bool value);
  private:
  bool _internal_read_only() const;
  void _internal_set_read_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.config.NamedScanPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::blickfeld::protocol::config::ScanPattern* config_;
  bool read_only_;
  friend struct ::TableStruct_blickfeld_2fconfig_2fnamed_5fscan_5fpattern_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NamedScanPattern

// optional string name = 1 [(.blickfeld.protocol.regex) = "[a-zA-Z0-9]([a-zA-Z0-9]|[_ \\-][a-zA-Z0-9])*"];
inline bool NamedScanPattern::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NamedScanPattern::has_name() const {
  return _internal_has_name();
}
inline void NamedScanPattern::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NamedScanPattern::name() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.NamedScanPattern.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void NamedScanPattern::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.NamedScanPattern.name)
}
inline std::string* NamedScanPattern::mutable_name() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.NamedScanPattern.name)
  return _internal_mutable_name();
}
inline const std::string& NamedScanPattern::_internal_name() const {
  return name_.Get();
}
inline void NamedScanPattern::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* NamedScanPattern::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NamedScanPattern::release_name() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.NamedScanPattern.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NamedScanPattern::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.NamedScanPattern.name)
}

// optional .blickfeld.protocol.config.ScanPattern config = 2;
inline bool NamedScanPattern::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || config_ != nullptr);
  return value;
}
inline bool NamedScanPattern::has_config() const {
  return _internal_has_config();
}
inline const ::blickfeld::protocol::config::ScanPattern& NamedScanPattern::_internal_config() const {
  const ::blickfeld::protocol::config::ScanPattern* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern&>(
      ::blickfeld::protocol::config::_ScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern& NamedScanPattern::config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.NamedScanPattern.config)
  return _internal_config();
}
inline void NamedScanPattern::unsafe_arena_set_allocated_config(
    ::blickfeld::protocol::config::ScanPattern* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.config.NamedScanPattern.config)
}
inline ::blickfeld::protocol::config::ScanPattern* NamedScanPattern::release_config() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::ScanPattern* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* NamedScanPattern::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.config.NamedScanPattern.config)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::ScanPattern* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* NamedScanPattern::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000002u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::blickfeld::protocol::config::ScanPattern* NamedScanPattern::mutable_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.config.NamedScanPattern.config)
  return _internal_mutable_config();
}
inline void NamedScanPattern::set_allocated_config(::blickfeld::protocol::config::ScanPattern* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.config.NamedScanPattern.config)
}

// optional bool read_only = 3 [default = false];
inline bool NamedScanPattern::_internal_has_read_only() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NamedScanPattern::has_read_only() const {
  return _internal_has_read_only();
}
inline void NamedScanPattern::clear_read_only() {
  read_only_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool NamedScanPattern::_internal_read_only() const {
  return read_only_;
}
inline bool NamedScanPattern::read_only() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.config.NamedScanPattern.read_only)
  return _internal_read_only();
}
inline void NamedScanPattern::_internal_set_read_only(bool value) {
  _has_bits_[0] |= 0x00000004u;
  read_only_ = value;
}
inline void NamedScanPattern::set_read_only(bool value) {
  _internal_set_read_only(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.config.NamedScanPattern.read_only)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconfig_2fnamed_5fscan_5fpattern_2eproto
