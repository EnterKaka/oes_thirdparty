// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/data/imu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fimu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fimu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fdata_2fimu_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fdata_2fimu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fdata_2fimu_2eproto;
namespace blickfeld {
namespace protocol {
namespace data {
class IMU;
struct IMUDefaultTypeInternal;
BF_DLLEXPORT extern IMUDefaultTypeInternal _IMU_default_instance_;
class IMU_Packed;
struct IMU_PackedDefaultTypeInternal;
BF_DLLEXPORT extern IMU_PackedDefaultTypeInternal _IMU_Packed_default_instance_;
class IMU_Sample;
struct IMU_SampleDefaultTypeInternal;
BF_DLLEXPORT extern IMU_SampleDefaultTypeInternal _IMU_Sample_default_instance_;
}  // namespace data
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::data::IMU* Arena::CreateMaybeMessage<::blickfeld::protocol::data::IMU>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::data::IMU_Packed* Arena::CreateMaybeMessage<::blickfeld::protocol::data::IMU_Packed>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::data::IMU_Sample* Arena::CreateMaybeMessage<::blickfeld::protocol::data::IMU_Sample>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace data {

// ===================================================================

class BF_DLLEXPORT IMU_Sample PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.IMU.Sample) */ {
 public:
  inline IMU_Sample() : IMU_Sample(nullptr) {}
  ~IMU_Sample() override;
  explicit constexpr IMU_Sample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMU_Sample(const IMU_Sample& from);
  IMU_Sample(IMU_Sample&& from) noexcept
    : IMU_Sample() {
    *this = ::std::move(from);
  }

  inline IMU_Sample& operator=(const IMU_Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMU_Sample& operator=(IMU_Sample&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMU_Sample& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMU_Sample* internal_default_instance() {
    return reinterpret_cast<const IMU_Sample*>(
               &_IMU_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMU_Sample& a, IMU_Sample& b) {
    a.Swap(&b);
  }
  inline void Swap(IMU_Sample* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMU_Sample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMU_Sample* New() const final {
    return CreateMaybeMessage<IMU_Sample>(nullptr);
  }

  IMU_Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMU_Sample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMU_Sample& from);
  void MergeFrom(const IMU_Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMU_Sample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.IMU.Sample";
  }
  protected:
  explicit IMU_Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerationFieldNumber = 2,
    kAngularVelocityFieldNumber = 3,
    kStartOffsetNsFieldNumber = 1,
  };
  // repeated float acceleration = 2 [packed = true, (.blickfeld.protocol.length) = 3];
  int acceleration_size() const;
  private:
  int _internal_acceleration_size() const;
  public:
  void clear_acceleration();
  private:
  float _internal_acceleration(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_acceleration() const;
  void _internal_add_acceleration(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_acceleration();
  public:
  float acceleration(int index) const;
  void set_acceleration(int index, float value);
  void add_acceleration(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      acceleration() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_acceleration();

  // repeated float angular_velocity = 3 [packed = true, (.blickfeld.protocol.length) = 3];
  int angular_velocity_size() const;
  private:
  int _internal_angular_velocity_size() const;
  public:
  void clear_angular_velocity();
  private:
  float _internal_angular_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_angular_velocity() const;
  void _internal_add_angular_velocity(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_angular_velocity();
  public:
  float angular_velocity(int index) const;
  void set_angular_velocity(int index, float value);
  void add_angular_velocity(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      angular_velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_angular_velocity();

  // optional uint64 start_offset_ns = 1;
  bool has_start_offset_ns() const;
  private:
  bool _internal_has_start_offset_ns() const;
  public:
  void clear_start_offset_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_ns() const;
  void set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_offset_ns() const;
  void _internal_set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.IMU.Sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > acceleration_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > angular_velocity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_ns_;
  friend struct ::TableStruct_blickfeld_2fdata_2fimu_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT IMU_Packed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.IMU.Packed) */ {
 public:
  inline IMU_Packed() : IMU_Packed(nullptr) {}
  ~IMU_Packed() override;
  explicit constexpr IMU_Packed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMU_Packed(const IMU_Packed& from);
  IMU_Packed(IMU_Packed&& from) noexcept
    : IMU_Packed() {
    *this = ::std::move(from);
  }

  inline IMU_Packed& operator=(const IMU_Packed& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMU_Packed& operator=(IMU_Packed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMU_Packed& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMU_Packed* internal_default_instance() {
    return reinterpret_cast<const IMU_Packed*>(
               &_IMU_Packed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMU_Packed& a, IMU_Packed& b) {
    a.Swap(&b);
  }
  inline void Swap(IMU_Packed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMU_Packed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMU_Packed* New() const final {
    return CreateMaybeMessage<IMU_Packed>(nullptr);
  }

  IMU_Packed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMU_Packed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMU_Packed& from);
  void MergeFrom(const IMU_Packed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMU_Packed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.IMU.Packed";
  }
  protected:
  explicit IMU_Packed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartOffsetNsFieldNumber = 2,
    kAccelerationFieldNumber = 3,
    kAngularVelocityFieldNumber = 4,
    kLengthFieldNumber = 1,
  };
  // optional bytes start_offset_ns = 2;
  bool has_start_offset_ns() const;
  private:
  bool _internal_has_start_offset_ns() const;
  public:
  void clear_start_offset_ns();
  const std::string& start_offset_ns() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_offset_ns(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_offset_ns();
  std::string* release_start_offset_ns();
  void set_allocated_start_offset_ns(std::string* start_offset_ns);
  private:
  const std::string& _internal_start_offset_ns() const;
  void _internal_set_start_offset_ns(const std::string& value);
  std::string* _internal_mutable_start_offset_ns();
  public:

  // optional bytes acceleration = 3;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const std::string& acceleration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acceleration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acceleration();
  std::string* release_acceleration();
  void set_allocated_acceleration(std::string* acceleration);
  private:
  const std::string& _internal_acceleration() const;
  void _internal_set_acceleration(const std::string& value);
  std::string* _internal_mutable_acceleration();
  public:

  // optional bytes angular_velocity = 4;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const std::string& angular_velocity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_angular_velocity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_angular_velocity();
  std::string* release_angular_velocity();
  void set_allocated_angular_velocity(std::string* angular_velocity);
  private:
  const std::string& _internal_angular_velocity() const;
  void _internal_set_angular_velocity(const std::string& value);
  std::string* _internal_mutable_angular_velocity();
  public:

  // optional uint32 length = 1;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.IMU.Packed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_offset_ns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceleration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr angular_velocity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  friend struct ::TableStruct_blickfeld_2fdata_2fimu_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT IMU PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.IMU) */ {
 public:
  inline IMU() : IMU(nullptr) {}
  ~IMU() override;
  explicit constexpr IMU(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMU(const IMU& from);
  IMU(IMU&& from) noexcept
    : IMU() {
    *this = ::std::move(from);
  }

  inline IMU& operator=(const IMU& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMU& operator=(IMU&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMU& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMU* internal_default_instance() {
    return reinterpret_cast<const IMU*>(
               &_IMU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMU& a, IMU& b) {
    a.Swap(&b);
  }
  inline void Swap(IMU* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMU* New() const final {
    return CreateMaybeMessage<IMU>(nullptr);
  }

  IMU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMU& from);
  void MergeFrom(const IMU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.IMU";
  }
  protected:
  explicit IMU(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IMU_Sample Sample;
  typedef IMU_Packed Packed;

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 2,
    kPackedFieldNumber = 3,
    kStartTimeNsFieldNumber = 1,
  };
  // repeated .blickfeld.protocol.data.IMU.Sample samples = 2 [(.blickfeld.protocol.optional) = true];
  int samples_size() const;
  private:
  int _internal_samples_size() const;
  public:
  void clear_samples();
  ::blickfeld::protocol::data::IMU_Sample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::IMU_Sample >*
      mutable_samples();
  private:
  const ::blickfeld::protocol::data::IMU_Sample& _internal_samples(int index) const;
  ::blickfeld::protocol::data::IMU_Sample* _internal_add_samples();
  public:
  const ::blickfeld::protocol::data::IMU_Sample& samples(int index) const;
  ::blickfeld::protocol::data::IMU_Sample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::IMU_Sample >&
      samples() const;

  // optional .blickfeld.protocol.data.IMU.Packed packed = 3 [(.blickfeld.protocol.optional) = true];
  bool has_packed() const;
  private:
  bool _internal_has_packed() const;
  public:
  void clear_packed();
  const ::blickfeld::protocol::data::IMU_Packed& packed() const;
  ::blickfeld::protocol::data::IMU_Packed* release_packed();
  ::blickfeld::protocol::data::IMU_Packed* mutable_packed();
  void set_allocated_packed(::blickfeld::protocol::data::IMU_Packed* packed);
  private:
  const ::blickfeld::protocol::data::IMU_Packed& _internal_packed() const;
  ::blickfeld::protocol::data::IMU_Packed* _internal_mutable_packed();
  public:
  void unsafe_arena_set_allocated_packed(
      ::blickfeld::protocol::data::IMU_Packed* packed);
  ::blickfeld::protocol::data::IMU_Packed* unsafe_arena_release_packed();

  // optional uint64 start_time_ns = 1 [(.blickfeld.protocol.optional) = true];
  bool has_start_time_ns() const;
  private:
  bool _internal_has_start_time_ns() const;
  public:
  void clear_start_time_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_ns() const;
  void set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_ns() const;
  void _internal_set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.IMU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::IMU_Sample > samples_;
  ::blickfeld::protocol::data::IMU_Packed* packed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_ns_;
  friend struct ::TableStruct_blickfeld_2fdata_2fimu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMU_Sample

// optional uint64 start_offset_ns = 1;
inline bool IMU_Sample::_internal_has_start_offset_ns() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IMU_Sample::has_start_offset_ns() const {
  return _internal_has_start_offset_ns();
}
inline void IMU_Sample::clear_start_offset_ns() {
  start_offset_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IMU_Sample::_internal_start_offset_ns() const {
  return start_offset_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IMU_Sample::start_offset_ns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.IMU.Sample.start_offset_ns)
  return _internal_start_offset_ns();
}
inline void IMU_Sample::_internal_set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  start_offset_ns_ = value;
}
inline void IMU_Sample::set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_offset_ns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.IMU.Sample.start_offset_ns)
}

// repeated float acceleration = 2 [packed = true, (.blickfeld.protocol.length) = 3];
inline int IMU_Sample::_internal_acceleration_size() const {
  return acceleration_.size();
}
inline int IMU_Sample::acceleration_size() const {
  return _internal_acceleration_size();
}
inline void IMU_Sample::clear_acceleration() {
  acceleration_.Clear();
}
inline float IMU_Sample::_internal_acceleration(int index) const {
  return acceleration_.Get(index);
}
inline float IMU_Sample::acceleration(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.IMU.Sample.acceleration)
  return _internal_acceleration(index);
}
inline void IMU_Sample::set_acceleration(int index, float value) {
  acceleration_.Set(index, value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.IMU.Sample.acceleration)
}
inline void IMU_Sample::_internal_add_acceleration(float value) {
  acceleration_.Add(value);
}
inline void IMU_Sample::add_acceleration(float value) {
  _internal_add_acceleration(value);
  // @@protoc_insertion_point(field_add:blickfeld.protocol.data.IMU.Sample.acceleration)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
IMU_Sample::_internal_acceleration() const {
  return acceleration_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
IMU_Sample::acceleration() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.data.IMU.Sample.acceleration)
  return _internal_acceleration();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
IMU_Sample::_internal_mutable_acceleration() {
  return &acceleration_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
IMU_Sample::mutable_acceleration() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.data.IMU.Sample.acceleration)
  return _internal_mutable_acceleration();
}

// repeated float angular_velocity = 3 [packed = true, (.blickfeld.protocol.length) = 3];
inline int IMU_Sample::_internal_angular_velocity_size() const {
  return angular_velocity_.size();
}
inline int IMU_Sample::angular_velocity_size() const {
  return _internal_angular_velocity_size();
}
inline void IMU_Sample::clear_angular_velocity() {
  angular_velocity_.Clear();
}
inline float IMU_Sample::_internal_angular_velocity(int index) const {
  return angular_velocity_.Get(index);
}
inline float IMU_Sample::angular_velocity(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.IMU.Sample.angular_velocity)
  return _internal_angular_velocity(index);
}
inline void IMU_Sample::set_angular_velocity(int index, float value) {
  angular_velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.IMU.Sample.angular_velocity)
}
inline void IMU_Sample::_internal_add_angular_velocity(float value) {
  angular_velocity_.Add(value);
}
inline void IMU_Sample::add_angular_velocity(float value) {
  _internal_add_angular_velocity(value);
  // @@protoc_insertion_point(field_add:blickfeld.protocol.data.IMU.Sample.angular_velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
IMU_Sample::_internal_angular_velocity() const {
  return angular_velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
IMU_Sample::angular_velocity() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.data.IMU.Sample.angular_velocity)
  return _internal_angular_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
IMU_Sample::_internal_mutable_angular_velocity() {
  return &angular_velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
IMU_Sample::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.data.IMU.Sample.angular_velocity)
  return _internal_mutable_angular_velocity();
}

// -------------------------------------------------------------------

// IMU_Packed

// optional uint32 length = 1;
inline bool IMU_Packed::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IMU_Packed::has_length() const {
  return _internal_has_length();
}
inline void IMU_Packed::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMU_Packed::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMU_Packed::length() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.IMU.Packed.length)
  return _internal_length();
}
inline void IMU_Packed::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  length_ = value;
}
inline void IMU_Packed::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.IMU.Packed.length)
}

// optional bytes start_offset_ns = 2;
inline bool IMU_Packed::_internal_has_start_offset_ns() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IMU_Packed::has_start_offset_ns() const {
  return _internal_has_start_offset_ns();
}
inline void IMU_Packed::clear_start_offset_ns() {
  start_offset_ns_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IMU_Packed::start_offset_ns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.IMU.Packed.start_offset_ns)
  return _internal_start_offset_ns();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void IMU_Packed::set_start_offset_ns(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 start_offset_ns_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.IMU.Packed.start_offset_ns)
}
inline std::string* IMU_Packed::mutable_start_offset_ns() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.IMU.Packed.start_offset_ns)
  return _internal_mutable_start_offset_ns();
}
inline const std::string& IMU_Packed::_internal_start_offset_ns() const {
  return start_offset_ns_.Get();
}
inline void IMU_Packed::_internal_set_start_offset_ns(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  start_offset_ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* IMU_Packed::_internal_mutable_start_offset_ns() {
  _has_bits_[0] |= 0x00000001u;
  return start_offset_ns_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IMU_Packed::release_start_offset_ns() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.IMU.Packed.start_offset_ns)
  if (!_internal_has_start_offset_ns()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return start_offset_ns_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMU_Packed::set_allocated_start_offset_ns(std::string* start_offset_ns) {
  if (start_offset_ns != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_offset_ns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_offset_ns,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.IMU.Packed.start_offset_ns)
}

// optional bytes acceleration = 3;
inline bool IMU_Packed::_internal_has_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IMU_Packed::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void IMU_Packed::clear_acceleration() {
  acceleration_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IMU_Packed::acceleration() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.IMU.Packed.acceleration)
  return _internal_acceleration();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void IMU_Packed::set_acceleration(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 acceleration_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.IMU.Packed.acceleration)
}
inline std::string* IMU_Packed::mutable_acceleration() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.IMU.Packed.acceleration)
  return _internal_mutable_acceleration();
}
inline const std::string& IMU_Packed::_internal_acceleration() const {
  return acceleration_.Get();
}
inline void IMU_Packed::_internal_set_acceleration(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  acceleration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* IMU_Packed::_internal_mutable_acceleration() {
  _has_bits_[0] |= 0x00000002u;
  return acceleration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IMU_Packed::release_acceleration() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.IMU.Packed.acceleration)
  if (!_internal_has_acceleration()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return acceleration_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMU_Packed::set_allocated_acceleration(std::string* acceleration) {
  if (acceleration != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  acceleration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceleration,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.IMU.Packed.acceleration)
}

// optional bytes angular_velocity = 4;
inline bool IMU_Packed::_internal_has_angular_velocity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IMU_Packed::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void IMU_Packed::clear_angular_velocity() {
  angular_velocity_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IMU_Packed::angular_velocity() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.IMU.Packed.angular_velocity)
  return _internal_angular_velocity();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void IMU_Packed::set_angular_velocity(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 angular_velocity_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.IMU.Packed.angular_velocity)
}
inline std::string* IMU_Packed::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.IMU.Packed.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline const std::string& IMU_Packed::_internal_angular_velocity() const {
  return angular_velocity_.Get();
}
inline void IMU_Packed::_internal_set_angular_velocity(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  angular_velocity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* IMU_Packed::_internal_mutable_angular_velocity() {
  _has_bits_[0] |= 0x00000004u;
  return angular_velocity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IMU_Packed::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.IMU.Packed.angular_velocity)
  if (!_internal_has_angular_velocity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return angular_velocity_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMU_Packed::set_allocated_angular_velocity(std::string* angular_velocity) {
  if (angular_velocity != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  angular_velocity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), angular_velocity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.IMU.Packed.angular_velocity)
}

// -------------------------------------------------------------------

// IMU

// optional uint64 start_time_ns = 1 [(.blickfeld.protocol.optional) = true];
inline bool IMU::_internal_has_start_time_ns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IMU::has_start_time_ns() const {
  return _internal_has_start_time_ns();
}
inline void IMU::clear_start_time_ns() {
  start_time_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IMU::_internal_start_time_ns() const {
  return start_time_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IMU::start_time_ns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.IMU.start_time_ns)
  return _internal_start_time_ns();
}
inline void IMU::_internal_set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  start_time_ns_ = value;
}
inline void IMU::set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_ns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.IMU.start_time_ns)
}

// repeated .blickfeld.protocol.data.IMU.Sample samples = 2 [(.blickfeld.protocol.optional) = true];
inline int IMU::_internal_samples_size() const {
  return samples_.size();
}
inline int IMU::samples_size() const {
  return _internal_samples_size();
}
inline void IMU::clear_samples() {
  samples_.Clear();
}
inline ::blickfeld::protocol::data::IMU_Sample* IMU::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.IMU.samples)
  return samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::IMU_Sample >*
IMU::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.data.IMU.samples)
  return &samples_;
}
inline const ::blickfeld::protocol::data::IMU_Sample& IMU::_internal_samples(int index) const {
  return samples_.Get(index);
}
inline const ::blickfeld::protocol::data::IMU_Sample& IMU::samples(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.IMU.samples)
  return _internal_samples(index);
}
inline ::blickfeld::protocol::data::IMU_Sample* IMU::_internal_add_samples() {
  return samples_.Add();
}
inline ::blickfeld::protocol::data::IMU_Sample* IMU::add_samples() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.data.IMU.samples)
  return _internal_add_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::IMU_Sample >&
IMU::samples() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.data.IMU.samples)
  return samples_;
}

// optional .blickfeld.protocol.data.IMU.Packed packed = 3 [(.blickfeld.protocol.optional) = true];
inline bool IMU::_internal_has_packed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || packed_ != nullptr);
  return value;
}
inline bool IMU::has_packed() const {
  return _internal_has_packed();
}
inline void IMU::clear_packed() {
  if (packed_ != nullptr) packed_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::blickfeld::protocol::data::IMU_Packed& IMU::_internal_packed() const {
  const ::blickfeld::protocol::data::IMU_Packed* p = packed_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::data::IMU_Packed&>(
      ::blickfeld::protocol::data::_IMU_Packed_default_instance_);
}
inline const ::blickfeld::protocol::data::IMU_Packed& IMU::packed() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.IMU.packed)
  return _internal_packed();
}
inline void IMU::unsafe_arena_set_allocated_packed(
    ::blickfeld::protocol::data::IMU_Packed* packed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packed_);
  }
  packed_ = packed;
  if (packed) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.data.IMU.packed)
}
inline ::blickfeld::protocol::data::IMU_Packed* IMU::release_packed() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::data::IMU_Packed* temp = packed_;
  packed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::data::IMU_Packed* IMU::unsafe_arena_release_packed() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.IMU.packed)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::data::IMU_Packed* temp = packed_;
  packed_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::data::IMU_Packed* IMU::_internal_mutable_packed() {
  _has_bits_[0] |= 0x00000001u;
  if (packed_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::data::IMU_Packed>(GetArena());
    packed_ = p;
  }
  return packed_;
}
inline ::blickfeld::protocol::data::IMU_Packed* IMU::mutable_packed() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.IMU.packed)
  return _internal_mutable_packed();
}
inline void IMU::set_allocated_packed(::blickfeld::protocol::data::IMU_Packed* packed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete packed_;
  }
  if (packed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(packed);
    if (message_arena != submessage_arena) {
      packed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  packed_ = packed;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.IMU.packed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fimu_2eproto
