// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/data/algorithm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2falgorithm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2falgorithm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fdata_2falgorithm_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fdata_2falgorithm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fdata_2falgorithm_2eproto;
namespace blickfeld {
namespace protocol {
namespace data {
class Algorithm;
struct AlgorithmDefaultTypeInternal;
BF_DLLEXPORT extern AlgorithmDefaultTypeInternal _Algorithm_default_instance_;
class Algorithm_BackgroundSubtraction;
struct Algorithm_BackgroundSubtractionDefaultTypeInternal;
BF_DLLEXPORT extern Algorithm_BackgroundSubtractionDefaultTypeInternal _Algorithm_BackgroundSubtraction_default_instance_;
class Algorithm_NeighborFilter;
struct Algorithm_NeighborFilterDefaultTypeInternal;
BF_DLLEXPORT extern Algorithm_NeighborFilterDefaultTypeInternal _Algorithm_NeighborFilter_default_instance_;
class Algorithm_StaticTransformation;
struct Algorithm_StaticTransformationDefaultTypeInternal;
BF_DLLEXPORT extern Algorithm_StaticTransformationDefaultTypeInternal _Algorithm_StaticTransformation_default_instance_;
}  // namespace data
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::data::Algorithm* Arena::CreateMaybeMessage<::blickfeld::protocol::data::Algorithm>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* Arena::CreateMaybeMessage<::blickfeld::protocol::data::Algorithm_BackgroundSubtraction>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::data::Algorithm_NeighborFilter* Arena::CreateMaybeMessage<::blickfeld::protocol::data::Algorithm_NeighborFilter>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::data::Algorithm_StaticTransformation* Arena::CreateMaybeMessage<::blickfeld::protocol::data::Algorithm_StaticTransformation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace data {

// ===================================================================

class BF_DLLEXPORT Algorithm_BackgroundSubtraction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.Algorithm.BackgroundSubtraction) */ {
 public:
  inline Algorithm_BackgroundSubtraction() : Algorithm_BackgroundSubtraction(nullptr) {}
  ~Algorithm_BackgroundSubtraction() override;
  explicit constexpr Algorithm_BackgroundSubtraction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Algorithm_BackgroundSubtraction(const Algorithm_BackgroundSubtraction& from);
  Algorithm_BackgroundSubtraction(Algorithm_BackgroundSubtraction&& from) noexcept
    : Algorithm_BackgroundSubtraction() {
    *this = ::std::move(from);
  }

  inline Algorithm_BackgroundSubtraction& operator=(const Algorithm_BackgroundSubtraction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Algorithm_BackgroundSubtraction& operator=(Algorithm_BackgroundSubtraction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Algorithm_BackgroundSubtraction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Algorithm_BackgroundSubtraction* internal_default_instance() {
    return reinterpret_cast<const Algorithm_BackgroundSubtraction*>(
               &_Algorithm_BackgroundSubtraction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Algorithm_BackgroundSubtraction& a, Algorithm_BackgroundSubtraction& b) {
    a.Swap(&b);
  }
  inline void Swap(Algorithm_BackgroundSubtraction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Algorithm_BackgroundSubtraction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Algorithm_BackgroundSubtraction* New() const final {
    return CreateMaybeMessage<Algorithm_BackgroundSubtraction>(nullptr);
  }

  Algorithm_BackgroundSubtraction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Algorithm_BackgroundSubtraction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Algorithm_BackgroundSubtraction& from);
  void MergeFrom(const Algorithm_BackgroundSubtraction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Algorithm_BackgroundSubtraction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.Algorithm.BackgroundSubtraction";
  }
  protected:
  explicit Algorithm_BackgroundSubtraction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.Algorithm.BackgroundSubtraction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fdata_2falgorithm_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Algorithm_NeighborFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.Algorithm.NeighborFilter) */ {
 public:
  inline Algorithm_NeighborFilter() : Algorithm_NeighborFilter(nullptr) {}
  ~Algorithm_NeighborFilter() override;
  explicit constexpr Algorithm_NeighborFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Algorithm_NeighborFilter(const Algorithm_NeighborFilter& from);
  Algorithm_NeighborFilter(Algorithm_NeighborFilter&& from) noexcept
    : Algorithm_NeighborFilter() {
    *this = ::std::move(from);
  }

  inline Algorithm_NeighborFilter& operator=(const Algorithm_NeighborFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Algorithm_NeighborFilter& operator=(Algorithm_NeighborFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Algorithm_NeighborFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Algorithm_NeighborFilter* internal_default_instance() {
    return reinterpret_cast<const Algorithm_NeighborFilter*>(
               &_Algorithm_NeighborFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Algorithm_NeighborFilter& a, Algorithm_NeighborFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(Algorithm_NeighborFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Algorithm_NeighborFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Algorithm_NeighborFilter* New() const final {
    return CreateMaybeMessage<Algorithm_NeighborFilter>(nullptr);
  }

  Algorithm_NeighborFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Algorithm_NeighborFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Algorithm_NeighborFilter& from);
  void MergeFrom(const Algorithm_NeighborFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Algorithm_NeighborFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.Algorithm.NeighborFilter";
  }
  protected:
  explicit Algorithm_NeighborFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.Algorithm.NeighborFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fdata_2falgorithm_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Algorithm_StaticTransformation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.Algorithm.StaticTransformation) */ {
 public:
  inline Algorithm_StaticTransformation() : Algorithm_StaticTransformation(nullptr) {}
  ~Algorithm_StaticTransformation() override;
  explicit constexpr Algorithm_StaticTransformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Algorithm_StaticTransformation(const Algorithm_StaticTransformation& from);
  Algorithm_StaticTransformation(Algorithm_StaticTransformation&& from) noexcept
    : Algorithm_StaticTransformation() {
    *this = ::std::move(from);
  }

  inline Algorithm_StaticTransformation& operator=(const Algorithm_StaticTransformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Algorithm_StaticTransformation& operator=(Algorithm_StaticTransformation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Algorithm_StaticTransformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Algorithm_StaticTransformation* internal_default_instance() {
    return reinterpret_cast<const Algorithm_StaticTransformation*>(
               &_Algorithm_StaticTransformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Algorithm_StaticTransformation& a, Algorithm_StaticTransformation& b) {
    a.Swap(&b);
  }
  inline void Swap(Algorithm_StaticTransformation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Algorithm_StaticTransformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Algorithm_StaticTransformation* New() const final {
    return CreateMaybeMessage<Algorithm_StaticTransformation>(nullptr);
  }

  Algorithm_StaticTransformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Algorithm_StaticTransformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Algorithm_StaticTransformation& from);
  void MergeFrom(const Algorithm_StaticTransformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Algorithm_StaticTransformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.Algorithm.StaticTransformation";
  }
  protected:
  explicit Algorithm_StaticTransformation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.Algorithm.StaticTransformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fdata_2falgorithm_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Algorithm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.Algorithm) */ {
 public:
  inline Algorithm() : Algorithm(nullptr) {}
  ~Algorithm() override;
  explicit constexpr Algorithm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Algorithm(const Algorithm& from);
  Algorithm(Algorithm&& from) noexcept
    : Algorithm() {
    *this = ::std::move(from);
  }

  inline Algorithm& operator=(const Algorithm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Algorithm& operator=(Algorithm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Algorithm& default_instance() {
    return *internal_default_instance();
  }
  enum AlgoCase {
    kBackgroundSubtraction = 1,
    kNeighborFilter = 2,
    kStaticTransformation = 3,
    ALGO_NOT_SET = 0,
  };

  static inline const Algorithm* internal_default_instance() {
    return reinterpret_cast<const Algorithm*>(
               &_Algorithm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Algorithm& a, Algorithm& b) {
    a.Swap(&b);
  }
  inline void Swap(Algorithm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Algorithm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Algorithm* New() const final {
    return CreateMaybeMessage<Algorithm>(nullptr);
  }

  Algorithm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Algorithm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Algorithm& from);
  void MergeFrom(const Algorithm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Algorithm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.Algorithm";
  }
  protected:
  explicit Algorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Algorithm_BackgroundSubtraction BackgroundSubtraction;
  typedef Algorithm_NeighborFilter NeighborFilter;
  typedef Algorithm_StaticTransformation StaticTransformation;

  // accessors -------------------------------------------------------

  enum : int {
    kExecutionTimeFieldNumber = 100,
    kBackgroundSubtractionFieldNumber = 1,
    kNeighborFilterFieldNumber = 2,
    kStaticTransformationFieldNumber = 3,
  };
  // optional float execution_time = 100;
  bool has_execution_time() const;
  private:
  bool _internal_has_execution_time() const;
  public:
  void clear_execution_time();
  float execution_time() const;
  void set_execution_time(float value);
  private:
  float _internal_execution_time() const;
  void _internal_set_execution_time(float value);
  public:

  // .blickfeld.protocol.data.Algorithm.BackgroundSubtraction background_subtraction = 1;
  bool has_background_subtraction() const;
  private:
  bool _internal_has_background_subtraction() const;
  public:
  void clear_background_subtraction();
  const ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction& background_subtraction() const;
  ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* release_background_subtraction();
  ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* mutable_background_subtraction();
  void set_allocated_background_subtraction(::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* background_subtraction);
  private:
  const ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction& _internal_background_subtraction() const;
  ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* _internal_mutable_background_subtraction();
  public:
  void unsafe_arena_set_allocated_background_subtraction(
      ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* background_subtraction);
  ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* unsafe_arena_release_background_subtraction();

  // .blickfeld.protocol.data.Algorithm.NeighborFilter neighbor_filter = 2;
  bool has_neighbor_filter() const;
  private:
  bool _internal_has_neighbor_filter() const;
  public:
  void clear_neighbor_filter();
  const ::blickfeld::protocol::data::Algorithm_NeighborFilter& neighbor_filter() const;
  ::blickfeld::protocol::data::Algorithm_NeighborFilter* release_neighbor_filter();
  ::blickfeld::protocol::data::Algorithm_NeighborFilter* mutable_neighbor_filter();
  void set_allocated_neighbor_filter(::blickfeld::protocol::data::Algorithm_NeighborFilter* neighbor_filter);
  private:
  const ::blickfeld::protocol::data::Algorithm_NeighborFilter& _internal_neighbor_filter() const;
  ::blickfeld::protocol::data::Algorithm_NeighborFilter* _internal_mutable_neighbor_filter();
  public:
  void unsafe_arena_set_allocated_neighbor_filter(
      ::blickfeld::protocol::data::Algorithm_NeighborFilter* neighbor_filter);
  ::blickfeld::protocol::data::Algorithm_NeighborFilter* unsafe_arena_release_neighbor_filter();

  // .blickfeld.protocol.data.Algorithm.StaticTransformation static_transformation = 3;
  bool has_static_transformation() const;
  private:
  bool _internal_has_static_transformation() const;
  public:
  void clear_static_transformation();
  const ::blickfeld::protocol::data::Algorithm_StaticTransformation& static_transformation() const;
  ::blickfeld::protocol::data::Algorithm_StaticTransformation* release_static_transformation();
  ::blickfeld::protocol::data::Algorithm_StaticTransformation* mutable_static_transformation();
  void set_allocated_static_transformation(::blickfeld::protocol::data::Algorithm_StaticTransformation* static_transformation);
  private:
  const ::blickfeld::protocol::data::Algorithm_StaticTransformation& _internal_static_transformation() const;
  ::blickfeld::protocol::data::Algorithm_StaticTransformation* _internal_mutable_static_transformation();
  public:
  void unsafe_arena_set_allocated_static_transformation(
      ::blickfeld::protocol::data::Algorithm_StaticTransformation* static_transformation);
  ::blickfeld::protocol::data::Algorithm_StaticTransformation* unsafe_arena_release_static_transformation();

  void clear_algo();
  AlgoCase algo_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.Algorithm)
 private:
  class _Internal;
  void set_has_background_subtraction();
  void set_has_neighbor_filter();
  void set_has_static_transformation();

  inline bool has_algo() const;
  inline void clear_has_algo();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float execution_time_;
  union AlgoUnion {
    constexpr AlgoUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* background_subtraction_;
    ::blickfeld::protocol::data::Algorithm_NeighborFilter* neighbor_filter_;
    ::blickfeld::protocol::data::Algorithm_StaticTransformation* static_transformation_;
  } algo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fdata_2falgorithm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Algorithm_BackgroundSubtraction

// -------------------------------------------------------------------

// Algorithm_NeighborFilter

// -------------------------------------------------------------------

// Algorithm_StaticTransformation

// -------------------------------------------------------------------

// Algorithm

// .blickfeld.protocol.data.Algorithm.BackgroundSubtraction background_subtraction = 1;
inline bool Algorithm::_internal_has_background_subtraction() const {
  return algo_case() == kBackgroundSubtraction;
}
inline bool Algorithm::has_background_subtraction() const {
  return _internal_has_background_subtraction();
}
inline void Algorithm::set_has_background_subtraction() {
  _oneof_case_[0] = kBackgroundSubtraction;
}
inline void Algorithm::clear_background_subtraction() {
  if (_internal_has_background_subtraction()) {
    if (GetArena() == nullptr) {
      delete algo_.background_subtraction_;
    }
    clear_has_algo();
  }
}
inline ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* Algorithm::release_background_subtraction() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Algorithm.background_subtraction)
  if (_internal_has_background_subtraction()) {
    clear_has_algo();
      ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* temp = algo_.background_subtraction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    algo_.background_subtraction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction& Algorithm::_internal_background_subtraction() const {
  return _internal_has_background_subtraction()
      ? *algo_.background_subtraction_
      : reinterpret_cast< ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction&>(::blickfeld::protocol::data::_Algorithm_BackgroundSubtraction_default_instance_);
}
inline const ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction& Algorithm::background_subtraction() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Algorithm.background_subtraction)
  return _internal_background_subtraction();
}
inline ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* Algorithm::unsafe_arena_release_background_subtraction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.data.Algorithm.background_subtraction)
  if (_internal_has_background_subtraction()) {
    clear_has_algo();
    ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* temp = algo_.background_subtraction_;
    algo_.background_subtraction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Algorithm::unsafe_arena_set_allocated_background_subtraction(::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* background_subtraction) {
  clear_algo();
  if (background_subtraction) {
    set_has_background_subtraction();
    algo_.background_subtraction_ = background_subtraction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.data.Algorithm.background_subtraction)
}
inline ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* Algorithm::_internal_mutable_background_subtraction() {
  if (!_internal_has_background_subtraction()) {
    clear_algo();
    set_has_background_subtraction();
    algo_.background_subtraction_ = CreateMaybeMessage< ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction >(GetArena());
  }
  return algo_.background_subtraction_;
}
inline ::blickfeld::protocol::data::Algorithm_BackgroundSubtraction* Algorithm::mutable_background_subtraction() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Algorithm.background_subtraction)
  return _internal_mutable_background_subtraction();
}

// .blickfeld.protocol.data.Algorithm.NeighborFilter neighbor_filter = 2;
inline bool Algorithm::_internal_has_neighbor_filter() const {
  return algo_case() == kNeighborFilter;
}
inline bool Algorithm::has_neighbor_filter() const {
  return _internal_has_neighbor_filter();
}
inline void Algorithm::set_has_neighbor_filter() {
  _oneof_case_[0] = kNeighborFilter;
}
inline void Algorithm::clear_neighbor_filter() {
  if (_internal_has_neighbor_filter()) {
    if (GetArena() == nullptr) {
      delete algo_.neighbor_filter_;
    }
    clear_has_algo();
  }
}
inline ::blickfeld::protocol::data::Algorithm_NeighborFilter* Algorithm::release_neighbor_filter() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Algorithm.neighbor_filter)
  if (_internal_has_neighbor_filter()) {
    clear_has_algo();
      ::blickfeld::protocol::data::Algorithm_NeighborFilter* temp = algo_.neighbor_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    algo_.neighbor_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::data::Algorithm_NeighborFilter& Algorithm::_internal_neighbor_filter() const {
  return _internal_has_neighbor_filter()
      ? *algo_.neighbor_filter_
      : reinterpret_cast< ::blickfeld::protocol::data::Algorithm_NeighborFilter&>(::blickfeld::protocol::data::_Algorithm_NeighborFilter_default_instance_);
}
inline const ::blickfeld::protocol::data::Algorithm_NeighborFilter& Algorithm::neighbor_filter() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Algorithm.neighbor_filter)
  return _internal_neighbor_filter();
}
inline ::blickfeld::protocol::data::Algorithm_NeighborFilter* Algorithm::unsafe_arena_release_neighbor_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.data.Algorithm.neighbor_filter)
  if (_internal_has_neighbor_filter()) {
    clear_has_algo();
    ::blickfeld::protocol::data::Algorithm_NeighborFilter* temp = algo_.neighbor_filter_;
    algo_.neighbor_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Algorithm::unsafe_arena_set_allocated_neighbor_filter(::blickfeld::protocol::data::Algorithm_NeighborFilter* neighbor_filter) {
  clear_algo();
  if (neighbor_filter) {
    set_has_neighbor_filter();
    algo_.neighbor_filter_ = neighbor_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.data.Algorithm.neighbor_filter)
}
inline ::blickfeld::protocol::data::Algorithm_NeighborFilter* Algorithm::_internal_mutable_neighbor_filter() {
  if (!_internal_has_neighbor_filter()) {
    clear_algo();
    set_has_neighbor_filter();
    algo_.neighbor_filter_ = CreateMaybeMessage< ::blickfeld::protocol::data::Algorithm_NeighborFilter >(GetArena());
  }
  return algo_.neighbor_filter_;
}
inline ::blickfeld::protocol::data::Algorithm_NeighborFilter* Algorithm::mutable_neighbor_filter() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Algorithm.neighbor_filter)
  return _internal_mutable_neighbor_filter();
}

// .blickfeld.protocol.data.Algorithm.StaticTransformation static_transformation = 3;
inline bool Algorithm::_internal_has_static_transformation() const {
  return algo_case() == kStaticTransformation;
}
inline bool Algorithm::has_static_transformation() const {
  return _internal_has_static_transformation();
}
inline void Algorithm::set_has_static_transformation() {
  _oneof_case_[0] = kStaticTransformation;
}
inline void Algorithm::clear_static_transformation() {
  if (_internal_has_static_transformation()) {
    if (GetArena() == nullptr) {
      delete algo_.static_transformation_;
    }
    clear_has_algo();
  }
}
inline ::blickfeld::protocol::data::Algorithm_StaticTransformation* Algorithm::release_static_transformation() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Algorithm.static_transformation)
  if (_internal_has_static_transformation()) {
    clear_has_algo();
      ::blickfeld::protocol::data::Algorithm_StaticTransformation* temp = algo_.static_transformation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    algo_.static_transformation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::data::Algorithm_StaticTransformation& Algorithm::_internal_static_transformation() const {
  return _internal_has_static_transformation()
      ? *algo_.static_transformation_
      : reinterpret_cast< ::blickfeld::protocol::data::Algorithm_StaticTransformation&>(::blickfeld::protocol::data::_Algorithm_StaticTransformation_default_instance_);
}
inline const ::blickfeld::protocol::data::Algorithm_StaticTransformation& Algorithm::static_transformation() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Algorithm.static_transformation)
  return _internal_static_transformation();
}
inline ::blickfeld::protocol::data::Algorithm_StaticTransformation* Algorithm::unsafe_arena_release_static_transformation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.data.Algorithm.static_transformation)
  if (_internal_has_static_transformation()) {
    clear_has_algo();
    ::blickfeld::protocol::data::Algorithm_StaticTransformation* temp = algo_.static_transformation_;
    algo_.static_transformation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Algorithm::unsafe_arena_set_allocated_static_transformation(::blickfeld::protocol::data::Algorithm_StaticTransformation* static_transformation) {
  clear_algo();
  if (static_transformation) {
    set_has_static_transformation();
    algo_.static_transformation_ = static_transformation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.data.Algorithm.static_transformation)
}
inline ::blickfeld::protocol::data::Algorithm_StaticTransformation* Algorithm::_internal_mutable_static_transformation() {
  if (!_internal_has_static_transformation()) {
    clear_algo();
    set_has_static_transformation();
    algo_.static_transformation_ = CreateMaybeMessage< ::blickfeld::protocol::data::Algorithm_StaticTransformation >(GetArena());
  }
  return algo_.static_transformation_;
}
inline ::blickfeld::protocol::data::Algorithm_StaticTransformation* Algorithm::mutable_static_transformation() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Algorithm.static_transformation)
  return _internal_mutable_static_transformation();
}

// optional float execution_time = 100;
inline bool Algorithm::_internal_has_execution_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Algorithm::has_execution_time() const {
  return _internal_has_execution_time();
}
inline void Algorithm::clear_execution_time() {
  execution_time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Algorithm::_internal_execution_time() const {
  return execution_time_;
}
inline float Algorithm::execution_time() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Algorithm.execution_time)
  return _internal_execution_time();
}
inline void Algorithm::_internal_set_execution_time(float value) {
  _has_bits_[0] |= 0x00000001u;
  execution_time_ = value;
}
inline void Algorithm::set_execution_time(float value) {
  _internal_set_execution_time(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Algorithm.execution_time)
}

inline bool Algorithm::has_algo() const {
  return algo_case() != ALGO_NOT_SET;
}
inline void Algorithm::clear_has_algo() {
  _oneof_case_[0] = ALGO_NOT_SET;
}
inline Algorithm::AlgoCase Algorithm::algo_case() const {
  return Algorithm::AlgoCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2falgorithm_2eproto
