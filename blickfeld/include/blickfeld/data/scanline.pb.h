// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/data/scanline.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fscanline_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fscanline_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/data/point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fdata_2fscanline_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fdata_2fscanline_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fdata_2fscanline_2eproto;
namespace blickfeld {
namespace protocol {
namespace data {
class Scanline;
struct ScanlineDefaultTypeInternal;
BF_DLLEXPORT extern ScanlineDefaultTypeInternal _Scanline_default_instance_;
}  // namespace data
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::data::Scanline* Arena::CreateMaybeMessage<::blickfeld::protocol::data::Scanline>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace data {

// ===================================================================

class BF_DLLEXPORT Scanline PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.Scanline) */ {
 public:
  inline Scanline() : Scanline(nullptr) {}
  ~Scanline() override;
  explicit constexpr Scanline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scanline(const Scanline& from);
  Scanline(Scanline&& from) noexcept
    : Scanline() {
    *this = ::std::move(from);
  }

  inline Scanline& operator=(const Scanline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scanline& operator=(Scanline&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scanline& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scanline* internal_default_instance() {
    return reinterpret_cast<const Scanline*>(
               &_Scanline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scanline& a, Scanline& b) {
    a.Swap(&b);
  }
  inline void Swap(Scanline* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scanline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scanline* New() const final {
    return CreateMaybeMessage<Scanline>(nullptr);
  }

  Scanline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scanline>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scanline& from);
  void MergeFrom(const Scanline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scanline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.Scanline";
  }
  protected:
  explicit Scanline(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kIdFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kStartOffsetNsFieldNumber = 4,
  };
  // repeated .blickfeld.protocol.data.Point points = 3 [(.blickfeld.protocol.optional) = true];
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::blickfeld::protocol::data::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Point >*
      mutable_points();
  private:
  const ::blickfeld::protocol::data::Point& _internal_points(int index) const;
  ::blickfeld::protocol::data::Point* _internal_add_points();
  public:
  const ::blickfeld::protocol::data::Point& points(int index) const;
  ::blickfeld::protocol::data::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Point >&
      points() const;

  // optional uint64 id = 1 [(.blickfeld.protocol.optional) = true];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 frame_id = 2 [(.blickfeld.protocol.optional) = true];
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 start_offset_ns = 4 [(.blickfeld.protocol.optional) = true];
  bool has_start_offset_ns() const;
  private:
  bool _internal_has_start_offset_ns() const;
  public:
  void clear_start_offset_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_ns() const;
  void set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_offset_ns() const;
  void _internal_set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.Scanline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Point > points_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_ns_;
  friend struct ::TableStruct_blickfeld_2fdata_2fscanline_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scanline

// optional uint64 id = 1 [(.blickfeld.protocol.optional) = true];
inline bool Scanline::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Scanline::has_id() const {
  return _internal_has_id();
}
inline void Scanline::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Scanline::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Scanline::id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Scanline.id)
  return _internal_id();
}
inline void Scanline::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Scanline::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Scanline.id)
}

// optional uint64 frame_id = 2 [(.blickfeld.protocol.optional) = true];
inline bool Scanline::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Scanline::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void Scanline::clear_frame_id() {
  frame_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Scanline::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Scanline::frame_id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Scanline.frame_id)
  return _internal_frame_id();
}
inline void Scanline::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_id_ = value;
}
inline void Scanline::set_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Scanline.frame_id)
}

// repeated .blickfeld.protocol.data.Point points = 3 [(.blickfeld.protocol.optional) = true];
inline int Scanline::_internal_points_size() const {
  return points_.size();
}
inline int Scanline::points_size() const {
  return _internal_points_size();
}
inline ::blickfeld::protocol::data::Point* Scanline::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Scanline.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Point >*
Scanline::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.data.Scanline.points)
  return &points_;
}
inline const ::blickfeld::protocol::data::Point& Scanline::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::blickfeld::protocol::data::Point& Scanline::points(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Scanline.points)
  return _internal_points(index);
}
inline ::blickfeld::protocol::data::Point* Scanline::_internal_add_points() {
  return points_.Add();
}
inline ::blickfeld::protocol::data::Point* Scanline::add_points() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.data.Scanline.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Point >&
Scanline::points() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.data.Scanline.points)
  return points_;
}

// optional uint64 start_offset_ns = 4 [(.blickfeld.protocol.optional) = true];
inline bool Scanline::_internal_has_start_offset_ns() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Scanline::has_start_offset_ns() const {
  return _internal_has_start_offset_ns();
}
inline void Scanline::clear_start_offset_ns() {
  start_offset_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Scanline::_internal_start_offset_ns() const {
  return start_offset_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Scanline::start_offset_ns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Scanline.start_offset_ns)
  return _internal_start_offset_ns();
}
inline void Scanline::_internal_set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  start_offset_ns_ = value;
}
inline void Scanline::set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_offset_ns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Scanline.start_offset_ns)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fscanline_2eproto
