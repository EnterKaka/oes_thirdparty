// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/data/frame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fframe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fframe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/config/scan_pattern.pb.h"
#include "blickfeld/data/scanline.pb.h"
#include "blickfeld/data/algorithm.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fdata_2fframe_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fdata_2fframe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fdata_2fframe_2eproto;
namespace blickfeld {
namespace protocol {
namespace data {
class Frame;
struct FrameDefaultTypeInternal;
BF_DLLEXPORT extern FrameDefaultTypeInternal _Frame_default_instance_;
class Frame_Packed;
struct Frame_PackedDefaultTypeInternal;
BF_DLLEXPORT extern Frame_PackedDefaultTypeInternal _Frame_Packed_default_instance_;
}  // namespace data
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::data::Frame* Arena::CreateMaybeMessage<::blickfeld::protocol::data::Frame>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::data::Frame_Packed* Arena::CreateMaybeMessage<::blickfeld::protocol::data::Frame_Packed>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace data {

// ===================================================================

class BF_DLLEXPORT Frame_Packed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.Frame.Packed) */ {
 public:
  inline Frame_Packed() : Frame_Packed(nullptr) {}
  ~Frame_Packed() override;
  explicit constexpr Frame_Packed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame_Packed(const Frame_Packed& from);
  Frame_Packed(Frame_Packed&& from) noexcept
    : Frame_Packed() {
    *this = ::std::move(from);
  }

  inline Frame_Packed& operator=(const Frame_Packed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame_Packed& operator=(Frame_Packed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame_Packed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame_Packed* internal_default_instance() {
    return reinterpret_cast<const Frame_Packed*>(
               &_Frame_Packed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Frame_Packed& a, Frame_Packed& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame_Packed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame_Packed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame_Packed* New() const final {
    return CreateMaybeMessage<Frame_Packed>(nullptr);
  }

  Frame_Packed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame_Packed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame_Packed& from);
  void MergeFrom(const Frame_Packed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame_Packed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.Frame.Packed";
  }
  protected:
  explicit Frame_Packed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCartesianFieldNumber = 2,
    kDirectionFieldNumber = 3,
    kRangeFieldNumber = 4,
    kIntensityFieldNumber = 5,
    kAmbientLightLevelFieldNumber = 6,
    kStartOffsetNsFieldNumber = 7,
    kPointIdFieldNumber = 8,
    kChannelIdFieldNumber = 9,
    kReturnIdFieldNumber = 10,
    kLengthFieldNumber = 1,
  };
  // optional bytes cartesian = 2 [(.blickfeld.protocol.optional) = true];
  bool has_cartesian() const;
  private:
  bool _internal_has_cartesian() const;
  public:
  void clear_cartesian();
  const std::string& cartesian() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cartesian(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cartesian();
  std::string* release_cartesian();
  void set_allocated_cartesian(std::string* cartesian);
  private:
  const std::string& _internal_cartesian() const;
  void _internal_set_cartesian(const std::string& value);
  std::string* _internal_mutable_cartesian();
  public:

  // optional bytes direction = 3 [(.blickfeld.protocol.optional) = true];
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const std::string& direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction();
  std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  private:
  const std::string& _internal_direction() const;
  void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // optional bytes range = 4 [(.blickfeld.protocol.optional) = true];
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const std::string& range() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_range(ArgT0&& arg0, ArgT... args);
  std::string* mutable_range();
  std::string* release_range();
  void set_allocated_range(std::string* range);
  private:
  const std::string& _internal_range() const;
  void _internal_set_range(const std::string& value);
  std::string* _internal_mutable_range();
  public:

  // optional bytes intensity = 5 [(.blickfeld.protocol.optional) = true];
  bool has_intensity() const;
  private:
  bool _internal_has_intensity() const;
  public:
  void clear_intensity();
  const std::string& intensity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intensity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intensity();
  std::string* release_intensity();
  void set_allocated_intensity(std::string* intensity);
  private:
  const std::string& _internal_intensity() const;
  void _internal_set_intensity(const std::string& value);
  std::string* _internal_mutable_intensity();
  public:

  // optional bytes ambient_light_level = 6 [(.blickfeld.protocol.optional) = true];
  bool has_ambient_light_level() const;
  private:
  bool _internal_has_ambient_light_level() const;
  public:
  void clear_ambient_light_level();
  const std::string& ambient_light_level() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ambient_light_level(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ambient_light_level();
  std::string* release_ambient_light_level();
  void set_allocated_ambient_light_level(std::string* ambient_light_level);
  private:
  const std::string& _internal_ambient_light_level() const;
  void _internal_set_ambient_light_level(const std::string& value);
  std::string* _internal_mutable_ambient_light_level();
  public:

  // optional bytes start_offset_ns = 7 [(.blickfeld.protocol.optional) = true];
  bool has_start_offset_ns() const;
  private:
  bool _internal_has_start_offset_ns() const;
  public:
  void clear_start_offset_ns();
  const std::string& start_offset_ns() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_offset_ns(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_offset_ns();
  std::string* release_start_offset_ns();
  void set_allocated_start_offset_ns(std::string* start_offset_ns);
  private:
  const std::string& _internal_start_offset_ns() const;
  void _internal_set_start_offset_ns(const std::string& value);
  std::string* _internal_mutable_start_offset_ns();
  public:

  // optional bytes point_id = 8 [(.blickfeld.protocol.optional) = true];
  bool has_point_id() const;
  private:
  bool _internal_has_point_id() const;
  public:
  void clear_point_id();
  const std::string& point_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_id();
  std::string* release_point_id();
  void set_allocated_point_id(std::string* point_id);
  private:
  const std::string& _internal_point_id() const;
  void _internal_set_point_id(const std::string& value);
  std::string* _internal_mutable_point_id();
  public:

  // optional bytes channel_id = 9 [(.blickfeld.protocol.optional) = true];
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  const std::string& channel_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_id();
  std::string* release_channel_id();
  void set_allocated_channel_id(std::string* channel_id);
  private:
  const std::string& _internal_channel_id() const;
  void _internal_set_channel_id(const std::string& value);
  std::string* _internal_mutable_channel_id();
  public:

  // optional bytes return_id = 10 [(.blickfeld.protocol.optional) = true];
  bool has_return_id() const;
  private:
  bool _internal_has_return_id() const;
  public:
  void clear_return_id();
  const std::string& return_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_return_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_return_id();
  std::string* release_return_id();
  void set_allocated_return_id(std::string* return_id);
  private:
  const std::string& _internal_return_id() const;
  void _internal_set_return_id(const std::string& value);
  std::string* _internal_mutable_return_id();
  public:

  // optional uint32 length = 1;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.Frame.Packed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cartesian_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intensity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ambient_light_level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_offset_ns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr return_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  friend struct ::TableStruct_blickfeld_2fdata_2fframe_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit constexpr Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Frame_Packed Packed;

  // accessors -------------------------------------------------------

  enum : int {
    kScanlinesFieldNumber = 2,
    kAlgorithmsFieldNumber = 10,
    kScanPatternFieldNumber = 5,
    kPackedFieldNumber = 8,
    kIdFieldNumber = 1,
    kStartTimeNsFieldNumber = 3,
    kTotalNumberOfPointsFieldNumber = 6,
    kTotalNumberOfReturnsFieldNumber = 7,
    kIsRampUpPhaseFieldNumber = 9,
  };
  // repeated .blickfeld.protocol.data.Scanline scanlines = 2 [(.blickfeld.protocol.optional) = true];
  int scanlines_size() const;
  private:
  int _internal_scanlines_size() const;
  public:
  void clear_scanlines();
  ::blickfeld::protocol::data::Scanline* mutable_scanlines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Scanline >*
      mutable_scanlines();
  private:
  const ::blickfeld::protocol::data::Scanline& _internal_scanlines(int index) const;
  ::blickfeld::protocol::data::Scanline* _internal_add_scanlines();
  public:
  const ::blickfeld::protocol::data::Scanline& scanlines(int index) const;
  ::blickfeld::protocol::data::Scanline* add_scanlines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Scanline >&
      scanlines() const;

  // repeated .blickfeld.protocol.data.Algorithm algorithms = 10;
  int algorithms_size() const;
  private:
  int _internal_algorithms_size() const;
  public:
  void clear_algorithms();
  ::blickfeld::protocol::data::Algorithm* mutable_algorithms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Algorithm >*
      mutable_algorithms();
  private:
  const ::blickfeld::protocol::data::Algorithm& _internal_algorithms(int index) const;
  ::blickfeld::protocol::data::Algorithm* _internal_add_algorithms();
  public:
  const ::blickfeld::protocol::data::Algorithm& algorithms(int index) const;
  ::blickfeld::protocol::data::Algorithm* add_algorithms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Algorithm >&
      algorithms() const;

  // optional .blickfeld.protocol.config.ScanPattern scan_pattern = 5 [(.blickfeld.protocol.optional) = true];
  bool has_scan_pattern() const;
  private:
  bool _internal_has_scan_pattern() const;
  public:
  void clear_scan_pattern();
  const ::blickfeld::protocol::config::ScanPattern& scan_pattern() const;
  ::blickfeld::protocol::config::ScanPattern* release_scan_pattern();
  ::blickfeld::protocol::config::ScanPattern* mutable_scan_pattern();
  void set_allocated_scan_pattern(::blickfeld::protocol::config::ScanPattern* scan_pattern);
  private:
  const ::blickfeld::protocol::config::ScanPattern& _internal_scan_pattern() const;
  ::blickfeld::protocol::config::ScanPattern* _internal_mutable_scan_pattern();
  public:
  void unsafe_arena_set_allocated_scan_pattern(
      ::blickfeld::protocol::config::ScanPattern* scan_pattern);
  ::blickfeld::protocol::config::ScanPattern* unsafe_arena_release_scan_pattern();

  // optional .blickfeld.protocol.data.Frame.Packed packed = 8 [(.blickfeld.protocol.optional) = true];
  bool has_packed() const;
  private:
  bool _internal_has_packed() const;
  public:
  void clear_packed();
  const ::blickfeld::protocol::data::Frame_Packed& packed() const;
  ::blickfeld::protocol::data::Frame_Packed* release_packed();
  ::blickfeld::protocol::data::Frame_Packed* mutable_packed();
  void set_allocated_packed(::blickfeld::protocol::data::Frame_Packed* packed);
  private:
  const ::blickfeld::protocol::data::Frame_Packed& _internal_packed() const;
  ::blickfeld::protocol::data::Frame_Packed* _internal_mutable_packed();
  public:
  void unsafe_arena_set_allocated_packed(
      ::blickfeld::protocol::data::Frame_Packed* packed);
  ::blickfeld::protocol::data::Frame_Packed* unsafe_arena_release_packed();

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 start_time_ns = 3 [(.blickfeld.protocol.optional) = true];
  bool has_start_time_ns() const;
  private:
  bool _internal_has_start_time_ns() const;
  public:
  void clear_start_time_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_ns() const;
  void set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_ns() const;
  void _internal_set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 total_number_of_points = 6;
  bool has_total_number_of_points() const;
  private:
  bool _internal_has_total_number_of_points() const;
  public:
  void clear_total_number_of_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_number_of_points() const;
  void set_total_number_of_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_number_of_points() const;
  void _internal_set_total_number_of_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 total_number_of_returns = 7;
  bool has_total_number_of_returns() const;
  private:
  bool _internal_has_total_number_of_returns() const;
  public:
  void clear_total_number_of_returns();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_number_of_returns() const;
  void set_total_number_of_returns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_number_of_returns() const;
  void _internal_set_total_number_of_returns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_ramp_up_phase = 9 [(.blickfeld.protocol.optional) = true];
  bool has_is_ramp_up_phase() const;
  private:
  bool _internal_has_is_ramp_up_phase() const;
  public:
  void clear_is_ramp_up_phase();
  bool is_ramp_up_phase() const;
  void set_is_ramp_up_phase(bool value);
  private:
  bool _internal_is_ramp_up_phase() const;
  void _internal_set_is_ramp_up_phase(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Scanline > scanlines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Algorithm > algorithms_;
  ::blickfeld::protocol::config::ScanPattern* scan_pattern_;
  ::blickfeld::protocol::data::Frame_Packed* packed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_number_of_points_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_number_of_returns_;
  bool is_ramp_up_phase_;
  friend struct ::TableStruct_blickfeld_2fdata_2fframe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Frame_Packed

// optional uint32 length = 1;
inline bool Frame_Packed::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Frame_Packed::has_length() const {
  return _internal_has_length();
}
inline void Frame_Packed::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Frame_Packed::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Frame_Packed::length() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.Packed.length)
  return _internal_length();
}
inline void Frame_Packed::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  length_ = value;
}
inline void Frame_Packed::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.Packed.length)
}

// optional bytes cartesian = 2 [(.blickfeld.protocol.optional) = true];
inline bool Frame_Packed::_internal_has_cartesian() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Frame_Packed::has_cartesian() const {
  return _internal_has_cartesian();
}
inline void Frame_Packed::clear_cartesian() {
  cartesian_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Frame_Packed::cartesian() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.Packed.cartesian)
  return _internal_cartesian();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Frame_Packed::set_cartesian(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cartesian_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.Packed.cartesian)
}
inline std::string* Frame_Packed::mutable_cartesian() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.Packed.cartesian)
  return _internal_mutable_cartesian();
}
inline const std::string& Frame_Packed::_internal_cartesian() const {
  return cartesian_.Get();
}
inline void Frame_Packed::_internal_set_cartesian(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cartesian_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Frame_Packed::_internal_mutable_cartesian() {
  _has_bits_[0] |= 0x00000001u;
  return cartesian_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame_Packed::release_cartesian() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Frame.Packed.cartesian)
  if (!_internal_has_cartesian()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cartesian_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame_Packed::set_allocated_cartesian(std::string* cartesian) {
  if (cartesian != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cartesian_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cartesian,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Frame.Packed.cartesian)
}

// optional bytes direction = 3 [(.blickfeld.protocol.optional) = true];
inline bool Frame_Packed::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Frame_Packed::has_direction() const {
  return _internal_has_direction();
}
inline void Frame_Packed::clear_direction() {
  direction_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Frame_Packed::direction() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.Packed.direction)
  return _internal_direction();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Frame_Packed::set_direction(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 direction_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.Packed.direction)
}
inline std::string* Frame_Packed::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.Packed.direction)
  return _internal_mutable_direction();
}
inline const std::string& Frame_Packed::_internal_direction() const {
  return direction_.Get();
}
inline void Frame_Packed::_internal_set_direction(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  direction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Frame_Packed::_internal_mutable_direction() {
  _has_bits_[0] |= 0x00000002u;
  return direction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame_Packed::release_direction() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Frame.Packed.direction)
  if (!_internal_has_direction()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return direction_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame_Packed::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  direction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Frame.Packed.direction)
}

// optional bytes range = 4 [(.blickfeld.protocol.optional) = true];
inline bool Frame_Packed::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Frame_Packed::has_range() const {
  return _internal_has_range();
}
inline void Frame_Packed::clear_range() {
  range_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Frame_Packed::range() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.Packed.range)
  return _internal_range();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Frame_Packed::set_range(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 range_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.Packed.range)
}
inline std::string* Frame_Packed::mutable_range() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.Packed.range)
  return _internal_mutable_range();
}
inline const std::string& Frame_Packed::_internal_range() const {
  return range_.Get();
}
inline void Frame_Packed::_internal_set_range(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Frame_Packed::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000004u;
  return range_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame_Packed::release_range() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Frame.Packed.range)
  if (!_internal_has_range()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return range_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame_Packed::set_allocated_range(std::string* range) {
  if (range != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  range_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Frame.Packed.range)
}

// optional bytes intensity = 5 [(.blickfeld.protocol.optional) = true];
inline bool Frame_Packed::_internal_has_intensity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Frame_Packed::has_intensity() const {
  return _internal_has_intensity();
}
inline void Frame_Packed::clear_intensity() {
  intensity_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Frame_Packed::intensity() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.Packed.intensity)
  return _internal_intensity();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Frame_Packed::set_intensity(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 intensity_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.Packed.intensity)
}
inline std::string* Frame_Packed::mutable_intensity() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.Packed.intensity)
  return _internal_mutable_intensity();
}
inline const std::string& Frame_Packed::_internal_intensity() const {
  return intensity_.Get();
}
inline void Frame_Packed::_internal_set_intensity(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  intensity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Frame_Packed::_internal_mutable_intensity() {
  _has_bits_[0] |= 0x00000008u;
  return intensity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame_Packed::release_intensity() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Frame.Packed.intensity)
  if (!_internal_has_intensity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return intensity_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame_Packed::set_allocated_intensity(std::string* intensity) {
  if (intensity != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  intensity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intensity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Frame.Packed.intensity)
}

// optional bytes ambient_light_level = 6 [(.blickfeld.protocol.optional) = true];
inline bool Frame_Packed::_internal_has_ambient_light_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Frame_Packed::has_ambient_light_level() const {
  return _internal_has_ambient_light_level();
}
inline void Frame_Packed::clear_ambient_light_level() {
  ambient_light_level_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Frame_Packed::ambient_light_level() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.Packed.ambient_light_level)
  return _internal_ambient_light_level();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Frame_Packed::set_ambient_light_level(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 ambient_light_level_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.Packed.ambient_light_level)
}
inline std::string* Frame_Packed::mutable_ambient_light_level() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.Packed.ambient_light_level)
  return _internal_mutable_ambient_light_level();
}
inline const std::string& Frame_Packed::_internal_ambient_light_level() const {
  return ambient_light_level_.Get();
}
inline void Frame_Packed::_internal_set_ambient_light_level(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  ambient_light_level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Frame_Packed::_internal_mutable_ambient_light_level() {
  _has_bits_[0] |= 0x00000010u;
  return ambient_light_level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame_Packed::release_ambient_light_level() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Frame.Packed.ambient_light_level)
  if (!_internal_has_ambient_light_level()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return ambient_light_level_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame_Packed::set_allocated_ambient_light_level(std::string* ambient_light_level) {
  if (ambient_light_level != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ambient_light_level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ambient_light_level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Frame.Packed.ambient_light_level)
}

// optional bytes start_offset_ns = 7 [(.blickfeld.protocol.optional) = true];
inline bool Frame_Packed::_internal_has_start_offset_ns() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Frame_Packed::has_start_offset_ns() const {
  return _internal_has_start_offset_ns();
}
inline void Frame_Packed::clear_start_offset_ns() {
  start_offset_ns_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Frame_Packed::start_offset_ns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.Packed.start_offset_ns)
  return _internal_start_offset_ns();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Frame_Packed::set_start_offset_ns(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 start_offset_ns_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.Packed.start_offset_ns)
}
inline std::string* Frame_Packed::mutable_start_offset_ns() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.Packed.start_offset_ns)
  return _internal_mutable_start_offset_ns();
}
inline const std::string& Frame_Packed::_internal_start_offset_ns() const {
  return start_offset_ns_.Get();
}
inline void Frame_Packed::_internal_set_start_offset_ns(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  start_offset_ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Frame_Packed::_internal_mutable_start_offset_ns() {
  _has_bits_[0] |= 0x00000020u;
  return start_offset_ns_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame_Packed::release_start_offset_ns() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Frame.Packed.start_offset_ns)
  if (!_internal_has_start_offset_ns()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return start_offset_ns_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame_Packed::set_allocated_start_offset_ns(std::string* start_offset_ns) {
  if (start_offset_ns != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  start_offset_ns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_offset_ns,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Frame.Packed.start_offset_ns)
}

// optional bytes point_id = 8 [(.blickfeld.protocol.optional) = true];
inline bool Frame_Packed::_internal_has_point_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Frame_Packed::has_point_id() const {
  return _internal_has_point_id();
}
inline void Frame_Packed::clear_point_id() {
  point_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Frame_Packed::point_id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.Packed.point_id)
  return _internal_point_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Frame_Packed::set_point_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 point_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.Packed.point_id)
}
inline std::string* Frame_Packed::mutable_point_id() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.Packed.point_id)
  return _internal_mutable_point_id();
}
inline const std::string& Frame_Packed::_internal_point_id() const {
  return point_id_.Get();
}
inline void Frame_Packed::_internal_set_point_id(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  point_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Frame_Packed::_internal_mutable_point_id() {
  _has_bits_[0] |= 0x00000040u;
  return point_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame_Packed::release_point_id() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Frame.Packed.point_id)
  if (!_internal_has_point_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return point_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame_Packed::set_allocated_point_id(std::string* point_id) {
  if (point_id != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  point_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), point_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Frame.Packed.point_id)
}

// optional bytes channel_id = 9 [(.blickfeld.protocol.optional) = true];
inline bool Frame_Packed::_internal_has_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Frame_Packed::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void Frame_Packed::clear_channel_id() {
  channel_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Frame_Packed::channel_id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.Packed.channel_id)
  return _internal_channel_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Frame_Packed::set_channel_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 channel_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.Packed.channel_id)
}
inline std::string* Frame_Packed::mutable_channel_id() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.Packed.channel_id)
  return _internal_mutable_channel_id();
}
inline const std::string& Frame_Packed::_internal_channel_id() const {
  return channel_id_.Get();
}
inline void Frame_Packed::_internal_set_channel_id(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Frame_Packed::_internal_mutable_channel_id() {
  _has_bits_[0] |= 0x00000080u;
  return channel_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame_Packed::release_channel_id() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Frame.Packed.channel_id)
  if (!_internal_has_channel_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return channel_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame_Packed::set_allocated_channel_id(std::string* channel_id) {
  if (channel_id != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  channel_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Frame.Packed.channel_id)
}

// optional bytes return_id = 10 [(.blickfeld.protocol.optional) = true];
inline bool Frame_Packed::_internal_has_return_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Frame_Packed::has_return_id() const {
  return _internal_has_return_id();
}
inline void Frame_Packed::clear_return_id() {
  return_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Frame_Packed::return_id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.Packed.return_id)
  return _internal_return_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Frame_Packed::set_return_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 return_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.Packed.return_id)
}
inline std::string* Frame_Packed::mutable_return_id() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.Packed.return_id)
  return _internal_mutable_return_id();
}
inline const std::string& Frame_Packed::_internal_return_id() const {
  return return_id_.Get();
}
inline void Frame_Packed::_internal_set_return_id(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  return_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Frame_Packed::_internal_mutable_return_id() {
  _has_bits_[0] |= 0x00000100u;
  return return_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame_Packed::release_return_id() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Frame.Packed.return_id)
  if (!_internal_has_return_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return return_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame_Packed::set_allocated_return_id(std::string* return_id) {
  if (return_id != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  return_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), return_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Frame.Packed.return_id)
}

// -------------------------------------------------------------------

// Frame

// optional uint64 id = 1;
inline bool Frame::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Frame::has_id() const {
  return _internal_has_id();
}
inline void Frame::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.id)
  return _internal_id();
}
inline void Frame::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Frame::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.id)
}

// optional uint64 start_time_ns = 3 [(.blickfeld.protocol.optional) = true];
inline bool Frame::_internal_has_start_time_ns() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Frame::has_start_time_ns() const {
  return _internal_has_start_time_ns();
}
inline void Frame::clear_start_time_ns() {
  start_time_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::_internal_start_time_ns() const {
  return start_time_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::start_time_ns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.start_time_ns)
  return _internal_start_time_ns();
}
inline void Frame::_internal_set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  start_time_ns_ = value;
}
inline void Frame::set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_ns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.start_time_ns)
}

// optional .blickfeld.protocol.config.ScanPattern scan_pattern = 5 [(.blickfeld.protocol.optional) = true];
inline bool Frame::_internal_has_scan_pattern() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scan_pattern_ != nullptr);
  return value;
}
inline bool Frame::has_scan_pattern() const {
  return _internal_has_scan_pattern();
}
inline const ::blickfeld::protocol::config::ScanPattern& Frame::_internal_scan_pattern() const {
  const ::blickfeld::protocol::config::ScanPattern* p = scan_pattern_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern&>(
      ::blickfeld::protocol::config::_ScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern& Frame::scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.scan_pattern)
  return _internal_scan_pattern();
}
inline void Frame::unsafe_arena_set_allocated_scan_pattern(
    ::blickfeld::protocol::config::ScanPattern* scan_pattern) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_pattern_);
  }
  scan_pattern_ = scan_pattern;
  if (scan_pattern) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.data.Frame.scan_pattern)
}
inline ::blickfeld::protocol::config::ScanPattern* Frame::release_scan_pattern() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern* temp = scan_pattern_;
  scan_pattern_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Frame::unsafe_arena_release_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Frame.scan_pattern)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern* temp = scan_pattern_;
  scan_pattern_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Frame::_internal_mutable_scan_pattern() {
  _has_bits_[0] |= 0x00000001u;
  if (scan_pattern_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern>(GetArena());
    scan_pattern_ = p;
  }
  return scan_pattern_;
}
inline ::blickfeld::protocol::config::ScanPattern* Frame::mutable_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.scan_pattern)
  return _internal_mutable_scan_pattern();
}
inline void Frame::set_allocated_scan_pattern(::blickfeld::protocol::config::ScanPattern* scan_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_pattern_);
  }
  if (scan_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_pattern)->GetArena();
    if (message_arena != submessage_arena) {
      scan_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_pattern, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scan_pattern_ = scan_pattern;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Frame.scan_pattern)
}

// optional bool is_ramp_up_phase = 9 [(.blickfeld.protocol.optional) = true];
inline bool Frame::_internal_has_is_ramp_up_phase() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Frame::has_is_ramp_up_phase() const {
  return _internal_has_is_ramp_up_phase();
}
inline void Frame::clear_is_ramp_up_phase() {
  is_ramp_up_phase_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Frame::_internal_is_ramp_up_phase() const {
  return is_ramp_up_phase_;
}
inline bool Frame::is_ramp_up_phase() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.is_ramp_up_phase)
  return _internal_is_ramp_up_phase();
}
inline void Frame::_internal_set_is_ramp_up_phase(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_ramp_up_phase_ = value;
}
inline void Frame::set_is_ramp_up_phase(bool value) {
  _internal_set_is_ramp_up_phase(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.is_ramp_up_phase)
}

// optional uint32 total_number_of_points = 6;
inline bool Frame::_internal_has_total_number_of_points() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Frame::has_total_number_of_points() const {
  return _internal_has_total_number_of_points();
}
inline void Frame::clear_total_number_of_points() {
  total_number_of_points_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Frame::_internal_total_number_of_points() const {
  return total_number_of_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Frame::total_number_of_points() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.total_number_of_points)
  return _internal_total_number_of_points();
}
inline void Frame::_internal_set_total_number_of_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  total_number_of_points_ = value;
}
inline void Frame::set_total_number_of_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_number_of_points(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.total_number_of_points)
}

// optional uint32 total_number_of_returns = 7;
inline bool Frame::_internal_has_total_number_of_returns() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Frame::has_total_number_of_returns() const {
  return _internal_has_total_number_of_returns();
}
inline void Frame::clear_total_number_of_returns() {
  total_number_of_returns_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Frame::_internal_total_number_of_returns() const {
  return total_number_of_returns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Frame::total_number_of_returns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.total_number_of_returns)
  return _internal_total_number_of_returns();
}
inline void Frame::_internal_set_total_number_of_returns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  total_number_of_returns_ = value;
}
inline void Frame::set_total_number_of_returns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_number_of_returns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Frame.total_number_of_returns)
}

// repeated .blickfeld.protocol.data.Scanline scanlines = 2 [(.blickfeld.protocol.optional) = true];
inline int Frame::_internal_scanlines_size() const {
  return scanlines_.size();
}
inline int Frame::scanlines_size() const {
  return _internal_scanlines_size();
}
inline ::blickfeld::protocol::data::Scanline* Frame::mutable_scanlines(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.scanlines)
  return scanlines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Scanline >*
Frame::mutable_scanlines() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.data.Frame.scanlines)
  return &scanlines_;
}
inline const ::blickfeld::protocol::data::Scanline& Frame::_internal_scanlines(int index) const {
  return scanlines_.Get(index);
}
inline const ::blickfeld::protocol::data::Scanline& Frame::scanlines(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.scanlines)
  return _internal_scanlines(index);
}
inline ::blickfeld::protocol::data::Scanline* Frame::_internal_add_scanlines() {
  return scanlines_.Add();
}
inline ::blickfeld::protocol::data::Scanline* Frame::add_scanlines() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.data.Frame.scanlines)
  return _internal_add_scanlines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Scanline >&
Frame::scanlines() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.data.Frame.scanlines)
  return scanlines_;
}

// optional .blickfeld.protocol.data.Frame.Packed packed = 8 [(.blickfeld.protocol.optional) = true];
inline bool Frame::_internal_has_packed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || packed_ != nullptr);
  return value;
}
inline bool Frame::has_packed() const {
  return _internal_has_packed();
}
inline void Frame::clear_packed() {
  if (packed_ != nullptr) packed_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::blickfeld::protocol::data::Frame_Packed& Frame::_internal_packed() const {
  const ::blickfeld::protocol::data::Frame_Packed* p = packed_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::data::Frame_Packed&>(
      ::blickfeld::protocol::data::_Frame_Packed_default_instance_);
}
inline const ::blickfeld::protocol::data::Frame_Packed& Frame::packed() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.packed)
  return _internal_packed();
}
inline void Frame::unsafe_arena_set_allocated_packed(
    ::blickfeld::protocol::data::Frame_Packed* packed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packed_);
  }
  packed_ = packed;
  if (packed) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.data.Frame.packed)
}
inline ::blickfeld::protocol::data::Frame_Packed* Frame::release_packed() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::data::Frame_Packed* temp = packed_;
  packed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::data::Frame_Packed* Frame::unsafe_arena_release_packed() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Frame.packed)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::data::Frame_Packed* temp = packed_;
  packed_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::data::Frame_Packed* Frame::_internal_mutable_packed() {
  _has_bits_[0] |= 0x00000002u;
  if (packed_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::data::Frame_Packed>(GetArena());
    packed_ = p;
  }
  return packed_;
}
inline ::blickfeld::protocol::data::Frame_Packed* Frame::mutable_packed() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.packed)
  return _internal_mutable_packed();
}
inline void Frame::set_allocated_packed(::blickfeld::protocol::data::Frame_Packed* packed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete packed_;
  }
  if (packed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(packed);
    if (message_arena != submessage_arena) {
      packed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  packed_ = packed;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Frame.packed)
}

// repeated .blickfeld.protocol.data.Algorithm algorithms = 10;
inline int Frame::_internal_algorithms_size() const {
  return algorithms_.size();
}
inline int Frame::algorithms_size() const {
  return _internal_algorithms_size();
}
inline ::blickfeld::protocol::data::Algorithm* Frame::mutable_algorithms(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Frame.algorithms)
  return algorithms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Algorithm >*
Frame::mutable_algorithms() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.data.Frame.algorithms)
  return &algorithms_;
}
inline const ::blickfeld::protocol::data::Algorithm& Frame::_internal_algorithms(int index) const {
  return algorithms_.Get(index);
}
inline const ::blickfeld::protocol::data::Algorithm& Frame::algorithms(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Frame.algorithms)
  return _internal_algorithms(index);
}
inline ::blickfeld::protocol::data::Algorithm* Frame::_internal_add_algorithms() {
  return algorithms_.Add();
}
inline ::blickfeld::protocol::data::Algorithm* Frame::add_algorithms() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.data.Frame.algorithms)
  return _internal_add_algorithms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Algorithm >&
Frame::algorithms() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.data.Frame.algorithms)
  return algorithms_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fframe_2eproto
