// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/data/point.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fpoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fpoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fdata_2fpoint_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fdata_2fpoint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fdata_2fpoint_2eproto;
namespace blickfeld {
namespace protocol {
namespace data {
class Point;
struct PointDefaultTypeInternal;
BF_DLLEXPORT extern PointDefaultTypeInternal _Point_default_instance_;
class Point_Direction;
struct Point_DirectionDefaultTypeInternal;
BF_DLLEXPORT extern Point_DirectionDefaultTypeInternal _Point_Direction_default_instance_;
class Point_Return;
struct Point_ReturnDefaultTypeInternal;
BF_DLLEXPORT extern Point_ReturnDefaultTypeInternal _Point_Return_default_instance_;
}  // namespace data
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::data::Point* Arena::CreateMaybeMessage<::blickfeld::protocol::data::Point>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::data::Point_Direction* Arena::CreateMaybeMessage<::blickfeld::protocol::data::Point_Direction>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::data::Point_Return* Arena::CreateMaybeMessage<::blickfeld::protocol::data::Point_Return>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace data {

enum Point_ErrorFlag : int {
  Point_ErrorFlag_E_VIBRATION_THRESHOLD_EXCEEDED = 1
};
BF_DLLEXPORT bool Point_ErrorFlag_IsValid(int value);
constexpr Point_ErrorFlag Point_ErrorFlag_ErrorFlag_MIN = Point_ErrorFlag_E_VIBRATION_THRESHOLD_EXCEEDED;
constexpr Point_ErrorFlag Point_ErrorFlag_ErrorFlag_MAX = Point_ErrorFlag_E_VIBRATION_THRESHOLD_EXCEEDED;
constexpr int Point_ErrorFlag_ErrorFlag_ARRAYSIZE = Point_ErrorFlag_ErrorFlag_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Point_ErrorFlag_descriptor();
template<typename T>
inline const std::string& Point_ErrorFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Point_ErrorFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Point_ErrorFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Point_ErrorFlag_descriptor(), enum_t_value);
}
inline bool Point_ErrorFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Point_ErrorFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Point_ErrorFlag>(
    Point_ErrorFlag_descriptor(), name, value);
}
// ===================================================================

class BF_DLLEXPORT Point_Return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.Point.Return) */ {
 public:
  inline Point_Return() : Point_Return(nullptr) {}
  ~Point_Return() override;
  explicit constexpr Point_Return(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point_Return(const Point_Return& from);
  Point_Return(Point_Return&& from) noexcept
    : Point_Return() {
    *this = ::std::move(from);
  }

  inline Point_Return& operator=(const Point_Return& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point_Return& operator=(Point_Return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point_Return& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point_Return* internal_default_instance() {
    return reinterpret_cast<const Point_Return*>(
               &_Point_Return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point_Return& a, Point_Return& b) {
    a.Swap(&b);
  }
  inline void Swap(Point_Return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point_Return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point_Return* New() const final {
    return CreateMaybeMessage<Point_Return>(nullptr);
  }

  Point_Return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point_Return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point_Return& from);
  void MergeFrom(const Point_Return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point_Return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.Point.Return";
  }
  protected:
  explicit Point_Return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCartesianFieldNumber = 2,
    kIdFieldNumber = 1,
    kRangeFieldNumber = 3,
    kIntensityFieldNumber = 4,
  };
  // repeated float cartesian = 2 [packed = true, (.blickfeld.protocol.optional) = true];
  int cartesian_size() const;
  private:
  int _internal_cartesian_size() const;
  public:
  void clear_cartesian();
  private:
  float _internal_cartesian(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cartesian() const;
  void _internal_add_cartesian(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cartesian();
  public:
  float cartesian(int index) const;
  void set_cartesian(int index, float value);
  void add_cartesian(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cartesian() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cartesian();

  // optional uint32 id = 1 [(.blickfeld.protocol.optional) = true];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float range = 3 [(.blickfeld.protocol.optional) = true];
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  float range() const;
  void set_range(float value);
  private:
  float _internal_range() const;
  void _internal_set_range(float value);
  public:

  // optional uint32 intensity = 4 [(.blickfeld.protocol.optional) = true];
  bool has_intensity() const;
  private:
  bool _internal_has_intensity() const;
  public:
  void clear_intensity();
  ::PROTOBUF_NAMESPACE_ID::uint32 intensity() const;
  void set_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_intensity() const;
  void _internal_set_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.Point.Return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cartesian_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float range_;
  ::PROTOBUF_NAMESPACE_ID::uint32 intensity_;
  friend struct ::TableStruct_blickfeld_2fdata_2fpoint_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Point_Direction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.Point.Direction) */ {
 public:
  inline Point_Direction() : Point_Direction(nullptr) {}
  ~Point_Direction() override;
  explicit constexpr Point_Direction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point_Direction(const Point_Direction& from);
  Point_Direction(Point_Direction&& from) noexcept
    : Point_Direction() {
    *this = ::std::move(from);
  }

  inline Point_Direction& operator=(const Point_Direction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point_Direction& operator=(Point_Direction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point_Direction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point_Direction* internal_default_instance() {
    return reinterpret_cast<const Point_Direction*>(
               &_Point_Direction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point_Direction& a, Point_Direction& b) {
    a.Swap(&b);
  }
  inline void Swap(Point_Direction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point_Direction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point_Direction* New() const final {
    return CreateMaybeMessage<Point_Direction>(nullptr);
  }

  Point_Direction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point_Direction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point_Direction& from);
  void MergeFrom(const Point_Direction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point_Direction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.Point.Direction";
  }
  protected:
  explicit Point_Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 3,
    kAzimuthFieldNumber = 1,
    kElevationFieldNumber = 2,
  };
  // repeated float origin = 3 [packed = true, (.blickfeld.protocol.optional) = true];
  int origin_size() const;
  private:
  int _internal_origin_size() const;
  public:
  void clear_origin();
  private:
  float _internal_origin(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_origin() const;
  void _internal_add_origin(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_origin();
  public:
  float origin(int index) const;
  void set_origin(int index, float value);
  void add_origin(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      origin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_origin();

  // optional float azimuth = 1 [(.blickfeld.protocol.optional) = true];
  bool has_azimuth() const;
  private:
  bool _internal_has_azimuth() const;
  public:
  void clear_azimuth();
  float azimuth() const;
  void set_azimuth(float value);
  private:
  float _internal_azimuth() const;
  void _internal_set_azimuth(float value);
  public:

  // optional float elevation = 2 [(.blickfeld.protocol.optional) = true];
  bool has_elevation() const;
  private:
  bool _internal_has_elevation() const;
  public:
  void clear_elevation();
  float elevation() const;
  void set_elevation(float value);
  private:
  float _internal_elevation() const;
  void _internal_set_elevation(float value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.Point.Direction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > origin_;
  float azimuth_;
  float elevation_;
  friend struct ::TableStruct_blickfeld_2fdata_2fpoint_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit constexpr Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Point_Return Return;
  typedef Point_Direction Direction;

  typedef Point_ErrorFlag ErrorFlag;
  static constexpr ErrorFlag E_VIBRATION_THRESHOLD_EXCEEDED =
    Point_ErrorFlag_E_VIBRATION_THRESHOLD_EXCEEDED;
  static inline bool ErrorFlag_IsValid(int value) {
    return Point_ErrorFlag_IsValid(value);
  }
  static constexpr ErrorFlag ErrorFlag_MIN =
    Point_ErrorFlag_ErrorFlag_MIN;
  static constexpr ErrorFlag ErrorFlag_MAX =
    Point_ErrorFlag_ErrorFlag_MAX;
  static constexpr int ErrorFlag_ARRAYSIZE =
    Point_ErrorFlag_ErrorFlag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorFlag_descriptor() {
    return Point_ErrorFlag_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorFlag_Name.");
    return Point_ErrorFlag_Name(enum_t_value);
  }
  static inline bool ErrorFlag_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorFlag* value) {
    return Point_ErrorFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReturnsFieldNumber = 2,
    kErrorFlagsFieldNumber = 7,
    kDirectionFieldNumber = 5,
    kIdFieldNumber = 1,
    kAmbientLightLevelFieldNumber = 4,
    kStartOffsetNsFieldNumber = 3,
    kChannelIdFieldNumber = 6,
  };
  // repeated .blickfeld.protocol.data.Point.Return returns = 2 [(.blickfeld.protocol.optional) = true];
  int returns_size() const;
  private:
  int _internal_returns_size() const;
  public:
  void clear_returns();
  ::blickfeld::protocol::data::Point_Return* mutable_returns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Point_Return >*
      mutable_returns();
  private:
  const ::blickfeld::protocol::data::Point_Return& _internal_returns(int index) const;
  ::blickfeld::protocol::data::Point_Return* _internal_add_returns();
  public:
  const ::blickfeld::protocol::data::Point_Return& returns(int index) const;
  ::blickfeld::protocol::data::Point_Return* add_returns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Point_Return >&
      returns() const;

  // repeated .blickfeld.protocol.data.Point.ErrorFlag error_flags = 7 [(.blickfeld.protocol.optional) = true];
  int error_flags_size() const;
  private:
  int _internal_error_flags_size() const;
  public:
  void clear_error_flags();
  private:
  ::blickfeld::protocol::data::Point_ErrorFlag _internal_error_flags(int index) const;
  void _internal_add_error_flags(::blickfeld::protocol::data::Point_ErrorFlag value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_error_flags();
  public:
  ::blickfeld::protocol::data::Point_ErrorFlag error_flags(int index) const;
  void set_error_flags(int index, ::blickfeld::protocol::data::Point_ErrorFlag value);
  void add_error_flags(::blickfeld::protocol::data::Point_ErrorFlag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& error_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_error_flags();

  // optional .blickfeld.protocol.data.Point.Direction direction = 5 [(.blickfeld.protocol.optional) = true];
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::blickfeld::protocol::data::Point_Direction& direction() const;
  ::blickfeld::protocol::data::Point_Direction* release_direction();
  ::blickfeld::protocol::data::Point_Direction* mutable_direction();
  void set_allocated_direction(::blickfeld::protocol::data::Point_Direction* direction);
  private:
  const ::blickfeld::protocol::data::Point_Direction& _internal_direction() const;
  ::blickfeld::protocol::data::Point_Direction* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::blickfeld::protocol::data::Point_Direction* direction);
  ::blickfeld::protocol::data::Point_Direction* unsafe_arena_release_direction();

  // optional uint32 id = 1 [(.blickfeld.protocol.optional) = true];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ambient_light_level = 4 [(.blickfeld.protocol.optional) = true];
  bool has_ambient_light_level() const;
  private:
  bool _internal_has_ambient_light_level() const;
  public:
  void clear_ambient_light_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 ambient_light_level() const;
  void set_ambient_light_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ambient_light_level() const;
  void _internal_set_ambient_light_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 start_offset_ns = 3 [(.blickfeld.protocol.optional) = true];
  bool has_start_offset_ns() const;
  private:
  bool _internal_has_start_offset_ns() const;
  public:
  void clear_start_offset_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_ns() const;
  void set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_offset_ns() const;
  void _internal_set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 channel_id = 6 [(.blickfeld.protocol.optional) = true];
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Point_Return > returns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> error_flags_;
  ::blickfeld::protocol::data::Point_Direction* direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ambient_light_level_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_offset_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_id_;
  friend struct ::TableStruct_blickfeld_2fdata_2fpoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point_Return

// optional uint32 id = 1 [(.blickfeld.protocol.optional) = true];
inline bool Point_Return::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point_Return::has_id() const {
  return _internal_has_id();
}
inline void Point_Return::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point_Return::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point_Return::id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.Return.id)
  return _internal_id();
}
inline void Point_Return::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Point_Return::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.Return.id)
}

// repeated float cartesian = 2 [packed = true, (.blickfeld.protocol.optional) = true];
inline int Point_Return::_internal_cartesian_size() const {
  return cartesian_.size();
}
inline int Point_Return::cartesian_size() const {
  return _internal_cartesian_size();
}
inline void Point_Return::clear_cartesian() {
  cartesian_.Clear();
}
inline float Point_Return::_internal_cartesian(int index) const {
  return cartesian_.Get(index);
}
inline float Point_Return::cartesian(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.Return.cartesian)
  return _internal_cartesian(index);
}
inline void Point_Return::set_cartesian(int index, float value) {
  cartesian_.Set(index, value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.Return.cartesian)
}
inline void Point_Return::_internal_add_cartesian(float value) {
  cartesian_.Add(value);
}
inline void Point_Return::add_cartesian(float value) {
  _internal_add_cartesian(value);
  // @@protoc_insertion_point(field_add:blickfeld.protocol.data.Point.Return.cartesian)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Point_Return::_internal_cartesian() const {
  return cartesian_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Point_Return::cartesian() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.data.Point.Return.cartesian)
  return _internal_cartesian();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Point_Return::_internal_mutable_cartesian() {
  return &cartesian_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Point_Return::mutable_cartesian() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.data.Point.Return.cartesian)
  return _internal_mutable_cartesian();
}

// optional float range = 3 [(.blickfeld.protocol.optional) = true];
inline bool Point_Return::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point_Return::has_range() const {
  return _internal_has_range();
}
inline void Point_Return::clear_range() {
  range_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Point_Return::_internal_range() const {
  return range_;
}
inline float Point_Return::range() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.Return.range)
  return _internal_range();
}
inline void Point_Return::_internal_set_range(float value) {
  _has_bits_[0] |= 0x00000002u;
  range_ = value;
}
inline void Point_Return::set_range(float value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.Return.range)
}

// optional uint32 intensity = 4 [(.blickfeld.protocol.optional) = true];
inline bool Point_Return::_internal_has_intensity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Point_Return::has_intensity() const {
  return _internal_has_intensity();
}
inline void Point_Return::clear_intensity() {
  intensity_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point_Return::_internal_intensity() const {
  return intensity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point_Return::intensity() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.Return.intensity)
  return _internal_intensity();
}
inline void Point_Return::_internal_set_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  intensity_ = value;
}
inline void Point_Return::set_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.Return.intensity)
}

// -------------------------------------------------------------------

// Point_Direction

// optional float azimuth = 1 [(.blickfeld.protocol.optional) = true];
inline bool Point_Direction::_internal_has_azimuth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point_Direction::has_azimuth() const {
  return _internal_has_azimuth();
}
inline void Point_Direction::clear_azimuth() {
  azimuth_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Point_Direction::_internal_azimuth() const {
  return azimuth_;
}
inline float Point_Direction::azimuth() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.Direction.azimuth)
  return _internal_azimuth();
}
inline void Point_Direction::_internal_set_azimuth(float value) {
  _has_bits_[0] |= 0x00000001u;
  azimuth_ = value;
}
inline void Point_Direction::set_azimuth(float value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.Direction.azimuth)
}

// optional float elevation = 2 [(.blickfeld.protocol.optional) = true];
inline bool Point_Direction::_internal_has_elevation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point_Direction::has_elevation() const {
  return _internal_has_elevation();
}
inline void Point_Direction::clear_elevation() {
  elevation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Point_Direction::_internal_elevation() const {
  return elevation_;
}
inline float Point_Direction::elevation() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.Direction.elevation)
  return _internal_elevation();
}
inline void Point_Direction::_internal_set_elevation(float value) {
  _has_bits_[0] |= 0x00000002u;
  elevation_ = value;
}
inline void Point_Direction::set_elevation(float value) {
  _internal_set_elevation(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.Direction.elevation)
}

// repeated float origin = 3 [packed = true, (.blickfeld.protocol.optional) = true];
inline int Point_Direction::_internal_origin_size() const {
  return origin_.size();
}
inline int Point_Direction::origin_size() const {
  return _internal_origin_size();
}
inline void Point_Direction::clear_origin() {
  origin_.Clear();
}
inline float Point_Direction::_internal_origin(int index) const {
  return origin_.Get(index);
}
inline float Point_Direction::origin(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.Direction.origin)
  return _internal_origin(index);
}
inline void Point_Direction::set_origin(int index, float value) {
  origin_.Set(index, value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.Direction.origin)
}
inline void Point_Direction::_internal_add_origin(float value) {
  origin_.Add(value);
}
inline void Point_Direction::add_origin(float value) {
  _internal_add_origin(value);
  // @@protoc_insertion_point(field_add:blickfeld.protocol.data.Point.Direction.origin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Point_Direction::_internal_origin() const {
  return origin_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Point_Direction::origin() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.data.Point.Direction.origin)
  return _internal_origin();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Point_Direction::_internal_mutable_origin() {
  return &origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Point_Direction::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.data.Point.Direction.origin)
  return _internal_mutable_origin();
}

// -------------------------------------------------------------------

// Point

// optional uint32 id = 1 [(.blickfeld.protocol.optional) = true];
inline bool Point::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point::has_id() const {
  return _internal_has_id();
}
inline void Point::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point::id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.id)
  return _internal_id();
}
inline void Point::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Point::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.id)
}

// repeated .blickfeld.protocol.data.Point.Return returns = 2 [(.blickfeld.protocol.optional) = true];
inline int Point::_internal_returns_size() const {
  return returns_.size();
}
inline int Point::returns_size() const {
  return _internal_returns_size();
}
inline void Point::clear_returns() {
  returns_.Clear();
}
inline ::blickfeld::protocol::data::Point_Return* Point::mutable_returns(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Point.returns)
  return returns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Point_Return >*
Point::mutable_returns() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.data.Point.returns)
  return &returns_;
}
inline const ::blickfeld::protocol::data::Point_Return& Point::_internal_returns(int index) const {
  return returns_.Get(index);
}
inline const ::blickfeld::protocol::data::Point_Return& Point::returns(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.returns)
  return _internal_returns(index);
}
inline ::blickfeld::protocol::data::Point_Return* Point::_internal_add_returns() {
  return returns_.Add();
}
inline ::blickfeld::protocol::data::Point_Return* Point::add_returns() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.data.Point.returns)
  return _internal_add_returns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::data::Point_Return >&
Point::returns() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.data.Point.returns)
  return returns_;
}

// optional uint64 start_offset_ns = 3 [(.blickfeld.protocol.optional) = true];
inline bool Point::_internal_has_start_offset_ns() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Point::has_start_offset_ns() const {
  return _internal_has_start_offset_ns();
}
inline void Point::clear_start_offset_ns() {
  start_offset_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point::_internal_start_offset_ns() const {
  return start_offset_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point::start_offset_ns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.start_offset_ns)
  return _internal_start_offset_ns();
}
inline void Point::_internal_set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  start_offset_ns_ = value;
}
inline void Point::set_start_offset_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_offset_ns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.start_offset_ns)
}

// optional uint32 ambient_light_level = 4 [(.blickfeld.protocol.optional) = true];
inline bool Point::_internal_has_ambient_light_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Point::has_ambient_light_level() const {
  return _internal_has_ambient_light_level();
}
inline void Point::clear_ambient_light_level() {
  ambient_light_level_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point::_internal_ambient_light_level() const {
  return ambient_light_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point::ambient_light_level() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.ambient_light_level)
  return _internal_ambient_light_level();
}
inline void Point::_internal_set_ambient_light_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ambient_light_level_ = value;
}
inline void Point::set_ambient_light_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ambient_light_level(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.ambient_light_level)
}

// optional .blickfeld.protocol.data.Point.Direction direction = 5 [(.blickfeld.protocol.optional) = true];
inline bool Point::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || direction_ != nullptr);
  return value;
}
inline bool Point::has_direction() const {
  return _internal_has_direction();
}
inline void Point::clear_direction() {
  if (direction_ != nullptr) direction_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::blickfeld::protocol::data::Point_Direction& Point::_internal_direction() const {
  const ::blickfeld::protocol::data::Point_Direction* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::data::Point_Direction&>(
      ::blickfeld::protocol::data::_Point_Direction_default_instance_);
}
inline const ::blickfeld::protocol::data::Point_Direction& Point::direction() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.direction)
  return _internal_direction();
}
inline void Point::unsafe_arena_set_allocated_direction(
    ::blickfeld::protocol::data::Point_Direction* direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.data.Point.direction)
}
inline ::blickfeld::protocol::data::Point_Direction* Point::release_direction() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::data::Point_Direction* temp = direction_;
  direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::data::Point_Direction* Point::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.Point.direction)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::data::Point_Direction* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::data::Point_Direction* Point::_internal_mutable_direction() {
  _has_bits_[0] |= 0x00000001u;
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::data::Point_Direction>(GetArena());
    direction_ = p;
  }
  return direction_;
}
inline ::blickfeld::protocol::data::Point_Direction* Point::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.Point.direction)
  return _internal_mutable_direction();
}
inline void Point::set_allocated_direction(::blickfeld::protocol::data::Point_Direction* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.Point.direction)
}

// optional uint32 channel_id = 6 [(.blickfeld.protocol.optional) = true];
inline bool Point::_internal_has_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Point::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void Point::clear_channel_id() {
  channel_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point::channel_id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.channel_id)
  return _internal_channel_id();
}
inline void Point::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  channel_id_ = value;
}
inline void Point::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.channel_id)
}

// repeated .blickfeld.protocol.data.Point.ErrorFlag error_flags = 7 [(.blickfeld.protocol.optional) = true];
inline int Point::_internal_error_flags_size() const {
  return error_flags_.size();
}
inline int Point::error_flags_size() const {
  return _internal_error_flags_size();
}
inline void Point::clear_error_flags() {
  error_flags_.Clear();
}
inline ::blickfeld::protocol::data::Point_ErrorFlag Point::_internal_error_flags(int index) const {
  return static_cast< ::blickfeld::protocol::data::Point_ErrorFlag >(error_flags_.Get(index));
}
inline ::blickfeld::protocol::data::Point_ErrorFlag Point::error_flags(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.Point.error_flags)
  return _internal_error_flags(index);
}
inline void Point::set_error_flags(int index, ::blickfeld::protocol::data::Point_ErrorFlag value) {
  assert(::blickfeld::protocol::data::Point_ErrorFlag_IsValid(value));
  error_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.Point.error_flags)
}
inline void Point::_internal_add_error_flags(::blickfeld::protocol::data::Point_ErrorFlag value) {
  assert(::blickfeld::protocol::data::Point_ErrorFlag_IsValid(value));
  error_flags_.Add(value);
}
inline void Point::add_error_flags(::blickfeld::protocol::data::Point_ErrorFlag value) {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.data.Point.error_flags)
  _internal_add_error_flags(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Point::error_flags() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.data.Point.error_flags)
  return error_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Point::_internal_mutable_error_flags() {
  return &error_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Point::mutable_error_flags() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.data.Point.error_flags)
  return _internal_mutable_error_flags();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace protocol
}  // namespace blickfeld

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blickfeld::protocol::data::Point_ErrorFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::data::Point_ErrorFlag>() {
  return ::blickfeld::protocol::data::Point_ErrorFlag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fpoint_2eproto
