// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/data/point_cloud.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fpoint_5fcloud_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fpoint_5fcloud_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/data/frame.pb.h"
#include "blickfeld/data/scanline.pb.h"
#include "blickfeld/options.pb.h"
#include "blickfeld/update/hardware.pb.h"
#include "blickfeld/stream/connection.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fdata_2fpoint_5fcloud_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fdata_2fpoint_5fcloud_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fdata_2fpoint_5fcloud_2eproto;
namespace blickfeld {
namespace protocol {
namespace data {
class PointCloud;
struct PointCloudDefaultTypeInternal;
BF_DLLEXPORT extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class PointCloud_Header;
struct PointCloud_HeaderDefaultTypeInternal;
BF_DLLEXPORT extern PointCloud_HeaderDefaultTypeInternal _PointCloud_Header_default_instance_;
}  // namespace data
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::data::PointCloud* Arena::CreateMaybeMessage<::blickfeld::protocol::data::PointCloud>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::data::PointCloud_Header* Arena::CreateMaybeMessage<::blickfeld::protocol::data::PointCloud_Header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace data {

// ===================================================================

class BF_DLLEXPORT PointCloud_Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.PointCloud.Header) */ {
 public:
  inline PointCloud_Header() : PointCloud_Header(nullptr) {}
  ~PointCloud_Header() override;
  explicit constexpr PointCloud_Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud_Header(const PointCloud_Header& from);
  PointCloud_Header(PointCloud_Header&& from) noexcept
    : PointCloud_Header() {
    *this = ::std::move(from);
  }

  inline PointCloud_Header& operator=(const PointCloud_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud_Header& operator=(PointCloud_Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud_Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud_Header* internal_default_instance() {
    return reinterpret_cast<const PointCloud_Header*>(
               &_PointCloud_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PointCloud_Header& a, PointCloud_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud_Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud_Header* New() const final {
    return CreateMaybeMessage<PointCloud_Header>(nullptr);
  }

  PointCloud_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud_Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud_Header& from);
  void MergeFrom(const PointCloud_Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud_Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.PointCloud.Header";
  }
  protected:
  explicit PointCloud_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLegacyCubeSerialNumberFieldNumber = 1,
    kCubeSerialNumberFieldNumber = 2,
    kFirmwareVersionFieldNumber = 4,
    kSubscriptionFieldNumber = 6,
    kStartTimeNsFieldNumber = 3,
    kHardwareVariantFieldNumber = 5,
  };
  // optional string legacy_cube_serial_number = 1 [(.blickfeld.protocol.optional) = true];
  bool has_legacy_cube_serial_number() const;
  private:
  bool _internal_has_legacy_cube_serial_number() const;
  public:
  void clear_legacy_cube_serial_number();
  const std::string& legacy_cube_serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_legacy_cube_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_legacy_cube_serial_number();
  std::string* release_legacy_cube_serial_number();
  void set_allocated_legacy_cube_serial_number(std::string* legacy_cube_serial_number);
  private:
  const std::string& _internal_legacy_cube_serial_number() const;
  void _internal_set_legacy_cube_serial_number(const std::string& value);
  std::string* _internal_mutable_legacy_cube_serial_number();
  public:

  // optional string cube_serial_number = 2 [(.blickfeld.protocol.regex) = "[A-Z2-7]{9}", (.blickfeld.protocol.legacy_field_id) = 1];
  bool has_cube_serial_number() const;
  private:
  bool _internal_has_cube_serial_number() const;
  public:
  void clear_cube_serial_number();
  const std::string& cube_serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cube_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cube_serial_number();
  std::string* release_cube_serial_number();
  void set_allocated_cube_serial_number(std::string* cube_serial_number);
  private:
  const std::string& _internal_cube_serial_number() const;
  void _internal_set_cube_serial_number(const std::string& value);
  std::string* _internal_mutable_cube_serial_number();
  public:

  // optional string firmware_version = 4 [(.blickfeld.protocol.regex) = "v[0-9]+\\.[0-9]+\\.[0-9]+"];
  bool has_firmware_version() const;
  private:
  bool _internal_has_firmware_version() const;
  public:
  void clear_firmware_version();
  const std::string& firmware_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firmware_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firmware_version();
  std::string* release_firmware_version();
  void set_allocated_firmware_version(std::string* firmware_version);
  private:
  const std::string& _internal_firmware_version() const;
  void _internal_set_firmware_version(const std::string& value);
  std::string* _internal_mutable_firmware_version();
  public:

  // optional .blickfeld.protocol.stream.Subscribe.PointCloud subscription = 6;
  bool has_subscription() const;
  private:
  bool _internal_has_subscription() const;
  public:
  void clear_subscription();
  const ::blickfeld::protocol::stream::Subscribe_PointCloud& subscription() const;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* release_subscription();
  ::blickfeld::protocol::stream::Subscribe_PointCloud* mutable_subscription();
  void set_allocated_subscription(::blickfeld::protocol::stream::Subscribe_PointCloud* subscription);
  private:
  const ::blickfeld::protocol::stream::Subscribe_PointCloud& _internal_subscription() const;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* _internal_mutable_subscription();
  public:
  void unsafe_arena_set_allocated_subscription(
      ::blickfeld::protocol::stream::Subscribe_PointCloud* subscription);
  ::blickfeld::protocol::stream::Subscribe_PointCloud* unsafe_arena_release_subscription();

  // optional uint64 start_time_ns = 3;
  bool has_start_time_ns() const;
  private:
  bool _internal_has_start_time_ns() const;
  public:
  void clear_start_time_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_ns() const;
  void set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_ns() const;
  void _internal_set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .blickfeld.protocol.update.HardwareVariant hardware_variant = 5;
  bool has_hardware_variant() const;
  private:
  bool _internal_has_hardware_variant() const;
  public:
  void clear_hardware_variant();
  ::blickfeld::protocol::update::HardwareVariant hardware_variant() const;
  void set_hardware_variant(::blickfeld::protocol::update::HardwareVariant value);
  private:
  ::blickfeld::protocol::update::HardwareVariant _internal_hardware_variant() const;
  void _internal_set_hardware_variant(::blickfeld::protocol::update::HardwareVariant value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.PointCloud.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_cube_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cube_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_version_;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* subscription_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_ns_;
  int hardware_variant_;
  friend struct ::TableStruct_blickfeld_2fdata_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT PointCloud PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.data.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  ~PointCloud() override;
  explicit constexpr PointCloud(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kHeader = 3,
    kFrame = 1,
    kScanline = 2,
    DATA_NOT_SET = 0,
  };

  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return CreateMaybeMessage<PointCloud>(nullptr);
  }

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.data.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PointCloud_Header Header;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 3,
    kFrameFieldNumber = 1,
    kScanlineFieldNumber = 2,
  };
  // .blickfeld.protocol.data.PointCloud.Header header = 3;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::blickfeld::protocol::data::PointCloud_Header& header() const;
  ::blickfeld::protocol::data::PointCloud_Header* release_header();
  ::blickfeld::protocol::data::PointCloud_Header* mutable_header();
  void set_allocated_header(::blickfeld::protocol::data::PointCloud_Header* header);
  private:
  const ::blickfeld::protocol::data::PointCloud_Header& _internal_header() const;
  ::blickfeld::protocol::data::PointCloud_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::blickfeld::protocol::data::PointCloud_Header* header);
  ::blickfeld::protocol::data::PointCloud_Header* unsafe_arena_release_header();

  // .blickfeld.protocol.data.Frame frame = 1;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::blickfeld::protocol::data::Frame& frame() const;
  ::blickfeld::protocol::data::Frame* release_frame();
  ::blickfeld::protocol::data::Frame* mutable_frame();
  void set_allocated_frame(::blickfeld::protocol::data::Frame* frame);
  private:
  const ::blickfeld::protocol::data::Frame& _internal_frame() const;
  ::blickfeld::protocol::data::Frame* _internal_mutable_frame();
  public:
  void unsafe_arena_set_allocated_frame(
      ::blickfeld::protocol::data::Frame* frame);
  ::blickfeld::protocol::data::Frame* unsafe_arena_release_frame();

  // .blickfeld.protocol.data.Scanline scanline = 2;
  bool has_scanline() const;
  private:
  bool _internal_has_scanline() const;
  public:
  void clear_scanline();
  const ::blickfeld::protocol::data::Scanline& scanline() const;
  ::blickfeld::protocol::data::Scanline* release_scanline();
  ::blickfeld::protocol::data::Scanline* mutable_scanline();
  void set_allocated_scanline(::blickfeld::protocol::data::Scanline* scanline);
  private:
  const ::blickfeld::protocol::data::Scanline& _internal_scanline() const;
  ::blickfeld::protocol::data::Scanline* _internal_mutable_scanline();
  public:
  void unsafe_arena_set_allocated_scanline(
      ::blickfeld::protocol::data::Scanline* scanline);
  ::blickfeld::protocol::data::Scanline* unsafe_arena_release_scanline();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.data.PointCloud)
 private:
  class _Internal;
  void set_has_header();
  void set_has_frame();
  void set_has_scanline();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::data::PointCloud_Header* header_;
    ::blickfeld::protocol::data::Frame* frame_;
    ::blickfeld::protocol::data::Scanline* scanline_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fdata_2fpoint_5fcloud_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointCloud_Header

// optional string legacy_cube_serial_number = 1 [(.blickfeld.protocol.optional) = true];
inline bool PointCloud_Header::_internal_has_legacy_cube_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointCloud_Header::has_legacy_cube_serial_number() const {
  return _internal_has_legacy_cube_serial_number();
}
inline void PointCloud_Header::clear_legacy_cube_serial_number() {
  legacy_cube_serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PointCloud_Header::legacy_cube_serial_number() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.PointCloud.Header.legacy_cube_serial_number)
  return _internal_legacy_cube_serial_number();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PointCloud_Header::set_legacy_cube_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 legacy_cube_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.PointCloud.Header.legacy_cube_serial_number)
}
inline std::string* PointCloud_Header::mutable_legacy_cube_serial_number() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.PointCloud.Header.legacy_cube_serial_number)
  return _internal_mutable_legacy_cube_serial_number();
}
inline const std::string& PointCloud_Header::_internal_legacy_cube_serial_number() const {
  return legacy_cube_serial_number_.Get();
}
inline void PointCloud_Header::_internal_set_legacy_cube_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  legacy_cube_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* PointCloud_Header::_internal_mutable_legacy_cube_serial_number() {
  _has_bits_[0] |= 0x00000001u;
  return legacy_cube_serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PointCloud_Header::release_legacy_cube_serial_number() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.PointCloud.Header.legacy_cube_serial_number)
  if (!_internal_has_legacy_cube_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return legacy_cube_serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PointCloud_Header::set_allocated_legacy_cube_serial_number(std::string* legacy_cube_serial_number) {
  if (legacy_cube_serial_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  legacy_cube_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), legacy_cube_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.PointCloud.Header.legacy_cube_serial_number)
}

// optional string cube_serial_number = 2 [(.blickfeld.protocol.regex) = "[A-Z2-7]{9}", (.blickfeld.protocol.legacy_field_id) = 1];
inline bool PointCloud_Header::_internal_has_cube_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointCloud_Header::has_cube_serial_number() const {
  return _internal_has_cube_serial_number();
}
inline void PointCloud_Header::clear_cube_serial_number() {
  cube_serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PointCloud_Header::cube_serial_number() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.PointCloud.Header.cube_serial_number)
  return _internal_cube_serial_number();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PointCloud_Header::set_cube_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 cube_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.PointCloud.Header.cube_serial_number)
}
inline std::string* PointCloud_Header::mutable_cube_serial_number() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.PointCloud.Header.cube_serial_number)
  return _internal_mutable_cube_serial_number();
}
inline const std::string& PointCloud_Header::_internal_cube_serial_number() const {
  return cube_serial_number_.Get();
}
inline void PointCloud_Header::_internal_set_cube_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cube_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* PointCloud_Header::_internal_mutable_cube_serial_number() {
  _has_bits_[0] |= 0x00000002u;
  return cube_serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PointCloud_Header::release_cube_serial_number() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.PointCloud.Header.cube_serial_number)
  if (!_internal_has_cube_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cube_serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PointCloud_Header::set_allocated_cube_serial_number(std::string* cube_serial_number) {
  if (cube_serial_number != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cube_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cube_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.PointCloud.Header.cube_serial_number)
}

// optional uint64 start_time_ns = 3;
inline bool PointCloud_Header::_internal_has_start_time_ns() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PointCloud_Header::has_start_time_ns() const {
  return _internal_has_start_time_ns();
}
inline void PointCloud_Header::clear_start_time_ns() {
  start_time_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Header::_internal_start_time_ns() const {
  return start_time_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Header::start_time_ns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.PointCloud.Header.start_time_ns)
  return _internal_start_time_ns();
}
inline void PointCloud_Header::_internal_set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  start_time_ns_ = value;
}
inline void PointCloud_Header::set_start_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_ns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.PointCloud.Header.start_time_ns)
}

// optional string firmware_version = 4 [(.blickfeld.protocol.regex) = "v[0-9]+\\.[0-9]+\\.[0-9]+"];
inline bool PointCloud_Header::_internal_has_firmware_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointCloud_Header::has_firmware_version() const {
  return _internal_has_firmware_version();
}
inline void PointCloud_Header::clear_firmware_version() {
  firmware_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PointCloud_Header::firmware_version() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.PointCloud.Header.firmware_version)
  return _internal_firmware_version();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PointCloud_Header::set_firmware_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 firmware_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.PointCloud.Header.firmware_version)
}
inline std::string* PointCloud_Header::mutable_firmware_version() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.PointCloud.Header.firmware_version)
  return _internal_mutable_firmware_version();
}
inline const std::string& PointCloud_Header::_internal_firmware_version() const {
  return firmware_version_.Get();
}
inline void PointCloud_Header::_internal_set_firmware_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  firmware_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* PointCloud_Header::_internal_mutable_firmware_version() {
  _has_bits_[0] |= 0x00000004u;
  return firmware_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PointCloud_Header::release_firmware_version() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.PointCloud.Header.firmware_version)
  if (!_internal_has_firmware_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return firmware_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PointCloud_Header::set_allocated_firmware_version(std::string* firmware_version) {
  if (firmware_version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  firmware_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmware_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.PointCloud.Header.firmware_version)
}

// optional .blickfeld.protocol.update.HardwareVariant hardware_variant = 5;
inline bool PointCloud_Header::_internal_has_hardware_variant() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PointCloud_Header::has_hardware_variant() const {
  return _internal_has_hardware_variant();
}
inline void PointCloud_Header::clear_hardware_variant() {
  hardware_variant_ = 5;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::blickfeld::protocol::update::HardwareVariant PointCloud_Header::_internal_hardware_variant() const {
  return static_cast< ::blickfeld::protocol::update::HardwareVariant >(hardware_variant_);
}
inline ::blickfeld::protocol::update::HardwareVariant PointCloud_Header::hardware_variant() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.PointCloud.Header.hardware_variant)
  return _internal_hardware_variant();
}
inline void PointCloud_Header::_internal_set_hardware_variant(::blickfeld::protocol::update::HardwareVariant value) {
  assert(::blickfeld::protocol::update::HardwareVariant_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  hardware_variant_ = value;
}
inline void PointCloud_Header::set_hardware_variant(::blickfeld::protocol::update::HardwareVariant value) {
  _internal_set_hardware_variant(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.data.PointCloud.Header.hardware_variant)
}

// optional .blickfeld.protocol.stream.Subscribe.PointCloud subscription = 6;
inline bool PointCloud_Header::_internal_has_subscription() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || subscription_ != nullptr);
  return value;
}
inline bool PointCloud_Header::has_subscription() const {
  return _internal_has_subscription();
}
inline const ::blickfeld::protocol::stream::Subscribe_PointCloud& PointCloud_Header::_internal_subscription() const {
  const ::blickfeld::protocol::stream::Subscribe_PointCloud* p = subscription_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::stream::Subscribe_PointCloud&>(
      ::blickfeld::protocol::stream::_Subscribe_PointCloud_default_instance_);
}
inline const ::blickfeld::protocol::stream::Subscribe_PointCloud& PointCloud_Header::subscription() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.PointCloud.Header.subscription)
  return _internal_subscription();
}
inline void PointCloud_Header::unsafe_arena_set_allocated_subscription(
    ::blickfeld::protocol::stream::Subscribe_PointCloud* subscription) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subscription_);
  }
  subscription_ = subscription;
  if (subscription) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.data.PointCloud.Header.subscription)
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* PointCloud_Header::release_subscription() {
  _has_bits_[0] &= ~0x00000008u;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* temp = subscription_;
  subscription_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* PointCloud_Header::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.PointCloud.Header.subscription)
  _has_bits_[0] &= ~0x00000008u;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* temp = subscription_;
  subscription_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* PointCloud_Header::_internal_mutable_subscription() {
  _has_bits_[0] |= 0x00000008u;
  if (subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::stream::Subscribe_PointCloud>(GetArena());
    subscription_ = p;
  }
  return subscription_;
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* PointCloud_Header::mutable_subscription() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.PointCloud.Header.subscription)
  return _internal_mutable_subscription();
}
inline void PointCloud_Header::set_allocated_subscription(::blickfeld::protocol::stream::Subscribe_PointCloud* subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subscription_);
  }
  if (subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subscription)->GetArena();
    if (message_arena != submessage_arena) {
      subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  subscription_ = subscription;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.data.PointCloud.Header.subscription)
}

// -------------------------------------------------------------------

// PointCloud

// .blickfeld.protocol.data.PointCloud.Header header = 3;
inline bool PointCloud::_internal_has_header() const {
  return data_case() == kHeader;
}
inline bool PointCloud::has_header() const {
  return _internal_has_header();
}
inline void PointCloud::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void PointCloud::clear_header() {
  if (_internal_has_header()) {
    if (GetArena() == nullptr) {
      delete data_.header_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::data::PointCloud_Header* PointCloud::release_header() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.PointCloud.header)
  if (_internal_has_header()) {
    clear_has_data();
      ::blickfeld::protocol::data::PointCloud_Header* temp = data_.header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::data::PointCloud_Header& PointCloud::_internal_header() const {
  return _internal_has_header()
      ? *data_.header_
      : reinterpret_cast< ::blickfeld::protocol::data::PointCloud_Header&>(::blickfeld::protocol::data::_PointCloud_Header_default_instance_);
}
inline const ::blickfeld::protocol::data::PointCloud_Header& PointCloud::header() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.PointCloud.header)
  return _internal_header();
}
inline ::blickfeld::protocol::data::PointCloud_Header* PointCloud::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.data.PointCloud.header)
  if (_internal_has_header()) {
    clear_has_data();
    ::blickfeld::protocol::data::PointCloud_Header* temp = data_.header_;
    data_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PointCloud::unsafe_arena_set_allocated_header(::blickfeld::protocol::data::PointCloud_Header* header) {
  clear_data();
  if (header) {
    set_has_header();
    data_.header_ = header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.data.PointCloud.header)
}
inline ::blickfeld::protocol::data::PointCloud_Header* PointCloud::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_data();
    set_has_header();
    data_.header_ = CreateMaybeMessage< ::blickfeld::protocol::data::PointCloud_Header >(GetArena());
  }
  return data_.header_;
}
inline ::blickfeld::protocol::data::PointCloud_Header* PointCloud::mutable_header() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.PointCloud.header)
  return _internal_mutable_header();
}

// .blickfeld.protocol.data.Frame frame = 1;
inline bool PointCloud::_internal_has_frame() const {
  return data_case() == kFrame;
}
inline bool PointCloud::has_frame() const {
  return _internal_has_frame();
}
inline void PointCloud::set_has_frame() {
  _oneof_case_[0] = kFrame;
}
inline ::blickfeld::protocol::data::Frame* PointCloud::release_frame() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.PointCloud.frame)
  if (_internal_has_frame()) {
    clear_has_data();
      ::blickfeld::protocol::data::Frame* temp = data_.frame_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::data::Frame& PointCloud::_internal_frame() const {
  return _internal_has_frame()
      ? *data_.frame_
      : reinterpret_cast< ::blickfeld::protocol::data::Frame&>(::blickfeld::protocol::data::_Frame_default_instance_);
}
inline const ::blickfeld::protocol::data::Frame& PointCloud::frame() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.PointCloud.frame)
  return _internal_frame();
}
inline ::blickfeld::protocol::data::Frame* PointCloud::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.data.PointCloud.frame)
  if (_internal_has_frame()) {
    clear_has_data();
    ::blickfeld::protocol::data::Frame* temp = data_.frame_;
    data_.frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PointCloud::unsafe_arena_set_allocated_frame(::blickfeld::protocol::data::Frame* frame) {
  clear_data();
  if (frame) {
    set_has_frame();
    data_.frame_ = frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.data.PointCloud.frame)
}
inline ::blickfeld::protocol::data::Frame* PointCloud::_internal_mutable_frame() {
  if (!_internal_has_frame()) {
    clear_data();
    set_has_frame();
    data_.frame_ = CreateMaybeMessage< ::blickfeld::protocol::data::Frame >(GetArena());
  }
  return data_.frame_;
}
inline ::blickfeld::protocol::data::Frame* PointCloud::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.PointCloud.frame)
  return _internal_mutable_frame();
}

// .blickfeld.protocol.data.Scanline scanline = 2;
inline bool PointCloud::_internal_has_scanline() const {
  return data_case() == kScanline;
}
inline bool PointCloud::has_scanline() const {
  return _internal_has_scanline();
}
inline void PointCloud::set_has_scanline() {
  _oneof_case_[0] = kScanline;
}
inline ::blickfeld::protocol::data::Scanline* PointCloud::release_scanline() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.data.PointCloud.scanline)
  if (_internal_has_scanline()) {
    clear_has_data();
      ::blickfeld::protocol::data::Scanline* temp = data_.scanline_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.scanline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::data::Scanline& PointCloud::_internal_scanline() const {
  return _internal_has_scanline()
      ? *data_.scanline_
      : reinterpret_cast< ::blickfeld::protocol::data::Scanline&>(::blickfeld::protocol::data::_Scanline_default_instance_);
}
inline const ::blickfeld::protocol::data::Scanline& PointCloud::scanline() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.data.PointCloud.scanline)
  return _internal_scanline();
}
inline ::blickfeld::protocol::data::Scanline* PointCloud::unsafe_arena_release_scanline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.data.PointCloud.scanline)
  if (_internal_has_scanline()) {
    clear_has_data();
    ::blickfeld::protocol::data::Scanline* temp = data_.scanline_;
    data_.scanline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PointCloud::unsafe_arena_set_allocated_scanline(::blickfeld::protocol::data::Scanline* scanline) {
  clear_data();
  if (scanline) {
    set_has_scanline();
    data_.scanline_ = scanline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.data.PointCloud.scanline)
}
inline ::blickfeld::protocol::data::Scanline* PointCloud::_internal_mutable_scanline() {
  if (!_internal_has_scanline()) {
    clear_data();
    set_has_scanline();
    data_.scanline_ = CreateMaybeMessage< ::blickfeld::protocol::data::Scanline >(GetArena());
  }
  return data_.scanline_;
}
inline ::blickfeld::protocol::data::Scanline* PointCloud::mutable_scanline() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.data.PointCloud.scanline)
  return _internal_mutable_scanline();
}

inline bool PointCloud::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void PointCloud::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline PointCloud::DataCase PointCloud::data_case() const {
  return PointCloud::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fdata_2fpoint_5fcloud_2eproto
