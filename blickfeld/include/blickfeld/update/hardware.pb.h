// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/update/hardware.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fupdate_2fhardware_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fupdate_2fhardware_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fupdate_2fhardware_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fupdate_2fhardware_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fupdate_2fhardware_2eproto;
namespace blickfeld {
namespace protocol {
namespace update {
class partial_module_eeprom_msg;
struct partial_module_eeprom_msgDefaultTypeInternal;
BF_DLLEXPORT extern partial_module_eeprom_msgDefaultTypeInternal _partial_module_eeprom_msg_default_instance_;
class partial_trenz_eeprom_msg;
struct partial_trenz_eeprom_msgDefaultTypeInternal;
BF_DLLEXPORT extern partial_trenz_eeprom_msgDefaultTypeInternal _partial_trenz_eeprom_msg_default_instance_;
}  // namespace update
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::update::partial_module_eeprom_msg* Arena::CreateMaybeMessage<::blickfeld::protocol::update::partial_module_eeprom_msg>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::update::partial_trenz_eeprom_msg* Arena::CreateMaybeMessage<::blickfeld::protocol::update::partial_trenz_eeprom_msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace update {

enum HardwareVariant : int {
  ALL_HARDWARE = 5,
  UNKNOWN_HARDWARE = 6,
  NO_HARDWARE = 7,
  CUBE_V0_2 = 0,
  CUBE_V0_3 = 1,
  CUBE_V1_0 = 4,
  AURORA_P3 = 3,
  APOLLON_A0 = 2,
  APOLLON_A1_BDU = 8
};
BF_DLLEXPORT bool HardwareVariant_IsValid(int value);
constexpr HardwareVariant HardwareVariant_MIN = CUBE_V0_2;
constexpr HardwareVariant HardwareVariant_MAX = APOLLON_A1_BDU;
constexpr int HardwareVariant_ARRAYSIZE = HardwareVariant_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HardwareVariant_descriptor();
template<typename T>
inline const std::string& HardwareVariant_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HardwareVariant>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HardwareVariant_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HardwareVariant_descriptor(), enum_t_value);
}
inline bool HardwareVariant_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HardwareVariant* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HardwareVariant>(
    HardwareVariant_descriptor(), name, value);
}
// ===================================================================

class BF_DLLEXPORT partial_trenz_eeprom_msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.update.partial_trenz_eeprom_msg) */ {
 public:
  inline partial_trenz_eeprom_msg() : partial_trenz_eeprom_msg(nullptr) {}
  ~partial_trenz_eeprom_msg() override;
  explicit constexpr partial_trenz_eeprom_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  partial_trenz_eeprom_msg(const partial_trenz_eeprom_msg& from);
  partial_trenz_eeprom_msg(partial_trenz_eeprom_msg&& from) noexcept
    : partial_trenz_eeprom_msg() {
    *this = ::std::move(from);
  }

  inline partial_trenz_eeprom_msg& operator=(const partial_trenz_eeprom_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline partial_trenz_eeprom_msg& operator=(partial_trenz_eeprom_msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const partial_trenz_eeprom_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const partial_trenz_eeprom_msg* internal_default_instance() {
    return reinterpret_cast<const partial_trenz_eeprom_msg*>(
               &_partial_trenz_eeprom_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(partial_trenz_eeprom_msg& a, partial_trenz_eeprom_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(partial_trenz_eeprom_msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(partial_trenz_eeprom_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline partial_trenz_eeprom_msg* New() const final {
    return CreateMaybeMessage<partial_trenz_eeprom_msg>(nullptr);
  }

  partial_trenz_eeprom_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<partial_trenz_eeprom_msg>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(partial_trenz_eeprom_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.update.partial_trenz_eeprom_msg";
  }
  protected:
  explicit partial_trenz_eeprom_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHardwareVariantFieldNumber = 3,
  };
  // optional .blickfeld.protocol.update.HardwareVariant hardware_variant = 3;
  bool has_hardware_variant() const;
  private:
  bool _internal_has_hardware_variant() const;
  public:
  void clear_hardware_variant();
  ::blickfeld::protocol::update::HardwareVariant hardware_variant() const;
  void set_hardware_variant(::blickfeld::protocol::update::HardwareVariant value);
  private:
  ::blickfeld::protocol::update::HardwareVariant _internal_hardware_variant() const;
  void _internal_set_hardware_variant(::blickfeld::protocol::update::HardwareVariant value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.update.partial_trenz_eeprom_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int hardware_variant_;
  friend struct ::TableStruct_blickfeld_2fupdate_2fhardware_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT partial_module_eeprom_msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.update.partial_module_eeprom_msg) */ {
 public:
  inline partial_module_eeprom_msg() : partial_module_eeprom_msg(nullptr) {}
  ~partial_module_eeprom_msg() override;
  explicit constexpr partial_module_eeprom_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  partial_module_eeprom_msg(const partial_module_eeprom_msg& from);
  partial_module_eeprom_msg(partial_module_eeprom_msg&& from) noexcept
    : partial_module_eeprom_msg() {
    *this = ::std::move(from);
  }

  inline partial_module_eeprom_msg& operator=(const partial_module_eeprom_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline partial_module_eeprom_msg& operator=(partial_module_eeprom_msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const partial_module_eeprom_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const partial_module_eeprom_msg* internal_default_instance() {
    return reinterpret_cast<const partial_module_eeprom_msg*>(
               &_partial_module_eeprom_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(partial_module_eeprom_msg& a, partial_module_eeprom_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(partial_module_eeprom_msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(partial_module_eeprom_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline partial_module_eeprom_msg* New() const final {
    return CreateMaybeMessage<partial_module_eeprom_msg>(nullptr);
  }

  partial_module_eeprom_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<partial_module_eeprom_msg>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(partial_module_eeprom_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.update.partial_module_eeprom_msg";
  }
  protected:
  explicit partial_module_eeprom_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHardwareVersionFieldNumber = 99,
  };
  // optional string hardware_version = 99;
  bool has_hardware_version() const;
  private:
  bool _internal_has_hardware_version() const;
  public:
  void clear_hardware_version();
  const std::string& hardware_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hardware_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hardware_version();
  std::string* release_hardware_version();
  void set_allocated_hardware_version(std::string* hardware_version);
  private:
  const std::string& _internal_hardware_version() const;
  void _internal_set_hardware_version(const std::string& value);
  std::string* _internal_mutable_hardware_version();
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.update.partial_module_eeprom_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hardware_version_;
  friend struct ::TableStruct_blickfeld_2fupdate_2fhardware_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// partial_trenz_eeprom_msg

// optional .blickfeld.protocol.update.HardwareVariant hardware_variant = 3;
inline bool partial_trenz_eeprom_msg::_internal_has_hardware_variant() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool partial_trenz_eeprom_msg::has_hardware_variant() const {
  return _internal_has_hardware_variant();
}
inline void partial_trenz_eeprom_msg::clear_hardware_variant() {
  hardware_variant_ = 5;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::blickfeld::protocol::update::HardwareVariant partial_trenz_eeprom_msg::_internal_hardware_variant() const {
  return static_cast< ::blickfeld::protocol::update::HardwareVariant >(hardware_variant_);
}
inline ::blickfeld::protocol::update::HardwareVariant partial_trenz_eeprom_msg::hardware_variant() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.update.partial_trenz_eeprom_msg.hardware_variant)
  return _internal_hardware_variant();
}
inline void partial_trenz_eeprom_msg::_internal_set_hardware_variant(::blickfeld::protocol::update::HardwareVariant value) {
  assert(::blickfeld::protocol::update::HardwareVariant_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  hardware_variant_ = value;
}
inline void partial_trenz_eeprom_msg::set_hardware_variant(::blickfeld::protocol::update::HardwareVariant value) {
  _internal_set_hardware_variant(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.partial_trenz_eeprom_msg.hardware_variant)
}

// -------------------------------------------------------------------

// partial_module_eeprom_msg

// optional string hardware_version = 99;
inline bool partial_module_eeprom_msg::_internal_has_hardware_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool partial_module_eeprom_msg::has_hardware_version() const {
  return _internal_has_hardware_version();
}
inline void partial_module_eeprom_msg::clear_hardware_version() {
  hardware_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& partial_module_eeprom_msg::hardware_version() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.update.partial_module_eeprom_msg.hardware_version)
  return _internal_hardware_version();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void partial_module_eeprom_msg::set_hardware_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 hardware_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.partial_module_eeprom_msg.hardware_version)
}
inline std::string* partial_module_eeprom_msg::mutable_hardware_version() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.update.partial_module_eeprom_msg.hardware_version)
  return _internal_mutable_hardware_version();
}
inline const std::string& partial_module_eeprom_msg::_internal_hardware_version() const {
  return hardware_version_.Get();
}
inline void partial_module_eeprom_msg::_internal_set_hardware_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hardware_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* partial_module_eeprom_msg::_internal_mutable_hardware_version() {
  _has_bits_[0] |= 0x00000001u;
  return hardware_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* partial_module_eeprom_msg::release_hardware_version() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.update.partial_module_eeprom_msg.hardware_version)
  if (!_internal_has_hardware_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hardware_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void partial_module_eeprom_msg::set_allocated_hardware_version(std::string* hardware_version) {
  if (hardware_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hardware_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hardware_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.update.partial_module_eeprom_msg.hardware_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace update
}  // namespace protocol
}  // namespace blickfeld

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blickfeld::protocol::update::HardwareVariant> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::update::HardwareVariant>() {
  return ::blickfeld::protocol::update::HardwareVariant_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fupdate_2fhardware_2eproto
