// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/update/manifest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fupdate_2fmanifest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fupdate_2fmanifest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/update/hardware.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fupdate_2fmanifest_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fupdate_2fmanifest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fupdate_2fmanifest_2eproto;
namespace blickfeld {
namespace protocol {
namespace update {
class manifest_msg;
struct manifest_msgDefaultTypeInternal;
BF_DLLEXPORT extern manifest_msgDefaultTypeInternal _manifest_msg_default_instance_;
class manifest_msg_CompatibleHardware;
struct manifest_msg_CompatibleHardwareDefaultTypeInternal;
BF_DLLEXPORT extern manifest_msg_CompatibleHardwareDefaultTypeInternal _manifest_msg_CompatibleHardware_default_instance_;
}  // namespace update
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::update::manifest_msg* Arena::CreateMaybeMessage<::blickfeld::protocol::update::manifest_msg>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* Arena::CreateMaybeMessage<::blickfeld::protocol::update::manifest_msg_CompatibleHardware>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace update {

enum manifest_msg_ImageType : int {
  manifest_msg_ImageType_PARTITIONED = 0,
  manifest_msg_ImageType_SYSTEM = 1
};
BF_DLLEXPORT bool manifest_msg_ImageType_IsValid(int value);
constexpr manifest_msg_ImageType manifest_msg_ImageType_ImageType_MIN = manifest_msg_ImageType_PARTITIONED;
constexpr manifest_msg_ImageType manifest_msg_ImageType_ImageType_MAX = manifest_msg_ImageType_SYSTEM;
constexpr int manifest_msg_ImageType_ImageType_ARRAYSIZE = manifest_msg_ImageType_ImageType_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* manifest_msg_ImageType_descriptor();
template<typename T>
inline const std::string& manifest_msg_ImageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, manifest_msg_ImageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function manifest_msg_ImageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    manifest_msg_ImageType_descriptor(), enum_t_value);
}
inline bool manifest_msg_ImageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, manifest_msg_ImageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<manifest_msg_ImageType>(
    manifest_msg_ImageType_descriptor(), name, value);
}
// ===================================================================

class BF_DLLEXPORT manifest_msg_CompatibleHardware PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.update.manifest_msg.CompatibleHardware) */ {
 public:
  inline manifest_msg_CompatibleHardware() : manifest_msg_CompatibleHardware(nullptr) {}
  ~manifest_msg_CompatibleHardware() override;
  explicit constexpr manifest_msg_CompatibleHardware(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  manifest_msg_CompatibleHardware(const manifest_msg_CompatibleHardware& from);
  manifest_msg_CompatibleHardware(manifest_msg_CompatibleHardware&& from) noexcept
    : manifest_msg_CompatibleHardware() {
    *this = ::std::move(from);
  }

  inline manifest_msg_CompatibleHardware& operator=(const manifest_msg_CompatibleHardware& from) {
    CopyFrom(from);
    return *this;
  }
  inline manifest_msg_CompatibleHardware& operator=(manifest_msg_CompatibleHardware&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const manifest_msg_CompatibleHardware& default_instance() {
    return *internal_default_instance();
  }
  static inline const manifest_msg_CompatibleHardware* internal_default_instance() {
    return reinterpret_cast<const manifest_msg_CompatibleHardware*>(
               &_manifest_msg_CompatibleHardware_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(manifest_msg_CompatibleHardware& a, manifest_msg_CompatibleHardware& b) {
    a.Swap(&b);
  }
  inline void Swap(manifest_msg_CompatibleHardware* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(manifest_msg_CompatibleHardware* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline manifest_msg_CompatibleHardware* New() const final {
    return CreateMaybeMessage<manifest_msg_CompatibleHardware>(nullptr);
  }

  manifest_msg_CompatibleHardware* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<manifest_msg_CompatibleHardware>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(manifest_msg_CompatibleHardware* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.update.manifest_msg.CompatibleHardware";
  }
  protected:
  explicit manifest_msg_CompatibleHardware(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariantFieldNumber = 1,
    kMsbFieldNumber = 2,
    kScannerBigFieldNumber = 3,
    kScannerSmallFieldNumber = 4,
    kHsdFieldNumber = 5,
  };
  // repeated .blickfeld.protocol.update.HardwareVariant variant = 1;
  int variant_size() const;
  private:
  int _internal_variant_size() const;
  public:
  void clear_variant();
  private:
  ::blickfeld::protocol::update::HardwareVariant _internal_variant(int index) const;
  void _internal_add_variant(::blickfeld::protocol::update::HardwareVariant value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_variant();
  public:
  ::blickfeld::protocol::update::HardwareVariant variant(int index) const;
  void set_variant(int index, ::blickfeld::protocol::update::HardwareVariant value);
  void add_variant(::blickfeld::protocol::update::HardwareVariant value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& variant() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_variant();

  // repeated string msb = 2;
  int msb_size() const;
  private:
  int _internal_msb_size() const;
  public:
  void clear_msb();
  const std::string& msb(int index) const;
  std::string* mutable_msb(int index);
  void set_msb(int index, const std::string& value);
  void set_msb(int index, std::string&& value);
  void set_msb(int index, const char* value);
  void set_msb(int index, const char* value, size_t size);
  std::string* add_msb();
  void add_msb(const std::string& value);
  void add_msb(std::string&& value);
  void add_msb(const char* value);
  void add_msb(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msb() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msb();
  private:
  const std::string& _internal_msb(int index) const;
  std::string* _internal_add_msb();
  public:

  // repeated string scanner_big = 3;
  int scanner_big_size() const;
  private:
  int _internal_scanner_big_size() const;
  public:
  void clear_scanner_big();
  const std::string& scanner_big(int index) const;
  std::string* mutable_scanner_big(int index);
  void set_scanner_big(int index, const std::string& value);
  void set_scanner_big(int index, std::string&& value);
  void set_scanner_big(int index, const char* value);
  void set_scanner_big(int index, const char* value, size_t size);
  std::string* add_scanner_big();
  void add_scanner_big(const std::string& value);
  void add_scanner_big(std::string&& value);
  void add_scanner_big(const char* value);
  void add_scanner_big(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scanner_big() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scanner_big();
  private:
  const std::string& _internal_scanner_big(int index) const;
  std::string* _internal_add_scanner_big();
  public:

  // repeated string scanner_small = 4;
  int scanner_small_size() const;
  private:
  int _internal_scanner_small_size() const;
  public:
  void clear_scanner_small();
  const std::string& scanner_small(int index) const;
  std::string* mutable_scanner_small(int index);
  void set_scanner_small(int index, const std::string& value);
  void set_scanner_small(int index, std::string&& value);
  void set_scanner_small(int index, const char* value);
  void set_scanner_small(int index, const char* value, size_t size);
  std::string* add_scanner_small();
  void add_scanner_small(const std::string& value);
  void add_scanner_small(std::string&& value);
  void add_scanner_small(const char* value);
  void add_scanner_small(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scanner_small() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scanner_small();
  private:
  const std::string& _internal_scanner_small(int index) const;
  std::string* _internal_add_scanner_small();
  public:

  // repeated string hsd = 5;
  int hsd_size() const;
  private:
  int _internal_hsd_size() const;
  public:
  void clear_hsd();
  const std::string& hsd(int index) const;
  std::string* mutable_hsd(int index);
  void set_hsd(int index, const std::string& value);
  void set_hsd(int index, std::string&& value);
  void set_hsd(int index, const char* value);
  void set_hsd(int index, const char* value, size_t size);
  std::string* add_hsd();
  void add_hsd(const std::string& value);
  void add_hsd(std::string&& value);
  void add_hsd(const char* value);
  void add_hsd(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hsd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hsd();
  private:
  const std::string& _internal_hsd(int index) const;
  std::string* _internal_add_hsd();
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.update.manifest_msg.CompatibleHardware)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> variant_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msb_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scanner_big_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scanner_small_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hsd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fupdate_2fmanifest_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT manifest_msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.update.manifest_msg) */ {
 public:
  inline manifest_msg() : manifest_msg(nullptr) {}
  ~manifest_msg() override;
  explicit constexpr manifest_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  manifest_msg(const manifest_msg& from);
  manifest_msg(manifest_msg&& from) noexcept
    : manifest_msg() {
    *this = ::std::move(from);
  }

  inline manifest_msg& operator=(const manifest_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline manifest_msg& operator=(manifest_msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const manifest_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const manifest_msg* internal_default_instance() {
    return reinterpret_cast<const manifest_msg*>(
               &_manifest_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(manifest_msg& a, manifest_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(manifest_msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(manifest_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline manifest_msg* New() const final {
    return CreateMaybeMessage<manifest_msg>(nullptr);
  }

  manifest_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<manifest_msg>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(manifest_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.update.manifest_msg";
  }
  protected:
  explicit manifest_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef manifest_msg_CompatibleHardware CompatibleHardware;

  typedef manifest_msg_ImageType ImageType;
  static constexpr ImageType PARTITIONED =
    manifest_msg_ImageType_PARTITIONED;
  static constexpr ImageType SYSTEM =
    manifest_msg_ImageType_SYSTEM;
  static inline bool ImageType_IsValid(int value) {
    return manifest_msg_ImageType_IsValid(value);
  }
  static constexpr ImageType ImageType_MIN =
    manifest_msg_ImageType_ImageType_MIN;
  static constexpr ImageType ImageType_MAX =
    manifest_msg_ImageType_ImageType_MAX;
  static constexpr int ImageType_ARRAYSIZE =
    manifest_msg_ImageType_ImageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImageType_descriptor() {
    return manifest_msg_ImageType_descriptor();
  }
  template<typename T>
  static inline const std::string& ImageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImageType_Name.");
    return manifest_msg_ImageType_Name(enum_t_value);
  }
  static inline bool ImageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImageType* value) {
    return manifest_msg_ImageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMinBusVersionFieldNumber = 1,
    kCompatibleHardwareFieldNumber = 3,
    kImageTypeFieldNumber = 2,
    kSecureFieldNumber = 4,
  };
  // optional string min_bus_version = 1;
  bool has_min_bus_version() const;
  private:
  bool _internal_has_min_bus_version() const;
  public:
  void clear_min_bus_version();
  const std::string& min_bus_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_min_bus_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_min_bus_version();
  std::string* release_min_bus_version();
  void set_allocated_min_bus_version(std::string* min_bus_version);
  private:
  const std::string& _internal_min_bus_version() const;
  void _internal_set_min_bus_version(const std::string& value);
  std::string* _internal_mutable_min_bus_version();
  public:

  // optional .blickfeld.protocol.update.manifest_msg.CompatibleHardware compatible_hardware = 3;
  bool has_compatible_hardware() const;
  private:
  bool _internal_has_compatible_hardware() const;
  public:
  void clear_compatible_hardware();
  const ::blickfeld::protocol::update::manifest_msg_CompatibleHardware& compatible_hardware() const;
  ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* release_compatible_hardware();
  ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* mutable_compatible_hardware();
  void set_allocated_compatible_hardware(::blickfeld::protocol::update::manifest_msg_CompatibleHardware* compatible_hardware);
  private:
  const ::blickfeld::protocol::update::manifest_msg_CompatibleHardware& _internal_compatible_hardware() const;
  ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* _internal_mutable_compatible_hardware();
  public:
  void unsafe_arena_set_allocated_compatible_hardware(
      ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* compatible_hardware);
  ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* unsafe_arena_release_compatible_hardware();

  // optional .blickfeld.protocol.update.manifest_msg.ImageType image_type = 2;
  bool has_image_type() const;
  private:
  bool _internal_has_image_type() const;
  public:
  void clear_image_type();
  ::blickfeld::protocol::update::manifest_msg_ImageType image_type() const;
  void set_image_type(::blickfeld::protocol::update::manifest_msg_ImageType value);
  private:
  ::blickfeld::protocol::update::manifest_msg_ImageType _internal_image_type() const;
  void _internal_set_image_type(::blickfeld::protocol::update::manifest_msg_ImageType value);
  public:

  // optional bool secure = 4 [default = false];
  bool has_secure() const;
  private:
  bool _internal_has_secure() const;
  public:
  void clear_secure();
  bool secure() const;
  void set_secure(bool value);
  private:
  bool _internal_secure() const;
  void _internal_set_secure(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.update.manifest_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_bus_version_;
  ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* compatible_hardware_;
  int image_type_;
  bool secure_;
  friend struct ::TableStruct_blickfeld_2fupdate_2fmanifest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// manifest_msg_CompatibleHardware

// repeated .blickfeld.protocol.update.HardwareVariant variant = 1;
inline int manifest_msg_CompatibleHardware::_internal_variant_size() const {
  return variant_.size();
}
inline int manifest_msg_CompatibleHardware::variant_size() const {
  return _internal_variant_size();
}
inline void manifest_msg_CompatibleHardware::clear_variant() {
  variant_.Clear();
}
inline ::blickfeld::protocol::update::HardwareVariant manifest_msg_CompatibleHardware::_internal_variant(int index) const {
  return static_cast< ::blickfeld::protocol::update::HardwareVariant >(variant_.Get(index));
}
inline ::blickfeld::protocol::update::HardwareVariant manifest_msg_CompatibleHardware::variant(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.update.manifest_msg.CompatibleHardware.variant)
  return _internal_variant(index);
}
inline void manifest_msg_CompatibleHardware::set_variant(int index, ::blickfeld::protocol::update::HardwareVariant value) {
  assert(::blickfeld::protocol::update::HardwareVariant_IsValid(value));
  variant_.Set(index, value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.CompatibleHardware.variant)
}
inline void manifest_msg_CompatibleHardware::_internal_add_variant(::blickfeld::protocol::update::HardwareVariant value) {
  assert(::blickfeld::protocol::update::HardwareVariant_IsValid(value));
  variant_.Add(value);
}
inline void manifest_msg_CompatibleHardware::add_variant(::blickfeld::protocol::update::HardwareVariant value) {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.update.manifest_msg.CompatibleHardware.variant)
  _internal_add_variant(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
manifest_msg_CompatibleHardware::variant() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.update.manifest_msg.CompatibleHardware.variant)
  return variant_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
manifest_msg_CompatibleHardware::_internal_mutable_variant() {
  return &variant_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
manifest_msg_CompatibleHardware::mutable_variant() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.update.manifest_msg.CompatibleHardware.variant)
  return _internal_mutable_variant();
}

// repeated string msb = 2;
inline int manifest_msg_CompatibleHardware::_internal_msb_size() const {
  return msb_.size();
}
inline int manifest_msg_CompatibleHardware::msb_size() const {
  return _internal_msb_size();
}
inline void manifest_msg_CompatibleHardware::clear_msb() {
  msb_.Clear();
}
inline std::string* manifest_msg_CompatibleHardware::add_msb() {
  // @@protoc_insertion_point(field_add_mutable:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
  return _internal_add_msb();
}
inline const std::string& manifest_msg_CompatibleHardware::_internal_msb(int index) const {
  return msb_.Get(index);
}
inline const std::string& manifest_msg_CompatibleHardware::msb(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
  return _internal_msb(index);
}
inline std::string* manifest_msg_CompatibleHardware::mutable_msb(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
  return msb_.Mutable(index);
}
inline void manifest_msg_CompatibleHardware::set_msb(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
  msb_.Mutable(index)->assign(value);
}
inline void manifest_msg_CompatibleHardware::set_msb(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
  msb_.Mutable(index)->assign(std::move(value));
}
inline void manifest_msg_CompatibleHardware::set_msb(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msb_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
}
inline void manifest_msg_CompatibleHardware::set_msb(int index, const char* value, size_t size) {
  msb_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
}
inline std::string* manifest_msg_CompatibleHardware::_internal_add_msb() {
  return msb_.Add();
}
inline void manifest_msg_CompatibleHardware::add_msb(const std::string& value) {
  msb_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
}
inline void manifest_msg_CompatibleHardware::add_msb(std::string&& value) {
  msb_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
}
inline void manifest_msg_CompatibleHardware::add_msb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msb_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
}
inline void manifest_msg_CompatibleHardware::add_msb(const char* value, size_t size) {
  msb_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
manifest_msg_CompatibleHardware::msb() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
  return msb_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
manifest_msg_CompatibleHardware::mutable_msb() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.update.manifest_msg.CompatibleHardware.msb)
  return &msb_;
}

// repeated string scanner_big = 3;
inline int manifest_msg_CompatibleHardware::_internal_scanner_big_size() const {
  return scanner_big_.size();
}
inline int manifest_msg_CompatibleHardware::scanner_big_size() const {
  return _internal_scanner_big_size();
}
inline void manifest_msg_CompatibleHardware::clear_scanner_big() {
  scanner_big_.Clear();
}
inline std::string* manifest_msg_CompatibleHardware::add_scanner_big() {
  // @@protoc_insertion_point(field_add_mutable:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
  return _internal_add_scanner_big();
}
inline const std::string& manifest_msg_CompatibleHardware::_internal_scanner_big(int index) const {
  return scanner_big_.Get(index);
}
inline const std::string& manifest_msg_CompatibleHardware::scanner_big(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
  return _internal_scanner_big(index);
}
inline std::string* manifest_msg_CompatibleHardware::mutable_scanner_big(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
  return scanner_big_.Mutable(index);
}
inline void manifest_msg_CompatibleHardware::set_scanner_big(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
  scanner_big_.Mutable(index)->assign(value);
}
inline void manifest_msg_CompatibleHardware::set_scanner_big(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
  scanner_big_.Mutable(index)->assign(std::move(value));
}
inline void manifest_msg_CompatibleHardware::set_scanner_big(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scanner_big_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
}
inline void manifest_msg_CompatibleHardware::set_scanner_big(int index, const char* value, size_t size) {
  scanner_big_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
}
inline std::string* manifest_msg_CompatibleHardware::_internal_add_scanner_big() {
  return scanner_big_.Add();
}
inline void manifest_msg_CompatibleHardware::add_scanner_big(const std::string& value) {
  scanner_big_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
}
inline void manifest_msg_CompatibleHardware::add_scanner_big(std::string&& value) {
  scanner_big_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
}
inline void manifest_msg_CompatibleHardware::add_scanner_big(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scanner_big_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
}
inline void manifest_msg_CompatibleHardware::add_scanner_big(const char* value, size_t size) {
  scanner_big_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
manifest_msg_CompatibleHardware::scanner_big() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
  return scanner_big_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
manifest_msg_CompatibleHardware::mutable_scanner_big() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_big)
  return &scanner_big_;
}

// repeated string scanner_small = 4;
inline int manifest_msg_CompatibleHardware::_internal_scanner_small_size() const {
  return scanner_small_.size();
}
inline int manifest_msg_CompatibleHardware::scanner_small_size() const {
  return _internal_scanner_small_size();
}
inline void manifest_msg_CompatibleHardware::clear_scanner_small() {
  scanner_small_.Clear();
}
inline std::string* manifest_msg_CompatibleHardware::add_scanner_small() {
  // @@protoc_insertion_point(field_add_mutable:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
  return _internal_add_scanner_small();
}
inline const std::string& manifest_msg_CompatibleHardware::_internal_scanner_small(int index) const {
  return scanner_small_.Get(index);
}
inline const std::string& manifest_msg_CompatibleHardware::scanner_small(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
  return _internal_scanner_small(index);
}
inline std::string* manifest_msg_CompatibleHardware::mutable_scanner_small(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
  return scanner_small_.Mutable(index);
}
inline void manifest_msg_CompatibleHardware::set_scanner_small(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
  scanner_small_.Mutable(index)->assign(value);
}
inline void manifest_msg_CompatibleHardware::set_scanner_small(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
  scanner_small_.Mutable(index)->assign(std::move(value));
}
inline void manifest_msg_CompatibleHardware::set_scanner_small(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scanner_small_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
}
inline void manifest_msg_CompatibleHardware::set_scanner_small(int index, const char* value, size_t size) {
  scanner_small_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
}
inline std::string* manifest_msg_CompatibleHardware::_internal_add_scanner_small() {
  return scanner_small_.Add();
}
inline void manifest_msg_CompatibleHardware::add_scanner_small(const std::string& value) {
  scanner_small_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
}
inline void manifest_msg_CompatibleHardware::add_scanner_small(std::string&& value) {
  scanner_small_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
}
inline void manifest_msg_CompatibleHardware::add_scanner_small(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scanner_small_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
}
inline void manifest_msg_CompatibleHardware::add_scanner_small(const char* value, size_t size) {
  scanner_small_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
manifest_msg_CompatibleHardware::scanner_small() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
  return scanner_small_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
manifest_msg_CompatibleHardware::mutable_scanner_small() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.update.manifest_msg.CompatibleHardware.scanner_small)
  return &scanner_small_;
}

// repeated string hsd = 5;
inline int manifest_msg_CompatibleHardware::_internal_hsd_size() const {
  return hsd_.size();
}
inline int manifest_msg_CompatibleHardware::hsd_size() const {
  return _internal_hsd_size();
}
inline void manifest_msg_CompatibleHardware::clear_hsd() {
  hsd_.Clear();
}
inline std::string* manifest_msg_CompatibleHardware::add_hsd() {
  // @@protoc_insertion_point(field_add_mutable:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
  return _internal_add_hsd();
}
inline const std::string& manifest_msg_CompatibleHardware::_internal_hsd(int index) const {
  return hsd_.Get(index);
}
inline const std::string& manifest_msg_CompatibleHardware::hsd(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
  return _internal_hsd(index);
}
inline std::string* manifest_msg_CompatibleHardware::mutable_hsd(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
  return hsd_.Mutable(index);
}
inline void manifest_msg_CompatibleHardware::set_hsd(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
  hsd_.Mutable(index)->assign(value);
}
inline void manifest_msg_CompatibleHardware::set_hsd(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
  hsd_.Mutable(index)->assign(std::move(value));
}
inline void manifest_msg_CompatibleHardware::set_hsd(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hsd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
}
inline void manifest_msg_CompatibleHardware::set_hsd(int index, const char* value, size_t size) {
  hsd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
}
inline std::string* manifest_msg_CompatibleHardware::_internal_add_hsd() {
  return hsd_.Add();
}
inline void manifest_msg_CompatibleHardware::add_hsd(const std::string& value) {
  hsd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
}
inline void manifest_msg_CompatibleHardware::add_hsd(std::string&& value) {
  hsd_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
}
inline void manifest_msg_CompatibleHardware::add_hsd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hsd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
}
inline void manifest_msg_CompatibleHardware::add_hsd(const char* value, size_t size) {
  hsd_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
manifest_msg_CompatibleHardware::hsd() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
  return hsd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
manifest_msg_CompatibleHardware::mutable_hsd() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.update.manifest_msg.CompatibleHardware.hsd)
  return &hsd_;
}

// -------------------------------------------------------------------

// manifest_msg

// optional string min_bus_version = 1;
inline bool manifest_msg::_internal_has_min_bus_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool manifest_msg::has_min_bus_version() const {
  return _internal_has_min_bus_version();
}
inline void manifest_msg::clear_min_bus_version() {
  min_bus_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& manifest_msg::min_bus_version() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.update.manifest_msg.min_bus_version)
  return _internal_min_bus_version();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void manifest_msg::set_min_bus_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 min_bus_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.min_bus_version)
}
inline std::string* manifest_msg::mutable_min_bus_version() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.update.manifest_msg.min_bus_version)
  return _internal_mutable_min_bus_version();
}
inline const std::string& manifest_msg::_internal_min_bus_version() const {
  return min_bus_version_.Get();
}
inline void manifest_msg::_internal_set_min_bus_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  min_bus_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* manifest_msg::_internal_mutable_min_bus_version() {
  _has_bits_[0] |= 0x00000001u;
  return min_bus_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* manifest_msg::release_min_bus_version() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.update.manifest_msg.min_bus_version)
  if (!_internal_has_min_bus_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return min_bus_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void manifest_msg::set_allocated_min_bus_version(std::string* min_bus_version) {
  if (min_bus_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  min_bus_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min_bus_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.update.manifest_msg.min_bus_version)
}

// optional .blickfeld.protocol.update.manifest_msg.ImageType image_type = 2;
inline bool manifest_msg::_internal_has_image_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool manifest_msg::has_image_type() const {
  return _internal_has_image_type();
}
inline void manifest_msg::clear_image_type() {
  image_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::blickfeld::protocol::update::manifest_msg_ImageType manifest_msg::_internal_image_type() const {
  return static_cast< ::blickfeld::protocol::update::manifest_msg_ImageType >(image_type_);
}
inline ::blickfeld::protocol::update::manifest_msg_ImageType manifest_msg::image_type() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.update.manifest_msg.image_type)
  return _internal_image_type();
}
inline void manifest_msg::_internal_set_image_type(::blickfeld::protocol::update::manifest_msg_ImageType value) {
  assert(::blickfeld::protocol::update::manifest_msg_ImageType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  image_type_ = value;
}
inline void manifest_msg::set_image_type(::blickfeld::protocol::update::manifest_msg_ImageType value) {
  _internal_set_image_type(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.image_type)
}

// optional .blickfeld.protocol.update.manifest_msg.CompatibleHardware compatible_hardware = 3;
inline bool manifest_msg::_internal_has_compatible_hardware() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || compatible_hardware_ != nullptr);
  return value;
}
inline bool manifest_msg::has_compatible_hardware() const {
  return _internal_has_compatible_hardware();
}
inline void manifest_msg::clear_compatible_hardware() {
  if (compatible_hardware_ != nullptr) compatible_hardware_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::blickfeld::protocol::update::manifest_msg_CompatibleHardware& manifest_msg::_internal_compatible_hardware() const {
  const ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* p = compatible_hardware_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::update::manifest_msg_CompatibleHardware&>(
      ::blickfeld::protocol::update::_manifest_msg_CompatibleHardware_default_instance_);
}
inline const ::blickfeld::protocol::update::manifest_msg_CompatibleHardware& manifest_msg::compatible_hardware() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.update.manifest_msg.compatible_hardware)
  return _internal_compatible_hardware();
}
inline void manifest_msg::unsafe_arena_set_allocated_compatible_hardware(
    ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* compatible_hardware) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compatible_hardware_);
  }
  compatible_hardware_ = compatible_hardware;
  if (compatible_hardware) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.update.manifest_msg.compatible_hardware)
}
inline ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* manifest_msg::release_compatible_hardware() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* temp = compatible_hardware_;
  compatible_hardware_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* manifest_msg::unsafe_arena_release_compatible_hardware() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.update.manifest_msg.compatible_hardware)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* temp = compatible_hardware_;
  compatible_hardware_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* manifest_msg::_internal_mutable_compatible_hardware() {
  _has_bits_[0] |= 0x00000002u;
  if (compatible_hardware_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::update::manifest_msg_CompatibleHardware>(GetArena());
    compatible_hardware_ = p;
  }
  return compatible_hardware_;
}
inline ::blickfeld::protocol::update::manifest_msg_CompatibleHardware* manifest_msg::mutable_compatible_hardware() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.update.manifest_msg.compatible_hardware)
  return _internal_mutable_compatible_hardware();
}
inline void manifest_msg::set_allocated_compatible_hardware(::blickfeld::protocol::update::manifest_msg_CompatibleHardware* compatible_hardware) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete compatible_hardware_;
  }
  if (compatible_hardware) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(compatible_hardware);
    if (message_arena != submessage_arena) {
      compatible_hardware = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compatible_hardware, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  compatible_hardware_ = compatible_hardware;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.update.manifest_msg.compatible_hardware)
}

// optional bool secure = 4 [default = false];
inline bool manifest_msg::_internal_has_secure() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool manifest_msg::has_secure() const {
  return _internal_has_secure();
}
inline void manifest_msg::clear_secure() {
  secure_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool manifest_msg::_internal_secure() const {
  return secure_;
}
inline bool manifest_msg::secure() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.update.manifest_msg.secure)
  return _internal_secure();
}
inline void manifest_msg::_internal_set_secure(bool value) {
  _has_bits_[0] |= 0x00000008u;
  secure_ = value;
}
inline void manifest_msg::set_secure(bool value) {
  _internal_set_secure(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.update.manifest_msg.secure)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace update
}  // namespace protocol
}  // namespace blickfeld

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blickfeld::protocol::update::manifest_msg_ImageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::update::manifest_msg_ImageType>() {
  return ::blickfeld::protocol::update::manifest_msg_ImageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fupdate_2fmanifest_2eproto
