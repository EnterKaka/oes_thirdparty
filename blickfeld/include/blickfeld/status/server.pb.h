// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/status/server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/stream/connection.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fstatus_2fserver_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fstatus_2fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fstatus_2fserver_2eproto;
namespace blickfeld {
namespace protocol {
namespace status {
class Server;
struct ServerDefaultTypeInternal;
BF_DLLEXPORT extern ServerDefaultTypeInternal _Server_default_instance_;
class Server_Client;
struct Server_ClientDefaultTypeInternal;
BF_DLLEXPORT extern Server_ClientDefaultTypeInternal _Server_Client_default_instance_;
class Server_NetworkStats;
struct Server_NetworkStatsDefaultTypeInternal;
BF_DLLEXPORT extern Server_NetworkStatsDefaultTypeInternal _Server_NetworkStats_default_instance_;
class Server_NetworkStats_Channel;
struct Server_NetworkStats_ChannelDefaultTypeInternal;
BF_DLLEXPORT extern Server_NetworkStats_ChannelDefaultTypeInternal _Server_NetworkStats_Channel_default_instance_;
}  // namespace status
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::status::Server* Arena::CreateMaybeMessage<::blickfeld::protocol::status::Server>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::status::Server_Client* Arena::CreateMaybeMessage<::blickfeld::protocol::status::Server_Client>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::status::Server_NetworkStats* Arena::CreateMaybeMessage<::blickfeld::protocol::status::Server_NetworkStats>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::status::Server_NetworkStats_Channel* Arena::CreateMaybeMessage<::blickfeld::protocol::status::Server_NetworkStats_Channel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace status {

// ===================================================================

class BF_DLLEXPORT Server_NetworkStats_Channel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.status.Server.NetworkStats.Channel) */ {
 public:
  inline Server_NetworkStats_Channel() : Server_NetworkStats_Channel(nullptr) {}
  ~Server_NetworkStats_Channel() override;
  explicit constexpr Server_NetworkStats_Channel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Server_NetworkStats_Channel(const Server_NetworkStats_Channel& from);
  Server_NetworkStats_Channel(Server_NetworkStats_Channel&& from) noexcept
    : Server_NetworkStats_Channel() {
    *this = ::std::move(from);
  }

  inline Server_NetworkStats_Channel& operator=(const Server_NetworkStats_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server_NetworkStats_Channel& operator=(Server_NetworkStats_Channel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Server_NetworkStats_Channel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Server_NetworkStats_Channel* internal_default_instance() {
    return reinterpret_cast<const Server_NetworkStats_Channel*>(
               &_Server_NetworkStats_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Server_NetworkStats_Channel& a, Server_NetworkStats_Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Server_NetworkStats_Channel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Server_NetworkStats_Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server_NetworkStats_Channel* New() const final {
    return CreateMaybeMessage<Server_NetworkStats_Channel>(nullptr);
  }

  Server_NetworkStats_Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server_NetworkStats_Channel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server_NetworkStats_Channel& from);
  void MergeFrom(const Server_NetworkStats_Channel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server_NetworkStats_Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.status.Server.NetworkStats.Channel";
  }
  protected:
  explicit Server_NetworkStats_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalByteCountFieldNumber = 1,
    kBytesPerSecondFieldNumber = 2,
    kMaximumBytesPerSecondFieldNumber = 3,
  };
  // optional uint64 total_byte_count = 1 [default = 0];
  bool has_total_byte_count() const;
  private:
  bool _internal_has_total_byte_count() const;
  public:
  void clear_total_byte_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_byte_count() const;
  void set_total_byte_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_byte_count() const;
  void _internal_set_total_byte_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float bytes_per_second = 2 [(.blickfeld.protocol.optional) = true];
  bool has_bytes_per_second() const;
  private:
  bool _internal_has_bytes_per_second() const;
  public:
  void clear_bytes_per_second();
  float bytes_per_second() const;
  void set_bytes_per_second(float value);
  private:
  float _internal_bytes_per_second() const;
  void _internal_set_bytes_per_second(float value);
  public:

  // optional float maximum_bytes_per_second = 3 [(.blickfeld.protocol.optional) = true];
  bool has_maximum_bytes_per_second() const;
  private:
  bool _internal_has_maximum_bytes_per_second() const;
  public:
  void clear_maximum_bytes_per_second();
  float maximum_bytes_per_second() const;
  void set_maximum_bytes_per_second(float value);
  private:
  float _internal_maximum_bytes_per_second() const;
  void _internal_set_maximum_bytes_per_second(float value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.status.Server.NetworkStats.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_byte_count_;
  float bytes_per_second_;
  float maximum_bytes_per_second_;
  friend struct ::TableStruct_blickfeld_2fstatus_2fserver_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Server_NetworkStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.status.Server.NetworkStats) */ {
 public:
  inline Server_NetworkStats() : Server_NetworkStats(nullptr) {}
  ~Server_NetworkStats() override;
  explicit constexpr Server_NetworkStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Server_NetworkStats(const Server_NetworkStats& from);
  Server_NetworkStats(Server_NetworkStats&& from) noexcept
    : Server_NetworkStats() {
    *this = ::std::move(from);
  }

  inline Server_NetworkStats& operator=(const Server_NetworkStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server_NetworkStats& operator=(Server_NetworkStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Server_NetworkStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const Server_NetworkStats* internal_default_instance() {
    return reinterpret_cast<const Server_NetworkStats*>(
               &_Server_NetworkStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Server_NetworkStats& a, Server_NetworkStats& b) {
    a.Swap(&b);
  }
  inline void Swap(Server_NetworkStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Server_NetworkStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server_NetworkStats* New() const final {
    return CreateMaybeMessage<Server_NetworkStats>(nullptr);
  }

  Server_NetworkStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server_NetworkStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server_NetworkStats& from);
  void MergeFrom(const Server_NetworkStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server_NetworkStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.status.Server.NetworkStats";
  }
  protected:
  explicit Server_NetworkStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Server_NetworkStats_Channel Channel;

  // accessors -------------------------------------------------------

  enum : int {
    kSentFieldNumber = 1,
    kReceivedFieldNumber = 2,
    kDroppedMessagesFieldNumber = 3,
  };
  // optional .blickfeld.protocol.status.Server.NetworkStats.Channel sent = 1;
  bool has_sent() const;
  private:
  bool _internal_has_sent() const;
  public:
  void clear_sent();
  const ::blickfeld::protocol::status::Server_NetworkStats_Channel& sent() const;
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* release_sent();
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* mutable_sent();
  void set_allocated_sent(::blickfeld::protocol::status::Server_NetworkStats_Channel* sent);
  private:
  const ::blickfeld::protocol::status::Server_NetworkStats_Channel& _internal_sent() const;
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* _internal_mutable_sent();
  public:
  void unsafe_arena_set_allocated_sent(
      ::blickfeld::protocol::status::Server_NetworkStats_Channel* sent);
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* unsafe_arena_release_sent();

  // optional .blickfeld.protocol.status.Server.NetworkStats.Channel received = 2;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  const ::blickfeld::protocol::status::Server_NetworkStats_Channel& received() const;
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* release_received();
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* mutable_received();
  void set_allocated_received(::blickfeld::protocol::status::Server_NetworkStats_Channel* received);
  private:
  const ::blickfeld::protocol::status::Server_NetworkStats_Channel& _internal_received() const;
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* _internal_mutable_received();
  public:
  void unsafe_arena_set_allocated_received(
      ::blickfeld::protocol::status::Server_NetworkStats_Channel* received);
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* unsafe_arena_release_received();

  // optional uint64 dropped_messages = 3 [default = 0];
  bool has_dropped_messages() const;
  private:
  bool _internal_has_dropped_messages() const;
  public:
  void clear_dropped_messages();
  ::PROTOBUF_NAMESPACE_ID::uint64 dropped_messages() const;
  void set_dropped_messages(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dropped_messages() const;
  void _internal_set_dropped_messages(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.status.Server.NetworkStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* sent_;
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dropped_messages_;
  friend struct ::TableStruct_blickfeld_2fstatus_2fserver_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Server_Client PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.status.Server.Client) */ {
 public:
  inline Server_Client() : Server_Client(nullptr) {}
  ~Server_Client() override;
  explicit constexpr Server_Client(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Server_Client(const Server_Client& from);
  Server_Client(Server_Client&& from) noexcept
    : Server_Client() {
    *this = ::std::move(from);
  }

  inline Server_Client& operator=(const Server_Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server_Client& operator=(Server_Client&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Server_Client& default_instance() {
    return *internal_default_instance();
  }
  static inline const Server_Client* internal_default_instance() {
    return reinterpret_cast<const Server_Client*>(
               &_Server_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Server_Client& a, Server_Client& b) {
    a.Swap(&b);
  }
  inline void Swap(Server_Client* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Server_Client* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server_Client* New() const final {
    return CreateMaybeMessage<Server_Client>(nullptr);
  }

  Server_Client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server_Client>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server_Client& from);
  void MergeFrom(const Server_Client& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server_Client* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.status.Server.Client";
  }
  protected:
  explicit Server_Client(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionsFieldNumber = 1,
    kIdentifierFieldNumber = 3,
    kNetworkStatsFieldNumber = 2,
  };
  // repeated .blickfeld.protocol.stream.Subscribe subscriptions = 1;
  int subscriptions_size() const;
  private:
  int _internal_subscriptions_size() const;
  public:
  void clear_subscriptions();
  ::blickfeld::protocol::stream::Subscribe* mutable_subscriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::stream::Subscribe >*
      mutable_subscriptions();
  private:
  const ::blickfeld::protocol::stream::Subscribe& _internal_subscriptions(int index) const;
  ::blickfeld::protocol::stream::Subscribe* _internal_add_subscriptions();
  public:
  const ::blickfeld::protocol::stream::Subscribe& subscriptions(int index) const;
  ::blickfeld::protocol::stream::Subscribe* add_subscriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::stream::Subscribe >&
      subscriptions() const;

  // optional string identifier = 3;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // optional .blickfeld.protocol.status.Server.NetworkStats network_stats = 2;
  bool has_network_stats() const;
  private:
  bool _internal_has_network_stats() const;
  public:
  void clear_network_stats();
  const ::blickfeld::protocol::status::Server_NetworkStats& network_stats() const;
  ::blickfeld::protocol::status::Server_NetworkStats* release_network_stats();
  ::blickfeld::protocol::status::Server_NetworkStats* mutable_network_stats();
  void set_allocated_network_stats(::blickfeld::protocol::status::Server_NetworkStats* network_stats);
  private:
  const ::blickfeld::protocol::status::Server_NetworkStats& _internal_network_stats() const;
  ::blickfeld::protocol::status::Server_NetworkStats* _internal_mutable_network_stats();
  public:
  void unsafe_arena_set_allocated_network_stats(
      ::blickfeld::protocol::status::Server_NetworkStats* network_stats);
  ::blickfeld::protocol::status::Server_NetworkStats* unsafe_arena_release_network_stats();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.status.Server.Client)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::stream::Subscribe > subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::blickfeld::protocol::status::Server_NetworkStats* network_stats_;
  friend struct ::TableStruct_blickfeld_2fstatus_2fserver_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Server PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.status.Server) */ {
 public:
  inline Server() : Server(nullptr) {}
  ~Server() override;
  explicit constexpr Server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Server(const Server& from);
  Server(Server&& from) noexcept
    : Server() {
    *this = ::std::move(from);
  }

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server& operator=(Server&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Server& default_instance() {
    return *internal_default_instance();
  }
  static inline const Server* internal_default_instance() {
    return reinterpret_cast<const Server*>(
               &_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Server& a, Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Server* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server* New() const final {
    return CreateMaybeMessage<Server>(nullptr);
  }

  Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.status.Server";
  }
  protected:
  explicit Server(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Server_NetworkStats NetworkStats;
  typedef Server_Client Client;

  // accessors -------------------------------------------------------

  enum : int {
    kClientsFieldNumber = 1,
    kNetworkStatsFieldNumber = 2,
  };
  // repeated .blickfeld.protocol.status.Server.Client clients = 1;
  int clients_size() const;
  private:
  int _internal_clients_size() const;
  public:
  void clear_clients();
  ::blickfeld::protocol::status::Server_Client* mutable_clients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::status::Server_Client >*
      mutable_clients();
  private:
  const ::blickfeld::protocol::status::Server_Client& _internal_clients(int index) const;
  ::blickfeld::protocol::status::Server_Client* _internal_add_clients();
  public:
  const ::blickfeld::protocol::status::Server_Client& clients(int index) const;
  ::blickfeld::protocol::status::Server_Client* add_clients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::status::Server_Client >&
      clients() const;

  // optional .blickfeld.protocol.status.Server.NetworkStats network_stats = 2;
  bool has_network_stats() const;
  private:
  bool _internal_has_network_stats() const;
  public:
  void clear_network_stats();
  const ::blickfeld::protocol::status::Server_NetworkStats& network_stats() const;
  ::blickfeld::protocol::status::Server_NetworkStats* release_network_stats();
  ::blickfeld::protocol::status::Server_NetworkStats* mutable_network_stats();
  void set_allocated_network_stats(::blickfeld::protocol::status::Server_NetworkStats* network_stats);
  private:
  const ::blickfeld::protocol::status::Server_NetworkStats& _internal_network_stats() const;
  ::blickfeld::protocol::status::Server_NetworkStats* _internal_mutable_network_stats();
  public:
  void unsafe_arena_set_allocated_network_stats(
      ::blickfeld::protocol::status::Server_NetworkStats* network_stats);
  ::blickfeld::protocol::status::Server_NetworkStats* unsafe_arena_release_network_stats();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.status.Server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::status::Server_Client > clients_;
  ::blickfeld::protocol::status::Server_NetworkStats* network_stats_;
  friend struct ::TableStruct_blickfeld_2fstatus_2fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Server_NetworkStats_Channel

// optional uint64 total_byte_count = 1 [default = 0];
inline bool Server_NetworkStats_Channel::_internal_has_total_byte_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Server_NetworkStats_Channel::has_total_byte_count() const {
  return _internal_has_total_byte_count();
}
inline void Server_NetworkStats_Channel::clear_total_byte_count() {
  total_byte_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Server_NetworkStats_Channel::_internal_total_byte_count() const {
  return total_byte_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Server_NetworkStats_Channel::total_byte_count() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Server.NetworkStats.Channel.total_byte_count)
  return _internal_total_byte_count();
}
inline void Server_NetworkStats_Channel::_internal_set_total_byte_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  total_byte_count_ = value;
}
inline void Server_NetworkStats_Channel::set_total_byte_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_byte_count(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.Server.NetworkStats.Channel.total_byte_count)
}

// optional float bytes_per_second = 2 [(.blickfeld.protocol.optional) = true];
inline bool Server_NetworkStats_Channel::_internal_has_bytes_per_second() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Server_NetworkStats_Channel::has_bytes_per_second() const {
  return _internal_has_bytes_per_second();
}
inline void Server_NetworkStats_Channel::clear_bytes_per_second() {
  bytes_per_second_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Server_NetworkStats_Channel::_internal_bytes_per_second() const {
  return bytes_per_second_;
}
inline float Server_NetworkStats_Channel::bytes_per_second() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Server.NetworkStats.Channel.bytes_per_second)
  return _internal_bytes_per_second();
}
inline void Server_NetworkStats_Channel::_internal_set_bytes_per_second(float value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_per_second_ = value;
}
inline void Server_NetworkStats_Channel::set_bytes_per_second(float value) {
  _internal_set_bytes_per_second(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.Server.NetworkStats.Channel.bytes_per_second)
}

// optional float maximum_bytes_per_second = 3 [(.blickfeld.protocol.optional) = true];
inline bool Server_NetworkStats_Channel::_internal_has_maximum_bytes_per_second() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Server_NetworkStats_Channel::has_maximum_bytes_per_second() const {
  return _internal_has_maximum_bytes_per_second();
}
inline void Server_NetworkStats_Channel::clear_maximum_bytes_per_second() {
  maximum_bytes_per_second_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Server_NetworkStats_Channel::_internal_maximum_bytes_per_second() const {
  return maximum_bytes_per_second_;
}
inline float Server_NetworkStats_Channel::maximum_bytes_per_second() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Server.NetworkStats.Channel.maximum_bytes_per_second)
  return _internal_maximum_bytes_per_second();
}
inline void Server_NetworkStats_Channel::_internal_set_maximum_bytes_per_second(float value) {
  _has_bits_[0] |= 0x00000004u;
  maximum_bytes_per_second_ = value;
}
inline void Server_NetworkStats_Channel::set_maximum_bytes_per_second(float value) {
  _internal_set_maximum_bytes_per_second(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.Server.NetworkStats.Channel.maximum_bytes_per_second)
}

// -------------------------------------------------------------------

// Server_NetworkStats

// optional .blickfeld.protocol.status.Server.NetworkStats.Channel sent = 1;
inline bool Server_NetworkStats::_internal_has_sent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sent_ != nullptr);
  return value;
}
inline bool Server_NetworkStats::has_sent() const {
  return _internal_has_sent();
}
inline void Server_NetworkStats::clear_sent() {
  if (sent_ != nullptr) sent_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::blickfeld::protocol::status::Server_NetworkStats_Channel& Server_NetworkStats::_internal_sent() const {
  const ::blickfeld::protocol::status::Server_NetworkStats_Channel* p = sent_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::status::Server_NetworkStats_Channel&>(
      ::blickfeld::protocol::status::_Server_NetworkStats_Channel_default_instance_);
}
inline const ::blickfeld::protocol::status::Server_NetworkStats_Channel& Server_NetworkStats::sent() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Server.NetworkStats.sent)
  return _internal_sent();
}
inline void Server_NetworkStats::unsafe_arena_set_allocated_sent(
    ::blickfeld::protocol::status::Server_NetworkStats_Channel* sent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sent_);
  }
  sent_ = sent;
  if (sent) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.status.Server.NetworkStats.sent)
}
inline ::blickfeld::protocol::status::Server_NetworkStats_Channel* Server_NetworkStats::release_sent() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* temp = sent_;
  sent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::status::Server_NetworkStats_Channel* Server_NetworkStats::unsafe_arena_release_sent() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.Server.NetworkStats.sent)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* temp = sent_;
  sent_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::status::Server_NetworkStats_Channel* Server_NetworkStats::_internal_mutable_sent() {
  _has_bits_[0] |= 0x00000001u;
  if (sent_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::status::Server_NetworkStats_Channel>(GetArena());
    sent_ = p;
  }
  return sent_;
}
inline ::blickfeld::protocol::status::Server_NetworkStats_Channel* Server_NetworkStats::mutable_sent() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.Server.NetworkStats.sent)
  return _internal_mutable_sent();
}
inline void Server_NetworkStats::set_allocated_sent(::blickfeld::protocol::status::Server_NetworkStats_Channel* sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sent_;
  }
  if (sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sent);
    if (message_arena != submessage_arena) {
      sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sent_ = sent;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.status.Server.NetworkStats.sent)
}

// optional .blickfeld.protocol.status.Server.NetworkStats.Channel received = 2;
inline bool Server_NetworkStats::_internal_has_received() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || received_ != nullptr);
  return value;
}
inline bool Server_NetworkStats::has_received() const {
  return _internal_has_received();
}
inline void Server_NetworkStats::clear_received() {
  if (received_ != nullptr) received_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::blickfeld::protocol::status::Server_NetworkStats_Channel& Server_NetworkStats::_internal_received() const {
  const ::blickfeld::protocol::status::Server_NetworkStats_Channel* p = received_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::status::Server_NetworkStats_Channel&>(
      ::blickfeld::protocol::status::_Server_NetworkStats_Channel_default_instance_);
}
inline const ::blickfeld::protocol::status::Server_NetworkStats_Channel& Server_NetworkStats::received() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Server.NetworkStats.received)
  return _internal_received();
}
inline void Server_NetworkStats::unsafe_arena_set_allocated_received(
    ::blickfeld::protocol::status::Server_NetworkStats_Channel* received) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(received_);
  }
  received_ = received;
  if (received) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.status.Server.NetworkStats.received)
}
inline ::blickfeld::protocol::status::Server_NetworkStats_Channel* Server_NetworkStats::release_received() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* temp = received_;
  received_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::status::Server_NetworkStats_Channel* Server_NetworkStats::unsafe_arena_release_received() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.Server.NetworkStats.received)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::status::Server_NetworkStats_Channel* temp = received_;
  received_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::status::Server_NetworkStats_Channel* Server_NetworkStats::_internal_mutable_received() {
  _has_bits_[0] |= 0x00000002u;
  if (received_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::status::Server_NetworkStats_Channel>(GetArena());
    received_ = p;
  }
  return received_;
}
inline ::blickfeld::protocol::status::Server_NetworkStats_Channel* Server_NetworkStats::mutable_received() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.Server.NetworkStats.received)
  return _internal_mutable_received();
}
inline void Server_NetworkStats::set_allocated_received(::blickfeld::protocol::status::Server_NetworkStats_Channel* received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete received_;
  }
  if (received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(received);
    if (message_arena != submessage_arena) {
      received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, received, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  received_ = received;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.status.Server.NetworkStats.received)
}

// optional uint64 dropped_messages = 3 [default = 0];
inline bool Server_NetworkStats::_internal_has_dropped_messages() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Server_NetworkStats::has_dropped_messages() const {
  return _internal_has_dropped_messages();
}
inline void Server_NetworkStats::clear_dropped_messages() {
  dropped_messages_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Server_NetworkStats::_internal_dropped_messages() const {
  return dropped_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Server_NetworkStats::dropped_messages() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Server.NetworkStats.dropped_messages)
  return _internal_dropped_messages();
}
inline void Server_NetworkStats::_internal_set_dropped_messages(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dropped_messages_ = value;
}
inline void Server_NetworkStats::set_dropped_messages(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dropped_messages(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.Server.NetworkStats.dropped_messages)
}

// -------------------------------------------------------------------

// Server_Client

// repeated .blickfeld.protocol.stream.Subscribe subscriptions = 1;
inline int Server_Client::_internal_subscriptions_size() const {
  return subscriptions_.size();
}
inline int Server_Client::subscriptions_size() const {
  return _internal_subscriptions_size();
}
inline ::blickfeld::protocol::stream::Subscribe* Server_Client::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.Server.Client.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::stream::Subscribe >*
Server_Client::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.status.Server.Client.subscriptions)
  return &subscriptions_;
}
inline const ::blickfeld::protocol::stream::Subscribe& Server_Client::_internal_subscriptions(int index) const {
  return subscriptions_.Get(index);
}
inline const ::blickfeld::protocol::stream::Subscribe& Server_Client::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Server.Client.subscriptions)
  return _internal_subscriptions(index);
}
inline ::blickfeld::protocol::stream::Subscribe* Server_Client::_internal_add_subscriptions() {
  return subscriptions_.Add();
}
inline ::blickfeld::protocol::stream::Subscribe* Server_Client::add_subscriptions() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.status.Server.Client.subscriptions)
  return _internal_add_subscriptions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::stream::Subscribe >&
Server_Client::subscriptions() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.status.Server.Client.subscriptions)
  return subscriptions_;
}

// optional .blickfeld.protocol.status.Server.NetworkStats network_stats = 2;
inline bool Server_Client::_internal_has_network_stats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || network_stats_ != nullptr);
  return value;
}
inline bool Server_Client::has_network_stats() const {
  return _internal_has_network_stats();
}
inline void Server_Client::clear_network_stats() {
  if (network_stats_ != nullptr) network_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::blickfeld::protocol::status::Server_NetworkStats& Server_Client::_internal_network_stats() const {
  const ::blickfeld::protocol::status::Server_NetworkStats* p = network_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::status::Server_NetworkStats&>(
      ::blickfeld::protocol::status::_Server_NetworkStats_default_instance_);
}
inline const ::blickfeld::protocol::status::Server_NetworkStats& Server_Client::network_stats() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Server.Client.network_stats)
  return _internal_network_stats();
}
inline void Server_Client::unsafe_arena_set_allocated_network_stats(
    ::blickfeld::protocol::status::Server_NetworkStats* network_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_stats_);
  }
  network_stats_ = network_stats;
  if (network_stats) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.status.Server.Client.network_stats)
}
inline ::blickfeld::protocol::status::Server_NetworkStats* Server_Client::release_network_stats() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::status::Server_NetworkStats* temp = network_stats_;
  network_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::status::Server_NetworkStats* Server_Client::unsafe_arena_release_network_stats() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.Server.Client.network_stats)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::status::Server_NetworkStats* temp = network_stats_;
  network_stats_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::status::Server_NetworkStats* Server_Client::_internal_mutable_network_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (network_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::status::Server_NetworkStats>(GetArena());
    network_stats_ = p;
  }
  return network_stats_;
}
inline ::blickfeld::protocol::status::Server_NetworkStats* Server_Client::mutable_network_stats() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.Server.Client.network_stats)
  return _internal_mutable_network_stats();
}
inline void Server_Client::set_allocated_network_stats(::blickfeld::protocol::status::Server_NetworkStats* network_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete network_stats_;
  }
  if (network_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network_stats);
    if (message_arena != submessage_arena) {
      network_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  network_stats_ = network_stats;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.status.Server.Client.network_stats)
}

// optional string identifier = 3;
inline bool Server_Client::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Server_Client::has_identifier() const {
  return _internal_has_identifier();
}
inline void Server_Client::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Server_Client::identifier() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Server.Client.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Server_Client::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.Server.Client.identifier)
}
inline std::string* Server_Client::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.Server.Client.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& Server_Client::_internal_identifier() const {
  return identifier_.Get();
}
inline void Server_Client::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Server_Client::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Server_Client::release_identifier() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.Server.Client.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Server_Client::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.status.Server.Client.identifier)
}

// -------------------------------------------------------------------

// Server

// repeated .blickfeld.protocol.status.Server.Client clients = 1;
inline int Server::_internal_clients_size() const {
  return clients_.size();
}
inline int Server::clients_size() const {
  return _internal_clients_size();
}
inline void Server::clear_clients() {
  clients_.Clear();
}
inline ::blickfeld::protocol::status::Server_Client* Server::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.Server.clients)
  return clients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::status::Server_Client >*
Server::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.status.Server.clients)
  return &clients_;
}
inline const ::blickfeld::protocol::status::Server_Client& Server::_internal_clients(int index) const {
  return clients_.Get(index);
}
inline const ::blickfeld::protocol::status::Server_Client& Server::clients(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Server.clients)
  return _internal_clients(index);
}
inline ::blickfeld::protocol::status::Server_Client* Server::_internal_add_clients() {
  return clients_.Add();
}
inline ::blickfeld::protocol::status::Server_Client* Server::add_clients() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.status.Server.clients)
  return _internal_add_clients();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::status::Server_Client >&
Server::clients() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.status.Server.clients)
  return clients_;
}

// optional .blickfeld.protocol.status.Server.NetworkStats network_stats = 2;
inline bool Server::_internal_has_network_stats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || network_stats_ != nullptr);
  return value;
}
inline bool Server::has_network_stats() const {
  return _internal_has_network_stats();
}
inline void Server::clear_network_stats() {
  if (network_stats_ != nullptr) network_stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::blickfeld::protocol::status::Server_NetworkStats& Server::_internal_network_stats() const {
  const ::blickfeld::protocol::status::Server_NetworkStats* p = network_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::status::Server_NetworkStats&>(
      ::blickfeld::protocol::status::_Server_NetworkStats_default_instance_);
}
inline const ::blickfeld::protocol::status::Server_NetworkStats& Server::network_stats() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Server.network_stats)
  return _internal_network_stats();
}
inline void Server::unsafe_arena_set_allocated_network_stats(
    ::blickfeld::protocol::status::Server_NetworkStats* network_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_stats_);
  }
  network_stats_ = network_stats;
  if (network_stats) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.status.Server.network_stats)
}
inline ::blickfeld::protocol::status::Server_NetworkStats* Server::release_network_stats() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::status::Server_NetworkStats* temp = network_stats_;
  network_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::status::Server_NetworkStats* Server::unsafe_arena_release_network_stats() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.Server.network_stats)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::status::Server_NetworkStats* temp = network_stats_;
  network_stats_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::status::Server_NetworkStats* Server::_internal_mutable_network_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (network_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::status::Server_NetworkStats>(GetArena());
    network_stats_ = p;
  }
  return network_stats_;
}
inline ::blickfeld::protocol::status::Server_NetworkStats* Server::mutable_network_stats() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.Server.network_stats)
  return _internal_mutable_network_stats();
}
inline void Server::set_allocated_network_stats(::blickfeld::protocol::status::Server_NetworkStats* network_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete network_stats_;
  }
  if (network_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network_stats);
    if (message_arena != submessage_arena) {
      network_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  network_stats_ = network_stats;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.status.Server.network_stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace status
}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2fserver_2eproto
