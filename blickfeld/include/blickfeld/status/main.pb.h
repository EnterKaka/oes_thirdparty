// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/status/main.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2fmain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2fmain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/status/scanner.pb.h"
#include "blickfeld/status/temperature.pb.h"
#include "blickfeld/status/server.pb.h"
#include "blickfeld/status/time_synchronization.pb.h"
#include "blickfeld/status/imu.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fstatus_2fmain_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fstatus_2fmain_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fstatus_2fmain_2eproto;
namespace blickfeld {
namespace protocol {
class Status;
struct StatusDefaultTypeInternal;
BF_DLLEXPORT extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::Status* Arena::CreateMaybeMessage<::blickfeld::protocol::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {

// ===================================================================

class BF_DLLEXPORT Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemperaturesFieldNumber = 2,
    kScannerFieldNumber = 1,
    kServerFieldNumber = 5,
    kImuFieldNumber = 7,
    kTimeSynchronizationFieldNumber = 8,
  };
  // repeated .blickfeld.protocol.status.Temperature temperatures = 2;
  int temperatures_size() const;
  private:
  int _internal_temperatures_size() const;
  public:
  void clear_temperatures();
  ::blickfeld::protocol::status::Temperature* mutable_temperatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::status::Temperature >*
      mutable_temperatures();
  private:
  const ::blickfeld::protocol::status::Temperature& _internal_temperatures(int index) const;
  ::blickfeld::protocol::status::Temperature* _internal_add_temperatures();
  public:
  const ::blickfeld::protocol::status::Temperature& temperatures(int index) const;
  ::blickfeld::protocol::status::Temperature* add_temperatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::status::Temperature >&
      temperatures() const;

  // optional .blickfeld.protocol.status.Scanner scanner = 1;
  bool has_scanner() const;
  private:
  bool _internal_has_scanner() const;
  public:
  void clear_scanner();
  const ::blickfeld::protocol::status::Scanner& scanner() const;
  ::blickfeld::protocol::status::Scanner* release_scanner();
  ::blickfeld::protocol::status::Scanner* mutable_scanner();
  void set_allocated_scanner(::blickfeld::protocol::status::Scanner* scanner);
  private:
  const ::blickfeld::protocol::status::Scanner& _internal_scanner() const;
  ::blickfeld::protocol::status::Scanner* _internal_mutable_scanner();
  public:
  void unsafe_arena_set_allocated_scanner(
      ::blickfeld::protocol::status::Scanner* scanner);
  ::blickfeld::protocol::status::Scanner* unsafe_arena_release_scanner();

  // optional .blickfeld.protocol.status.Server server = 5;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::blickfeld::protocol::status::Server& server() const;
  ::blickfeld::protocol::status::Server* release_server();
  ::blickfeld::protocol::status::Server* mutable_server();
  void set_allocated_server(::blickfeld::protocol::status::Server* server);
  private:
  const ::blickfeld::protocol::status::Server& _internal_server() const;
  ::blickfeld::protocol::status::Server* _internal_mutable_server();
  public:
  void unsafe_arena_set_allocated_server(
      ::blickfeld::protocol::status::Server* server);
  ::blickfeld::protocol::status::Server* unsafe_arena_release_server();

  // optional .blickfeld.protocol.status.IMU imu = 7 [(.blickfeld.protocol.optional) = true];
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::blickfeld::protocol::status::IMU& imu() const;
  ::blickfeld::protocol::status::IMU* release_imu();
  ::blickfeld::protocol::status::IMU* mutable_imu();
  void set_allocated_imu(::blickfeld::protocol::status::IMU* imu);
  private:
  const ::blickfeld::protocol::status::IMU& _internal_imu() const;
  ::blickfeld::protocol::status::IMU* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::blickfeld::protocol::status::IMU* imu);
  ::blickfeld::protocol::status::IMU* unsafe_arena_release_imu();

  // optional .blickfeld.protocol.status.TimeSynchronization time_synchronization = 8 [(.blickfeld.protocol.optional) = true];
  bool has_time_synchronization() const;
  private:
  bool _internal_has_time_synchronization() const;
  public:
  void clear_time_synchronization();
  const ::blickfeld::protocol::status::TimeSynchronization& time_synchronization() const;
  ::blickfeld::protocol::status::TimeSynchronization* release_time_synchronization();
  ::blickfeld::protocol::status::TimeSynchronization* mutable_time_synchronization();
  void set_allocated_time_synchronization(::blickfeld::protocol::status::TimeSynchronization* time_synchronization);
  private:
  const ::blickfeld::protocol::status::TimeSynchronization& _internal_time_synchronization() const;
  ::blickfeld::protocol::status::TimeSynchronization* _internal_mutable_time_synchronization();
  public:
  void unsafe_arena_set_allocated_time_synchronization(
      ::blickfeld::protocol::status::TimeSynchronization* time_synchronization);
  ::blickfeld::protocol::status::TimeSynchronization* unsafe_arena_release_time_synchronization();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Status)
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Status)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::status::Temperature > temperatures_;
  ::blickfeld::protocol::status::Scanner* scanner_;
  ::blickfeld::protocol::status::Server* server_;
  ::blickfeld::protocol::status::IMU* imu_;
  ::blickfeld::protocol::status::TimeSynchronization* time_synchronization_;
  friend struct ::TableStruct_blickfeld_2fstatus_2fmain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// optional .blickfeld.protocol.status.Scanner scanner = 1;
inline bool Status::_internal_has_scanner() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scanner_ != nullptr);
  return value;
}
inline bool Status::has_scanner() const {
  return _internal_has_scanner();
}
inline const ::blickfeld::protocol::status::Scanner& Status::_internal_scanner() const {
  const ::blickfeld::protocol::status::Scanner* p = scanner_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::status::Scanner&>(
      ::blickfeld::protocol::status::_Scanner_default_instance_);
}
inline const ::blickfeld::protocol::status::Scanner& Status::scanner() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Status.scanner)
  return _internal_scanner();
}
inline void Status::unsafe_arena_set_allocated_scanner(
    ::blickfeld::protocol::status::Scanner* scanner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scanner_);
  }
  scanner_ = scanner;
  if (scanner) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Status.scanner)
}
inline ::blickfeld::protocol::status::Scanner* Status::release_scanner() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::status::Scanner* temp = scanner_;
  scanner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::status::Scanner* Status::unsafe_arena_release_scanner() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Status.scanner)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::status::Scanner* temp = scanner_;
  scanner_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::status::Scanner* Status::_internal_mutable_scanner() {
  _has_bits_[0] |= 0x00000001u;
  if (scanner_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::status::Scanner>(GetArena());
    scanner_ = p;
  }
  return scanner_;
}
inline ::blickfeld::protocol::status::Scanner* Status::mutable_scanner() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Status.scanner)
  return _internal_mutable_scanner();
}
inline void Status::set_allocated_scanner(::blickfeld::protocol::status::Scanner* scanner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scanner_);
  }
  if (scanner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scanner)->GetArena();
    if (message_arena != submessage_arena) {
      scanner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scanner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scanner_ = scanner;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Status.scanner)
}

// repeated .blickfeld.protocol.status.Temperature temperatures = 2;
inline int Status::_internal_temperatures_size() const {
  return temperatures_.size();
}
inline int Status::temperatures_size() const {
  return _internal_temperatures_size();
}
inline ::blickfeld::protocol::status::Temperature* Status::mutable_temperatures(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Status.temperatures)
  return temperatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::status::Temperature >*
Status::mutable_temperatures() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.Status.temperatures)
  return &temperatures_;
}
inline const ::blickfeld::protocol::status::Temperature& Status::_internal_temperatures(int index) const {
  return temperatures_.Get(index);
}
inline const ::blickfeld::protocol::status::Temperature& Status::temperatures(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Status.temperatures)
  return _internal_temperatures(index);
}
inline ::blickfeld::protocol::status::Temperature* Status::_internal_add_temperatures() {
  return temperatures_.Add();
}
inline ::blickfeld::protocol::status::Temperature* Status::add_temperatures() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.Status.temperatures)
  return _internal_add_temperatures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::status::Temperature >&
Status::temperatures() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.Status.temperatures)
  return temperatures_;
}

// optional .blickfeld.protocol.status.Server server = 5;
inline bool Status::_internal_has_server() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || server_ != nullptr);
  return value;
}
inline bool Status::has_server() const {
  return _internal_has_server();
}
inline const ::blickfeld::protocol::status::Server& Status::_internal_server() const {
  const ::blickfeld::protocol::status::Server* p = server_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::status::Server&>(
      ::blickfeld::protocol::status::_Server_default_instance_);
}
inline const ::blickfeld::protocol::status::Server& Status::server() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Status.server)
  return _internal_server();
}
inline void Status::unsafe_arena_set_allocated_server(
    ::blickfeld::protocol::status::Server* server) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_);
  }
  server_ = server;
  if (server) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Status.server)
}
inline ::blickfeld::protocol::status::Server* Status::release_server() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::status::Server* temp = server_;
  server_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::status::Server* Status::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Status.server)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::status::Server* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::status::Server* Status::_internal_mutable_server() {
  _has_bits_[0] |= 0x00000002u;
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::status::Server>(GetArena());
    server_ = p;
  }
  return server_;
}
inline ::blickfeld::protocol::status::Server* Status::mutable_server() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Status.server)
  return _internal_mutable_server();
}
inline void Status::set_allocated_server(::blickfeld::protocol::status::Server* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_);
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server)->GetArena();
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Status.server)
}

// optional .blickfeld.protocol.status.IMU imu = 7 [(.blickfeld.protocol.optional) = true];
inline bool Status::_internal_has_imu() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || imu_ != nullptr);
  return value;
}
inline bool Status::has_imu() const {
  return _internal_has_imu();
}
inline const ::blickfeld::protocol::status::IMU& Status::_internal_imu() const {
  const ::blickfeld::protocol::status::IMU* p = imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::status::IMU&>(
      ::blickfeld::protocol::status::_IMU_default_instance_);
}
inline const ::blickfeld::protocol::status::IMU& Status::imu() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Status.imu)
  return _internal_imu();
}
inline void Status::unsafe_arena_set_allocated_imu(
    ::blickfeld::protocol::status::IMU* imu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_);
  }
  imu_ = imu;
  if (imu) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Status.imu)
}
inline ::blickfeld::protocol::status::IMU* Status::release_imu() {
  _has_bits_[0] &= ~0x00000004u;
  ::blickfeld::protocol::status::IMU* temp = imu_;
  imu_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::status::IMU* Status::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Status.imu)
  _has_bits_[0] &= ~0x00000004u;
  ::blickfeld::protocol::status::IMU* temp = imu_;
  imu_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::status::IMU* Status::_internal_mutable_imu() {
  _has_bits_[0] |= 0x00000004u;
  if (imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::status::IMU>(GetArena());
    imu_ = p;
  }
  return imu_;
}
inline ::blickfeld::protocol::status::IMU* Status::mutable_imu() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Status.imu)
  return _internal_mutable_imu();
}
inline void Status::set_allocated_imu(::blickfeld::protocol::status::IMU* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_);
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu)->GetArena();
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Status.imu)
}

// optional .blickfeld.protocol.status.TimeSynchronization time_synchronization = 8 [(.blickfeld.protocol.optional) = true];
inline bool Status::_internal_has_time_synchronization() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || time_synchronization_ != nullptr);
  return value;
}
inline bool Status::has_time_synchronization() const {
  return _internal_has_time_synchronization();
}
inline const ::blickfeld::protocol::status::TimeSynchronization& Status::_internal_time_synchronization() const {
  const ::blickfeld::protocol::status::TimeSynchronization* p = time_synchronization_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::status::TimeSynchronization&>(
      ::blickfeld::protocol::status::_TimeSynchronization_default_instance_);
}
inline const ::blickfeld::protocol::status::TimeSynchronization& Status::time_synchronization() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Status.time_synchronization)
  return _internal_time_synchronization();
}
inline void Status::unsafe_arena_set_allocated_time_synchronization(
    ::blickfeld::protocol::status::TimeSynchronization* time_synchronization) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_synchronization_);
  }
  time_synchronization_ = time_synchronization;
  if (time_synchronization) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Status.time_synchronization)
}
inline ::blickfeld::protocol::status::TimeSynchronization* Status::release_time_synchronization() {
  _has_bits_[0] &= ~0x00000008u;
  ::blickfeld::protocol::status::TimeSynchronization* temp = time_synchronization_;
  time_synchronization_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::status::TimeSynchronization* Status::unsafe_arena_release_time_synchronization() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Status.time_synchronization)
  _has_bits_[0] &= ~0x00000008u;
  ::blickfeld::protocol::status::TimeSynchronization* temp = time_synchronization_;
  time_synchronization_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::status::TimeSynchronization* Status::_internal_mutable_time_synchronization() {
  _has_bits_[0] |= 0x00000008u;
  if (time_synchronization_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::status::TimeSynchronization>(GetArena());
    time_synchronization_ = p;
  }
  return time_synchronization_;
}
inline ::blickfeld::protocol::status::TimeSynchronization* Status::mutable_time_synchronization() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Status.time_synchronization)
  return _internal_mutable_time_synchronization();
}
inline void Status::set_allocated_time_synchronization(::blickfeld::protocol::status::TimeSynchronization* time_synchronization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_synchronization_);
  }
  if (time_synchronization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_synchronization)->GetArena();
    if (message_arena != submessage_arena) {
      time_synchronization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_synchronization, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  time_synchronization_ = time_synchronization;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Status.time_synchronization)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2fmain_2eproto
