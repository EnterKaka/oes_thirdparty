// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/status/scanner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2fscanner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2fscanner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/error.pb.h"
#include "blickfeld/config/scan_pattern.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fstatus_2fscanner_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fstatus_2fscanner_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fstatus_2fscanner_2eproto;
namespace blickfeld {
namespace protocol {
namespace status {
class Scanner;
struct ScannerDefaultTypeInternal;
BF_DLLEXPORT extern ScannerDefaultTypeInternal _Scanner_default_instance_;
}  // namespace status
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::status::Scanner* Arena::CreateMaybeMessage<::blickfeld::protocol::status::Scanner>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace status {

enum Scanner_State : int {
  Scanner_State_INITIALIZING = 1,
  Scanner_State_READY = 2,
  Scanner_State_STARTING = 3,
  Scanner_State_RUNNING = 4,
  Scanner_State_STOPPING = 5,
  Scanner_State_ERRORED = 6,
  Scanner_State_SELF_TESTING = 7
};
BF_DLLEXPORT bool Scanner_State_IsValid(int value);
constexpr Scanner_State Scanner_State_State_MIN = Scanner_State_INITIALIZING;
constexpr Scanner_State Scanner_State_State_MAX = Scanner_State_SELF_TESTING;
constexpr int Scanner_State_State_ARRAYSIZE = Scanner_State_State_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scanner_State_descriptor();
template<typename T>
inline const std::string& Scanner_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scanner_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scanner_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scanner_State_descriptor(), enum_t_value);
}
inline bool Scanner_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scanner_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scanner_State>(
    Scanner_State_descriptor(), name, value);
}
// ===================================================================

class BF_DLLEXPORT Scanner PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.status.Scanner) */ {
 public:
  inline Scanner() : Scanner(nullptr) {}
  ~Scanner() override;
  explicit constexpr Scanner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scanner(const Scanner& from);
  Scanner(Scanner&& from) noexcept
    : Scanner() {
    *this = ::std::move(from);
  }

  inline Scanner& operator=(const Scanner& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scanner& operator=(Scanner&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scanner& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scanner* internal_default_instance() {
    return reinterpret_cast<const Scanner*>(
               &_Scanner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scanner& a, Scanner& b) {
    a.Swap(&b);
  }
  inline void Swap(Scanner* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scanner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scanner* New() const final {
    return CreateMaybeMessage<Scanner>(nullptr);
  }

  Scanner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scanner>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scanner& from);
  void MergeFrom(const Scanner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scanner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.status.Scanner";
  }
  protected:
  explicit Scanner(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scanner_State State;
  static constexpr State INITIALIZING =
    Scanner_State_INITIALIZING;
  static constexpr State READY =
    Scanner_State_READY;
  static constexpr State STARTING =
    Scanner_State_STARTING;
  static constexpr State RUNNING =
    Scanner_State_RUNNING;
  static constexpr State STOPPING =
    Scanner_State_STOPPING;
  static constexpr State ERRORED =
    Scanner_State_ERRORED;
  static constexpr State SELF_TESTING =
    Scanner_State_SELF_TESTING;
  static inline bool State_IsValid(int value) {
    return Scanner_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Scanner_State_State_MIN;
  static constexpr State State_MAX =
    Scanner_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Scanner_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Scanner_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Scanner_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return Scanner_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 3,
    kScanPatternFieldNumber = 4,
    kStateFieldNumber = 1,
  };
  // optional .blickfeld.protocol.Error error = 3 [(.blickfeld.protocol.optional) = true];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::blickfeld::protocol::Error& error() const;
  ::blickfeld::protocol::Error* release_error();
  ::blickfeld::protocol::Error* mutable_error();
  void set_allocated_error(::blickfeld::protocol::Error* error);
  private:
  const ::blickfeld::protocol::Error& _internal_error() const;
  ::blickfeld::protocol::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::blickfeld::protocol::Error* error);
  ::blickfeld::protocol::Error* unsafe_arena_release_error();

  // optional .blickfeld.protocol.config.ScanPattern scan_pattern = 4 [(.blickfeld.protocol.allow_sparse) = true];
  bool has_scan_pattern() const;
  private:
  bool _internal_has_scan_pattern() const;
  public:
  void clear_scan_pattern();
  const ::blickfeld::protocol::config::ScanPattern& scan_pattern() const;
  ::blickfeld::protocol::config::ScanPattern* release_scan_pattern();
  ::blickfeld::protocol::config::ScanPattern* mutable_scan_pattern();
  void set_allocated_scan_pattern(::blickfeld::protocol::config::ScanPattern* scan_pattern);
  private:
  const ::blickfeld::protocol::config::ScanPattern& _internal_scan_pattern() const;
  ::blickfeld::protocol::config::ScanPattern* _internal_mutable_scan_pattern();
  public:
  void unsafe_arena_set_allocated_scan_pattern(
      ::blickfeld::protocol::config::ScanPattern* scan_pattern);
  ::blickfeld::protocol::config::ScanPattern* unsafe_arena_release_scan_pattern();

  // optional .blickfeld.protocol.status.Scanner.State state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::blickfeld::protocol::status::Scanner_State state() const;
  void set_state(::blickfeld::protocol::status::Scanner_State value);
  private:
  ::blickfeld::protocol::status::Scanner_State _internal_state() const;
  void _internal_set_state(::blickfeld::protocol::status::Scanner_State value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.status.Scanner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::Error* error_;
  ::blickfeld::protocol::config::ScanPattern* scan_pattern_;
  int state_;
  friend struct ::TableStruct_blickfeld_2fstatus_2fscanner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scanner

// optional .blickfeld.protocol.status.Scanner.State state = 1;
inline bool Scanner::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Scanner::has_state() const {
  return _internal_has_state();
}
inline void Scanner::clear_state() {
  state_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::blickfeld::protocol::status::Scanner_State Scanner::_internal_state() const {
  return static_cast< ::blickfeld::protocol::status::Scanner_State >(state_);
}
inline ::blickfeld::protocol::status::Scanner_State Scanner::state() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Scanner.state)
  return _internal_state();
}
inline void Scanner::_internal_set_state(::blickfeld::protocol::status::Scanner_State value) {
  assert(::blickfeld::protocol::status::Scanner_State_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void Scanner::set_state(::blickfeld::protocol::status::Scanner_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.Scanner.state)
}

// optional .blickfeld.protocol.config.ScanPattern scan_pattern = 4 [(.blickfeld.protocol.allow_sparse) = true];
inline bool Scanner::_internal_has_scan_pattern() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || scan_pattern_ != nullptr);
  return value;
}
inline bool Scanner::has_scan_pattern() const {
  return _internal_has_scan_pattern();
}
inline const ::blickfeld::protocol::config::ScanPattern& Scanner::_internal_scan_pattern() const {
  const ::blickfeld::protocol::config::ScanPattern* p = scan_pattern_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern&>(
      ::blickfeld::protocol::config::_ScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern& Scanner::scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Scanner.scan_pattern)
  return _internal_scan_pattern();
}
inline void Scanner::unsafe_arena_set_allocated_scan_pattern(
    ::blickfeld::protocol::config::ScanPattern* scan_pattern) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_pattern_);
  }
  scan_pattern_ = scan_pattern;
  if (scan_pattern) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.status.Scanner.scan_pattern)
}
inline ::blickfeld::protocol::config::ScanPattern* Scanner::release_scan_pattern() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::ScanPattern* temp = scan_pattern_;
  scan_pattern_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Scanner::unsafe_arena_release_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.Scanner.scan_pattern)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::ScanPattern* temp = scan_pattern_;
  scan_pattern_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Scanner::_internal_mutable_scan_pattern() {
  _has_bits_[0] |= 0x00000002u;
  if (scan_pattern_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern>(GetArena());
    scan_pattern_ = p;
  }
  return scan_pattern_;
}
inline ::blickfeld::protocol::config::ScanPattern* Scanner::mutable_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.Scanner.scan_pattern)
  return _internal_mutable_scan_pattern();
}
inline void Scanner::set_allocated_scan_pattern(::blickfeld::protocol::config::ScanPattern* scan_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_pattern_);
  }
  if (scan_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_pattern)->GetArena();
    if (message_arena != submessage_arena) {
      scan_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_pattern, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  scan_pattern_ = scan_pattern;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.status.Scanner.scan_pattern)
}

// optional .blickfeld.protocol.Error error = 3 [(.blickfeld.protocol.optional) = true];
inline bool Scanner::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || error_ != nullptr);
  return value;
}
inline bool Scanner::has_error() const {
  return _internal_has_error();
}
inline const ::blickfeld::protocol::Error& Scanner::_internal_error() const {
  const ::blickfeld::protocol::Error* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::Error&>(
      ::blickfeld::protocol::_Error_default_instance_);
}
inline const ::blickfeld::protocol::Error& Scanner::error() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.Scanner.error)
  return _internal_error();
}
inline void Scanner::unsafe_arena_set_allocated_error(
    ::blickfeld::protocol::Error* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.status.Scanner.error)
}
inline ::blickfeld::protocol::Error* Scanner::release_error() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::Error* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::Error* Scanner::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.Scanner.error)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::Error* Scanner::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000001u;
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::Error>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::blickfeld::protocol::Error* Scanner::mutable_error() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.Scanner.error)
  return _internal_mutable_error();
}
inline void Scanner::set_allocated_error(::blickfeld::protocol::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.status.Scanner.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace status
}  // namespace protocol
}  // namespace blickfeld

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blickfeld::protocol::status::Scanner_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::status::Scanner_State>() {
  return ::blickfeld::protocol::status::Scanner_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2fscanner_2eproto
