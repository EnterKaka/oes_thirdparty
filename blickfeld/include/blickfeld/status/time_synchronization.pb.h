// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/status/time_synchronization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2ftime_5fsynchronization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2ftime_5fsynchronization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fstatus_2ftime_5fsynchronization_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fstatus_2ftime_5fsynchronization_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fstatus_2ftime_5fsynchronization_2eproto;
namespace blickfeld {
namespace protocol {
namespace status {
class TimeSynchronization;
struct TimeSynchronizationDefaultTypeInternal;
BF_DLLEXPORT extern TimeSynchronizationDefaultTypeInternal _TimeSynchronization_default_instance_;
class TimeSynchronization_NTP;
struct TimeSynchronization_NTPDefaultTypeInternal;
BF_DLLEXPORT extern TimeSynchronization_NTPDefaultTypeInternal _TimeSynchronization_NTP_default_instance_;
class TimeSynchronization_PTP;
struct TimeSynchronization_PTPDefaultTypeInternal;
BF_DLLEXPORT extern TimeSynchronization_PTPDefaultTypeInternal _TimeSynchronization_PTP_default_instance_;
}  // namespace status
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::status::TimeSynchronization* Arena::CreateMaybeMessage<::blickfeld::protocol::status::TimeSynchronization>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::status::TimeSynchronization_NTP* Arena::CreateMaybeMessage<::blickfeld::protocol::status::TimeSynchronization_NTP>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::status::TimeSynchronization_PTP* Arena::CreateMaybeMessage<::blickfeld::protocol::status::TimeSynchronization_PTP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace status {

enum TimeSynchronization_State : int {
  TimeSynchronization_State_STOPPED = 1,
  TimeSynchronization_State_INITIALIZING = 2,
  TimeSynchronization_State_SYNCED = 3,
  TimeSynchronization_State_FAILED = 4
};
BF_DLLEXPORT bool TimeSynchronization_State_IsValid(int value);
constexpr TimeSynchronization_State TimeSynchronization_State_State_MIN = TimeSynchronization_State_STOPPED;
constexpr TimeSynchronization_State TimeSynchronization_State_State_MAX = TimeSynchronization_State_FAILED;
constexpr int TimeSynchronization_State_State_ARRAYSIZE = TimeSynchronization_State_State_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeSynchronization_State_descriptor();
template<typename T>
inline const std::string& TimeSynchronization_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeSynchronization_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeSynchronization_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeSynchronization_State_descriptor(), enum_t_value);
}
inline bool TimeSynchronization_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TimeSynchronization_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeSynchronization_State>(
    TimeSynchronization_State_descriptor(), name, value);
}
// ===================================================================

class BF_DLLEXPORT TimeSynchronization_PTP PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.status.TimeSynchronization.PTP) */ {
 public:
  inline TimeSynchronization_PTP() : TimeSynchronization_PTP(nullptr) {}
  ~TimeSynchronization_PTP() override;
  explicit constexpr TimeSynchronization_PTP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSynchronization_PTP(const TimeSynchronization_PTP& from);
  TimeSynchronization_PTP(TimeSynchronization_PTP&& from) noexcept
    : TimeSynchronization_PTP() {
    *this = ::std::move(from);
  }

  inline TimeSynchronization_PTP& operator=(const TimeSynchronization_PTP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSynchronization_PTP& operator=(TimeSynchronization_PTP&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSynchronization_PTP& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSynchronization_PTP* internal_default_instance() {
    return reinterpret_cast<const TimeSynchronization_PTP*>(
               &_TimeSynchronization_PTP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimeSynchronization_PTP& a, TimeSynchronization_PTP& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSynchronization_PTP* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSynchronization_PTP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSynchronization_PTP* New() const final {
    return CreateMaybeMessage<TimeSynchronization_PTP>(nullptr);
  }

  TimeSynchronization_PTP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSynchronization_PTP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSynchronization_PTP& from);
  void MergeFrom(const TimeSynchronization_PTP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSynchronization_PTP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.status.TimeSynchronization.PTP";
  }
  protected:
  explicit TimeSynchronization_PTP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kClockIdFieldNumber = 2,
    kLastPacketReceivedFieldNumber = 7,
    kOneWayDelayFieldNumber = 3,
    kSlaveToMasterFieldNumber = 4,
    kMasterToSlaveFieldNumber = 5,
    kObservedDriftFieldNumber = 6,
  };
  // optional string state = 1 [(.blickfeld.protocol.optional) = true];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // optional string clock_id = 2 [(.blickfeld.protocol.optional) = true];
  bool has_clock_id() const;
  private:
  bool _internal_has_clock_id() const;
  public:
  void clear_clock_id();
  const std::string& clock_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clock_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clock_id();
  std::string* release_clock_id();
  void set_allocated_clock_id(std::string* clock_id);
  private:
  const std::string& _internal_clock_id() const;
  void _internal_set_clock_id(const std::string& value);
  std::string* _internal_mutable_clock_id();
  public:

  // optional string last_packet_received = 7 [(.blickfeld.protocol.optional) = true];
  bool has_last_packet_received() const;
  private:
  bool _internal_has_last_packet_received() const;
  public:
  void clear_last_packet_received();
  const std::string& last_packet_received() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_packet_received(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_packet_received();
  std::string* release_last_packet_received();
  void set_allocated_last_packet_received(std::string* last_packet_received);
  private:
  const std::string& _internal_last_packet_received() const;
  void _internal_set_last_packet_received(const std::string& value);
  std::string* _internal_mutable_last_packet_received();
  public:

  // optional float one_way_delay = 3 [(.blickfeld.protocol.optional) = true];
  bool has_one_way_delay() const;
  private:
  bool _internal_has_one_way_delay() const;
  public:
  void clear_one_way_delay();
  float one_way_delay() const;
  void set_one_way_delay(float value);
  private:
  float _internal_one_way_delay() const;
  void _internal_set_one_way_delay(float value);
  public:

  // optional float slave_to_master = 4 [(.blickfeld.protocol.optional) = true];
  bool has_slave_to_master() const;
  private:
  bool _internal_has_slave_to_master() const;
  public:
  void clear_slave_to_master();
  float slave_to_master() const;
  void set_slave_to_master(float value);
  private:
  float _internal_slave_to_master() const;
  void _internal_set_slave_to_master(float value);
  public:

  // optional float master_to_slave = 5 [(.blickfeld.protocol.optional) = true];
  bool has_master_to_slave() const;
  private:
  bool _internal_has_master_to_slave() const;
  public:
  void clear_master_to_slave();
  float master_to_slave() const;
  void set_master_to_slave(float value);
  private:
  float _internal_master_to_slave() const;
  void _internal_set_master_to_slave(float value);
  public:

  // optional float observed_drift = 6 [(.blickfeld.protocol.optional) = true];
  bool has_observed_drift() const;
  private:
  bool _internal_has_observed_drift() const;
  public:
  void clear_observed_drift();
  float observed_drift() const;
  void set_observed_drift(float value);
  private:
  float _internal_observed_drift() const;
  void _internal_set_observed_drift(float value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.status.TimeSynchronization.PTP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clock_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_packet_received_;
  float one_way_delay_;
  float slave_to_master_;
  float master_to_slave_;
  float observed_drift_;
  friend struct ::TableStruct_blickfeld_2fstatus_2ftime_5fsynchronization_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT TimeSynchronization_NTP PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.status.TimeSynchronization.NTP) */ {
 public:
  inline TimeSynchronization_NTP() : TimeSynchronization_NTP(nullptr) {}
  ~TimeSynchronization_NTP() override;
  explicit constexpr TimeSynchronization_NTP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSynchronization_NTP(const TimeSynchronization_NTP& from);
  TimeSynchronization_NTP(TimeSynchronization_NTP&& from) noexcept
    : TimeSynchronization_NTP() {
    *this = ::std::move(from);
  }

  inline TimeSynchronization_NTP& operator=(const TimeSynchronization_NTP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSynchronization_NTP& operator=(TimeSynchronization_NTP&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSynchronization_NTP& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSynchronization_NTP* internal_default_instance() {
    return reinterpret_cast<const TimeSynchronization_NTP*>(
               &_TimeSynchronization_NTP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeSynchronization_NTP& a, TimeSynchronization_NTP& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSynchronization_NTP* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSynchronization_NTP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSynchronization_NTP* New() const final {
    return CreateMaybeMessage<TimeSynchronization_NTP>(nullptr);
  }

  TimeSynchronization_NTP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSynchronization_NTP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSynchronization_NTP& from);
  void MergeFrom(const TimeSynchronization_NTP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSynchronization_NTP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.status.TimeSynchronization.NTP";
  }
  protected:
  explicit TimeSynchronization_NTP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequencyOffsetFieldNumber = 1,
    kRmsJitterFieldNumber = 2,
    kAllanDeviationFieldNumber = 3,
    kClockDisciplineTimeConstantFieldNumber = 4,
  };
  // optional float frequency_offset = 1 [(.blickfeld.protocol.optional) = true];
  bool has_frequency_offset() const;
  private:
  bool _internal_has_frequency_offset() const;
  public:
  void clear_frequency_offset();
  float frequency_offset() const;
  void set_frequency_offset(float value);
  private:
  float _internal_frequency_offset() const;
  void _internal_set_frequency_offset(float value);
  public:

  // optional float rms_jitter = 2 [(.blickfeld.protocol.optional) = true];
  bool has_rms_jitter() const;
  private:
  bool _internal_has_rms_jitter() const;
  public:
  void clear_rms_jitter();
  float rms_jitter() const;
  void set_rms_jitter(float value);
  private:
  float _internal_rms_jitter() const;
  void _internal_set_rms_jitter(float value);
  public:

  // optional float allan_deviation = 3 [(.blickfeld.protocol.optional) = true];
  bool has_allan_deviation() const;
  private:
  bool _internal_has_allan_deviation() const;
  public:
  void clear_allan_deviation();
  float allan_deviation() const;
  void set_allan_deviation(float value);
  private:
  float _internal_allan_deviation() const;
  void _internal_set_allan_deviation(float value);
  public:

  // optional float clock_discipline_time_constant = 4 [(.blickfeld.protocol.optional) = true];
  bool has_clock_discipline_time_constant() const;
  private:
  bool _internal_has_clock_discipline_time_constant() const;
  public:
  void clear_clock_discipline_time_constant();
  float clock_discipline_time_constant() const;
  void set_clock_discipline_time_constant(float value);
  private:
  float _internal_clock_discipline_time_constant() const;
  void _internal_set_clock_discipline_time_constant(float value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.status.TimeSynchronization.NTP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float frequency_offset_;
  float rms_jitter_;
  float allan_deviation_;
  float clock_discipline_time_constant_;
  friend struct ::TableStruct_blickfeld_2fstatus_2ftime_5fsynchronization_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT TimeSynchronization PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.status.TimeSynchronization) */ {
 public:
  inline TimeSynchronization() : TimeSynchronization(nullptr) {}
  ~TimeSynchronization() override;
  explicit constexpr TimeSynchronization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeSynchronization(const TimeSynchronization& from);
  TimeSynchronization(TimeSynchronization&& from) noexcept
    : TimeSynchronization() {
    *this = ::std::move(from);
  }

  inline TimeSynchronization& operator=(const TimeSynchronization& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSynchronization& operator=(TimeSynchronization&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSynchronization& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kNtp = 3,
    kPtp = 4,
    KIND_NOT_SET = 0,
  };

  static inline const TimeSynchronization* internal_default_instance() {
    return reinterpret_cast<const TimeSynchronization*>(
               &_TimeSynchronization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimeSynchronization& a, TimeSynchronization& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSynchronization* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSynchronization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSynchronization* New() const final {
    return CreateMaybeMessage<TimeSynchronization>(nullptr);
  }

  TimeSynchronization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSynchronization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSynchronization& from);
  void MergeFrom(const TimeSynchronization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSynchronization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.status.TimeSynchronization";
  }
  protected:
  explicit TimeSynchronization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TimeSynchronization_PTP PTP;
  typedef TimeSynchronization_NTP NTP;

  typedef TimeSynchronization_State State;
  static constexpr State STOPPED =
    TimeSynchronization_State_STOPPED;
  static constexpr State INITIALIZING =
    TimeSynchronization_State_INITIALIZING;
  static constexpr State SYNCED =
    TimeSynchronization_State_SYNCED;
  static constexpr State FAILED =
    TimeSynchronization_State_FAILED;
  static inline bool State_IsValid(int value) {
    return TimeSynchronization_State_IsValid(value);
  }
  static constexpr State State_MIN =
    TimeSynchronization_State_State_MIN;
  static constexpr State State_MAX =
    TimeSynchronization_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    TimeSynchronization_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return TimeSynchronization_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return TimeSynchronization_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return TimeSynchronization_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFromMasterFieldNumber = 2,
    kStateFieldNumber = 1,
    kNtpFieldNumber = 3,
    kPtpFieldNumber = 4,
  };
  // optional float offset_from_master = 2 [(.blickfeld.protocol.optional) = true];
  bool has_offset_from_master() const;
  private:
  bool _internal_has_offset_from_master() const;
  public:
  void clear_offset_from_master();
  float offset_from_master() const;
  void set_offset_from_master(float value);
  private:
  float _internal_offset_from_master() const;
  void _internal_set_offset_from_master(float value);
  public:

  // optional .blickfeld.protocol.status.TimeSynchronization.State state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::blickfeld::protocol::status::TimeSynchronization_State state() const;
  void set_state(::blickfeld::protocol::status::TimeSynchronization_State value);
  private:
  ::blickfeld::protocol::status::TimeSynchronization_State _internal_state() const;
  void _internal_set_state(::blickfeld::protocol::status::TimeSynchronization_State value);
  public:

  // .blickfeld.protocol.status.TimeSynchronization.NTP ntp = 3;
  bool has_ntp() const;
  private:
  bool _internal_has_ntp() const;
  public:
  void clear_ntp();
  const ::blickfeld::protocol::status::TimeSynchronization_NTP& ntp() const;
  ::blickfeld::protocol::status::TimeSynchronization_NTP* release_ntp();
  ::blickfeld::protocol::status::TimeSynchronization_NTP* mutable_ntp();
  void set_allocated_ntp(::blickfeld::protocol::status::TimeSynchronization_NTP* ntp);
  private:
  const ::blickfeld::protocol::status::TimeSynchronization_NTP& _internal_ntp() const;
  ::blickfeld::protocol::status::TimeSynchronization_NTP* _internal_mutable_ntp();
  public:
  void unsafe_arena_set_allocated_ntp(
      ::blickfeld::protocol::status::TimeSynchronization_NTP* ntp);
  ::blickfeld::protocol::status::TimeSynchronization_NTP* unsafe_arena_release_ntp();

  // .blickfeld.protocol.status.TimeSynchronization.PTP ptp = 4;
  bool has_ptp() const;
  private:
  bool _internal_has_ptp() const;
  public:
  void clear_ptp();
  const ::blickfeld::protocol::status::TimeSynchronization_PTP& ptp() const;
  ::blickfeld::protocol::status::TimeSynchronization_PTP* release_ptp();
  ::blickfeld::protocol::status::TimeSynchronization_PTP* mutable_ptp();
  void set_allocated_ptp(::blickfeld::protocol::status::TimeSynchronization_PTP* ptp);
  private:
  const ::blickfeld::protocol::status::TimeSynchronization_PTP& _internal_ptp() const;
  ::blickfeld::protocol::status::TimeSynchronization_PTP* _internal_mutable_ptp();
  public:
  void unsafe_arena_set_allocated_ptp(
      ::blickfeld::protocol::status::TimeSynchronization_PTP* ptp);
  ::blickfeld::protocol::status::TimeSynchronization_PTP* unsafe_arena_release_ptp();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.status.TimeSynchronization)
 private:
  class _Internal;
  void set_has_ntp();
  void set_has_ptp();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float offset_from_master_;
  int state_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::status::TimeSynchronization_NTP* ntp_;
    ::blickfeld::protocol::status::TimeSynchronization_PTP* ptp_;
  } kind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fstatus_2ftime_5fsynchronization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimeSynchronization_PTP

// optional string state = 1 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization_PTP::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TimeSynchronization_PTP::has_state() const {
  return _internal_has_state();
}
inline void TimeSynchronization_PTP::clear_state() {
  state_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TimeSynchronization_PTP::state() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.PTP.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TimeSynchronization_PTP::set_state(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.PTP.state)
}
inline std::string* TimeSynchronization_PTP::mutable_state() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.TimeSynchronization.PTP.state)
  return _internal_mutable_state();
}
inline const std::string& TimeSynchronization_PTP::_internal_state() const {
  return state_.Get();
}
inline void TimeSynchronization_PTP::_internal_set_state(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TimeSynchronization_PTP::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeSynchronization_PTP::release_state() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.TimeSynchronization.PTP.state)
  if (!_internal_has_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return state_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeSynchronization_PTP::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.status.TimeSynchronization.PTP.state)
}

// optional string clock_id = 2 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization_PTP::_internal_has_clock_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimeSynchronization_PTP::has_clock_id() const {
  return _internal_has_clock_id();
}
inline void TimeSynchronization_PTP::clear_clock_id() {
  clock_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TimeSynchronization_PTP::clock_id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.PTP.clock_id)
  return _internal_clock_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TimeSynchronization_PTP::set_clock_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 clock_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.PTP.clock_id)
}
inline std::string* TimeSynchronization_PTP::mutable_clock_id() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.TimeSynchronization.PTP.clock_id)
  return _internal_mutable_clock_id();
}
inline const std::string& TimeSynchronization_PTP::_internal_clock_id() const {
  return clock_id_.Get();
}
inline void TimeSynchronization_PTP::_internal_set_clock_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clock_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TimeSynchronization_PTP::_internal_mutable_clock_id() {
  _has_bits_[0] |= 0x00000002u;
  return clock_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeSynchronization_PTP::release_clock_id() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.TimeSynchronization.PTP.clock_id)
  if (!_internal_has_clock_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clock_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeSynchronization_PTP::set_allocated_clock_id(std::string* clock_id) {
  if (clock_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clock_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clock_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.status.TimeSynchronization.PTP.clock_id)
}

// optional float one_way_delay = 3 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization_PTP::_internal_has_one_way_delay() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TimeSynchronization_PTP::has_one_way_delay() const {
  return _internal_has_one_way_delay();
}
inline void TimeSynchronization_PTP::clear_one_way_delay() {
  one_way_delay_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TimeSynchronization_PTP::_internal_one_way_delay() const {
  return one_way_delay_;
}
inline float TimeSynchronization_PTP::one_way_delay() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.PTP.one_way_delay)
  return _internal_one_way_delay();
}
inline void TimeSynchronization_PTP::_internal_set_one_way_delay(float value) {
  _has_bits_[0] |= 0x00000008u;
  one_way_delay_ = value;
}
inline void TimeSynchronization_PTP::set_one_way_delay(float value) {
  _internal_set_one_way_delay(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.PTP.one_way_delay)
}

// optional float slave_to_master = 4 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization_PTP::_internal_has_slave_to_master() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TimeSynchronization_PTP::has_slave_to_master() const {
  return _internal_has_slave_to_master();
}
inline void TimeSynchronization_PTP::clear_slave_to_master() {
  slave_to_master_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TimeSynchronization_PTP::_internal_slave_to_master() const {
  return slave_to_master_;
}
inline float TimeSynchronization_PTP::slave_to_master() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.PTP.slave_to_master)
  return _internal_slave_to_master();
}
inline void TimeSynchronization_PTP::_internal_set_slave_to_master(float value) {
  _has_bits_[0] |= 0x00000010u;
  slave_to_master_ = value;
}
inline void TimeSynchronization_PTP::set_slave_to_master(float value) {
  _internal_set_slave_to_master(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.PTP.slave_to_master)
}

// optional float master_to_slave = 5 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization_PTP::_internal_has_master_to_slave() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TimeSynchronization_PTP::has_master_to_slave() const {
  return _internal_has_master_to_slave();
}
inline void TimeSynchronization_PTP::clear_master_to_slave() {
  master_to_slave_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TimeSynchronization_PTP::_internal_master_to_slave() const {
  return master_to_slave_;
}
inline float TimeSynchronization_PTP::master_to_slave() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.PTP.master_to_slave)
  return _internal_master_to_slave();
}
inline void TimeSynchronization_PTP::_internal_set_master_to_slave(float value) {
  _has_bits_[0] |= 0x00000020u;
  master_to_slave_ = value;
}
inline void TimeSynchronization_PTP::set_master_to_slave(float value) {
  _internal_set_master_to_slave(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.PTP.master_to_slave)
}

// optional float observed_drift = 6 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization_PTP::_internal_has_observed_drift() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TimeSynchronization_PTP::has_observed_drift() const {
  return _internal_has_observed_drift();
}
inline void TimeSynchronization_PTP::clear_observed_drift() {
  observed_drift_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TimeSynchronization_PTP::_internal_observed_drift() const {
  return observed_drift_;
}
inline float TimeSynchronization_PTP::observed_drift() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.PTP.observed_drift)
  return _internal_observed_drift();
}
inline void TimeSynchronization_PTP::_internal_set_observed_drift(float value) {
  _has_bits_[0] |= 0x00000040u;
  observed_drift_ = value;
}
inline void TimeSynchronization_PTP::set_observed_drift(float value) {
  _internal_set_observed_drift(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.PTP.observed_drift)
}

// optional string last_packet_received = 7 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization_PTP::_internal_has_last_packet_received() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TimeSynchronization_PTP::has_last_packet_received() const {
  return _internal_has_last_packet_received();
}
inline void TimeSynchronization_PTP::clear_last_packet_received() {
  last_packet_received_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TimeSynchronization_PTP::last_packet_received() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.PTP.last_packet_received)
  return _internal_last_packet_received();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TimeSynchronization_PTP::set_last_packet_received(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 last_packet_received_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.PTP.last_packet_received)
}
inline std::string* TimeSynchronization_PTP::mutable_last_packet_received() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.TimeSynchronization.PTP.last_packet_received)
  return _internal_mutable_last_packet_received();
}
inline const std::string& TimeSynchronization_PTP::_internal_last_packet_received() const {
  return last_packet_received_.Get();
}
inline void TimeSynchronization_PTP::_internal_set_last_packet_received(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  last_packet_received_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TimeSynchronization_PTP::_internal_mutable_last_packet_received() {
  _has_bits_[0] |= 0x00000004u;
  return last_packet_received_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimeSynchronization_PTP::release_last_packet_received() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.TimeSynchronization.PTP.last_packet_received)
  if (!_internal_has_last_packet_received()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return last_packet_received_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeSynchronization_PTP::set_allocated_last_packet_received(std::string* last_packet_received) {
  if (last_packet_received != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  last_packet_received_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_packet_received,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.status.TimeSynchronization.PTP.last_packet_received)
}

// -------------------------------------------------------------------

// TimeSynchronization_NTP

// optional float frequency_offset = 1 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization_NTP::_internal_has_frequency_offset() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TimeSynchronization_NTP::has_frequency_offset() const {
  return _internal_has_frequency_offset();
}
inline void TimeSynchronization_NTP::clear_frequency_offset() {
  frequency_offset_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TimeSynchronization_NTP::_internal_frequency_offset() const {
  return frequency_offset_;
}
inline float TimeSynchronization_NTP::frequency_offset() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.NTP.frequency_offset)
  return _internal_frequency_offset();
}
inline void TimeSynchronization_NTP::_internal_set_frequency_offset(float value) {
  _has_bits_[0] |= 0x00000001u;
  frequency_offset_ = value;
}
inline void TimeSynchronization_NTP::set_frequency_offset(float value) {
  _internal_set_frequency_offset(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.NTP.frequency_offset)
}

// optional float rms_jitter = 2 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization_NTP::_internal_has_rms_jitter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimeSynchronization_NTP::has_rms_jitter() const {
  return _internal_has_rms_jitter();
}
inline void TimeSynchronization_NTP::clear_rms_jitter() {
  rms_jitter_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TimeSynchronization_NTP::_internal_rms_jitter() const {
  return rms_jitter_;
}
inline float TimeSynchronization_NTP::rms_jitter() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.NTP.rms_jitter)
  return _internal_rms_jitter();
}
inline void TimeSynchronization_NTP::_internal_set_rms_jitter(float value) {
  _has_bits_[0] |= 0x00000002u;
  rms_jitter_ = value;
}
inline void TimeSynchronization_NTP::set_rms_jitter(float value) {
  _internal_set_rms_jitter(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.NTP.rms_jitter)
}

// optional float allan_deviation = 3 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization_NTP::_internal_has_allan_deviation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TimeSynchronization_NTP::has_allan_deviation() const {
  return _internal_has_allan_deviation();
}
inline void TimeSynchronization_NTP::clear_allan_deviation() {
  allan_deviation_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TimeSynchronization_NTP::_internal_allan_deviation() const {
  return allan_deviation_;
}
inline float TimeSynchronization_NTP::allan_deviation() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.NTP.allan_deviation)
  return _internal_allan_deviation();
}
inline void TimeSynchronization_NTP::_internal_set_allan_deviation(float value) {
  _has_bits_[0] |= 0x00000004u;
  allan_deviation_ = value;
}
inline void TimeSynchronization_NTP::set_allan_deviation(float value) {
  _internal_set_allan_deviation(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.NTP.allan_deviation)
}

// optional float clock_discipline_time_constant = 4 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization_NTP::_internal_has_clock_discipline_time_constant() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TimeSynchronization_NTP::has_clock_discipline_time_constant() const {
  return _internal_has_clock_discipline_time_constant();
}
inline void TimeSynchronization_NTP::clear_clock_discipline_time_constant() {
  clock_discipline_time_constant_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TimeSynchronization_NTP::_internal_clock_discipline_time_constant() const {
  return clock_discipline_time_constant_;
}
inline float TimeSynchronization_NTP::clock_discipline_time_constant() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.NTP.clock_discipline_time_constant)
  return _internal_clock_discipline_time_constant();
}
inline void TimeSynchronization_NTP::_internal_set_clock_discipline_time_constant(float value) {
  _has_bits_[0] |= 0x00000008u;
  clock_discipline_time_constant_ = value;
}
inline void TimeSynchronization_NTP::set_clock_discipline_time_constant(float value) {
  _internal_set_clock_discipline_time_constant(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.NTP.clock_discipline_time_constant)
}

// -------------------------------------------------------------------

// TimeSynchronization

// optional .blickfeld.protocol.status.TimeSynchronization.State state = 1;
inline bool TimeSynchronization::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimeSynchronization::has_state() const {
  return _internal_has_state();
}
inline void TimeSynchronization::clear_state() {
  state_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::blickfeld::protocol::status::TimeSynchronization_State TimeSynchronization::_internal_state() const {
  return static_cast< ::blickfeld::protocol::status::TimeSynchronization_State >(state_);
}
inline ::blickfeld::protocol::status::TimeSynchronization_State TimeSynchronization::state() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.state)
  return _internal_state();
}
inline void TimeSynchronization::_internal_set_state(::blickfeld::protocol::status::TimeSynchronization_State value) {
  assert(::blickfeld::protocol::status::TimeSynchronization_State_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
}
inline void TimeSynchronization::set_state(::blickfeld::protocol::status::TimeSynchronization_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.state)
}

// optional float offset_from_master = 2 [(.blickfeld.protocol.optional) = true];
inline bool TimeSynchronization::_internal_has_offset_from_master() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TimeSynchronization::has_offset_from_master() const {
  return _internal_has_offset_from_master();
}
inline void TimeSynchronization::clear_offset_from_master() {
  offset_from_master_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TimeSynchronization::_internal_offset_from_master() const {
  return offset_from_master_;
}
inline float TimeSynchronization::offset_from_master() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.offset_from_master)
  return _internal_offset_from_master();
}
inline void TimeSynchronization::_internal_set_offset_from_master(float value) {
  _has_bits_[0] |= 0x00000001u;
  offset_from_master_ = value;
}
inline void TimeSynchronization::set_offset_from_master(float value) {
  _internal_set_offset_from_master(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.status.TimeSynchronization.offset_from_master)
}

// .blickfeld.protocol.status.TimeSynchronization.NTP ntp = 3;
inline bool TimeSynchronization::_internal_has_ntp() const {
  return kind_case() == kNtp;
}
inline bool TimeSynchronization::has_ntp() const {
  return _internal_has_ntp();
}
inline void TimeSynchronization::set_has_ntp() {
  _oneof_case_[0] = kNtp;
}
inline void TimeSynchronization::clear_ntp() {
  if (_internal_has_ntp()) {
    if (GetArena() == nullptr) {
      delete kind_.ntp_;
    }
    clear_has_kind();
  }
}
inline ::blickfeld::protocol::status::TimeSynchronization_NTP* TimeSynchronization::release_ntp() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.TimeSynchronization.ntp)
  if (_internal_has_ntp()) {
    clear_has_kind();
      ::blickfeld::protocol::status::TimeSynchronization_NTP* temp = kind_.ntp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.ntp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::status::TimeSynchronization_NTP& TimeSynchronization::_internal_ntp() const {
  return _internal_has_ntp()
      ? *kind_.ntp_
      : reinterpret_cast< ::blickfeld::protocol::status::TimeSynchronization_NTP&>(::blickfeld::protocol::status::_TimeSynchronization_NTP_default_instance_);
}
inline const ::blickfeld::protocol::status::TimeSynchronization_NTP& TimeSynchronization::ntp() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.ntp)
  return _internal_ntp();
}
inline ::blickfeld::protocol::status::TimeSynchronization_NTP* TimeSynchronization::unsafe_arena_release_ntp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.status.TimeSynchronization.ntp)
  if (_internal_has_ntp()) {
    clear_has_kind();
    ::blickfeld::protocol::status::TimeSynchronization_NTP* temp = kind_.ntp_;
    kind_.ntp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimeSynchronization::unsafe_arena_set_allocated_ntp(::blickfeld::protocol::status::TimeSynchronization_NTP* ntp) {
  clear_kind();
  if (ntp) {
    set_has_ntp();
    kind_.ntp_ = ntp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.status.TimeSynchronization.ntp)
}
inline ::blickfeld::protocol::status::TimeSynchronization_NTP* TimeSynchronization::_internal_mutable_ntp() {
  if (!_internal_has_ntp()) {
    clear_kind();
    set_has_ntp();
    kind_.ntp_ = CreateMaybeMessage< ::blickfeld::protocol::status::TimeSynchronization_NTP >(GetArena());
  }
  return kind_.ntp_;
}
inline ::blickfeld::protocol::status::TimeSynchronization_NTP* TimeSynchronization::mutable_ntp() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.TimeSynchronization.ntp)
  return _internal_mutable_ntp();
}

// .blickfeld.protocol.status.TimeSynchronization.PTP ptp = 4;
inline bool TimeSynchronization::_internal_has_ptp() const {
  return kind_case() == kPtp;
}
inline bool TimeSynchronization::has_ptp() const {
  return _internal_has_ptp();
}
inline void TimeSynchronization::set_has_ptp() {
  _oneof_case_[0] = kPtp;
}
inline void TimeSynchronization::clear_ptp() {
  if (_internal_has_ptp()) {
    if (GetArena() == nullptr) {
      delete kind_.ptp_;
    }
    clear_has_kind();
  }
}
inline ::blickfeld::protocol::status::TimeSynchronization_PTP* TimeSynchronization::release_ptp() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.status.TimeSynchronization.ptp)
  if (_internal_has_ptp()) {
    clear_has_kind();
      ::blickfeld::protocol::status::TimeSynchronization_PTP* temp = kind_.ptp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.ptp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::status::TimeSynchronization_PTP& TimeSynchronization::_internal_ptp() const {
  return _internal_has_ptp()
      ? *kind_.ptp_
      : reinterpret_cast< ::blickfeld::protocol::status::TimeSynchronization_PTP&>(::blickfeld::protocol::status::_TimeSynchronization_PTP_default_instance_);
}
inline const ::blickfeld::protocol::status::TimeSynchronization_PTP& TimeSynchronization::ptp() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.status.TimeSynchronization.ptp)
  return _internal_ptp();
}
inline ::blickfeld::protocol::status::TimeSynchronization_PTP* TimeSynchronization::unsafe_arena_release_ptp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.status.TimeSynchronization.ptp)
  if (_internal_has_ptp()) {
    clear_has_kind();
    ::blickfeld::protocol::status::TimeSynchronization_PTP* temp = kind_.ptp_;
    kind_.ptp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimeSynchronization::unsafe_arena_set_allocated_ptp(::blickfeld::protocol::status::TimeSynchronization_PTP* ptp) {
  clear_kind();
  if (ptp) {
    set_has_ptp();
    kind_.ptp_ = ptp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.status.TimeSynchronization.ptp)
}
inline ::blickfeld::protocol::status::TimeSynchronization_PTP* TimeSynchronization::_internal_mutable_ptp() {
  if (!_internal_has_ptp()) {
    clear_kind();
    set_has_ptp();
    kind_.ptp_ = CreateMaybeMessage< ::blickfeld::protocol::status::TimeSynchronization_PTP >(GetArena());
  }
  return kind_.ptp_;
}
inline ::blickfeld::protocol::status::TimeSynchronization_PTP* TimeSynchronization::mutable_ptp() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.status.TimeSynchronization.ptp)
  return _internal_mutable_ptp();
}

inline bool TimeSynchronization::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void TimeSynchronization::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline TimeSynchronization::KindCase TimeSynchronization::kind_case() const {
  return TimeSynchronization::KindCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace status
}  // namespace protocol
}  // namespace blickfeld

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blickfeld::protocol::status::TimeSynchronization_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::status::TimeSynchronization_State>() {
  return ::blickfeld::protocol::status::TimeSynchronization_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstatus_2ftime_5fsynchronization_2eproto
