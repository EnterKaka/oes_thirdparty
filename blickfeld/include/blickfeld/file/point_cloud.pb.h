// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/file/point_cloud.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2ffile_2fpoint_5fcloud_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2ffile_2fpoint_5fcloud_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/data/point_cloud.pb.h"
#include "blickfeld/data/frame.pb.h"
#include "blickfeld/config/scan_pattern.pb.h"
#include "blickfeld/file/general.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2ffile_2fpoint_5fcloud_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2ffile_2fpoint_5fcloud_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2ffile_2fpoint_5fcloud_2eproto;
namespace blickfeld {
namespace protocol {
namespace file {
class PointCloud;
struct PointCloudDefaultTypeInternal;
BF_DLLEXPORT extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class PointCloud_Data;
struct PointCloud_DataDefaultTypeInternal;
BF_DLLEXPORT extern PointCloud_DataDefaultTypeInternal _PointCloud_Data_default_instance_;
class PointCloud_Footer;
struct PointCloud_FooterDefaultTypeInternal;
BF_DLLEXPORT extern PointCloud_FooterDefaultTypeInternal _PointCloud_Footer_default_instance_;
class PointCloud_Footer_Event;
struct PointCloud_Footer_EventDefaultTypeInternal;
BF_DLLEXPORT extern PointCloud_Footer_EventDefaultTypeInternal _PointCloud_Footer_Event_default_instance_;
class PointCloud_Footer_Stats;
struct PointCloud_Footer_StatsDefaultTypeInternal;
BF_DLLEXPORT extern PointCloud_Footer_StatsDefaultTypeInternal _PointCloud_Footer_Stats_default_instance_;
class PointCloud_Footer_Stats_Counter;
struct PointCloud_Footer_Stats_CounterDefaultTypeInternal;
BF_DLLEXPORT extern PointCloud_Footer_Stats_CounterDefaultTypeInternal _PointCloud_Footer_Stats_Counter_default_instance_;
class PointCloud_Header;
struct PointCloud_HeaderDefaultTypeInternal;
BF_DLLEXPORT extern PointCloud_HeaderDefaultTypeInternal _PointCloud_Header_default_instance_;
class PointCloud_Metadata;
struct PointCloud_MetadataDefaultTypeInternal;
BF_DLLEXPORT extern PointCloud_MetadataDefaultTypeInternal _PointCloud_Metadata_default_instance_;
}  // namespace file
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::file::PointCloud* Arena::CreateMaybeMessage<::blickfeld::protocol::file::PointCloud>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::file::PointCloud_Data* Arena::CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Data>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::file::PointCloud_Footer* Arena::CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Footer>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::file::PointCloud_Footer_Event* Arena::CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Footer_Event>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::file::PointCloud_Footer_Stats* Arena::CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Footer_Stats>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* Arena::CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::file::PointCloud_Header* Arena::CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Header>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::file::PointCloud_Metadata* Arena::CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Metadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace file {

// ===================================================================

class BF_DLLEXPORT PointCloud_Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.file.PointCloud.Header) */ {
 public:
  inline PointCloud_Header() : PointCloud_Header(nullptr) {}
  ~PointCloud_Header() override;
  explicit constexpr PointCloud_Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud_Header(const PointCloud_Header& from);
  PointCloud_Header(PointCloud_Header&& from) noexcept
    : PointCloud_Header() {
    *this = ::std::move(from);
  }

  inline PointCloud_Header& operator=(const PointCloud_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud_Header& operator=(PointCloud_Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud_Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud_Header* internal_default_instance() {
    return reinterpret_cast<const PointCloud_Header*>(
               &_PointCloud_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PointCloud_Header& a, PointCloud_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud_Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud_Header* New() const final {
    return CreateMaybeMessage<PointCloud_Header>(nullptr);
  }

  PointCloud_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud_Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud_Header& from);
  void MergeFrom(const PointCloud_Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud_Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.file.PointCloud.Header";
  }
  protected:
  explicit PointCloud_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kClientFieldNumber = 2,
  };
  // optional .blickfeld.protocol.data.PointCloud.Header device = 1 [(.blickfeld.protocol.optional) = true];
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::blickfeld::protocol::data::PointCloud_Header& device() const;
  ::blickfeld::protocol::data::PointCloud_Header* release_device();
  ::blickfeld::protocol::data::PointCloud_Header* mutable_device();
  void set_allocated_device(::blickfeld::protocol::data::PointCloud_Header* device);
  private:
  const ::blickfeld::protocol::data::PointCloud_Header& _internal_device() const;
  ::blickfeld::protocol::data::PointCloud_Header* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::blickfeld::protocol::data::PointCloud_Header* device);
  ::blickfeld::protocol::data::PointCloud_Header* unsafe_arena_release_device();

  // optional .blickfeld.protocol.file.Client client = 2;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::blickfeld::protocol::file::Client& client() const;
  ::blickfeld::protocol::file::Client* release_client();
  ::blickfeld::protocol::file::Client* mutable_client();
  void set_allocated_client(::blickfeld::protocol::file::Client* client);
  private:
  const ::blickfeld::protocol::file::Client& _internal_client() const;
  ::blickfeld::protocol::file::Client* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::blickfeld::protocol::file::Client* client);
  ::blickfeld::protocol::file::Client* unsafe_arena_release_client();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.file.PointCloud.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::data::PointCloud_Header* device_;
  ::blickfeld::protocol::file::Client* client_;
  friend struct ::TableStruct_blickfeld_2ffile_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT PointCloud_Footer_Stats_Counter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.file.PointCloud.Footer.Stats.Counter) */ {
 public:
  inline PointCloud_Footer_Stats_Counter() : PointCloud_Footer_Stats_Counter(nullptr) {}
  ~PointCloud_Footer_Stats_Counter() override;
  explicit constexpr PointCloud_Footer_Stats_Counter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud_Footer_Stats_Counter(const PointCloud_Footer_Stats_Counter& from);
  PointCloud_Footer_Stats_Counter(PointCloud_Footer_Stats_Counter&& from) noexcept
    : PointCloud_Footer_Stats_Counter() {
    *this = ::std::move(from);
  }

  inline PointCloud_Footer_Stats_Counter& operator=(const PointCloud_Footer_Stats_Counter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud_Footer_Stats_Counter& operator=(PointCloud_Footer_Stats_Counter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud_Footer_Stats_Counter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud_Footer_Stats_Counter* internal_default_instance() {
    return reinterpret_cast<const PointCloud_Footer_Stats_Counter*>(
               &_PointCloud_Footer_Stats_Counter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointCloud_Footer_Stats_Counter& a, PointCloud_Footer_Stats_Counter& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud_Footer_Stats_Counter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud_Footer_Stats_Counter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud_Footer_Stats_Counter* New() const final {
    return CreateMaybeMessage<PointCloud_Footer_Stats_Counter>(nullptr);
  }

  PointCloud_Footer_Stats_Counter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud_Footer_Stats_Counter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud_Footer_Stats_Counter& from);
  void MergeFrom(const PointCloud_Footer_Stats_Counter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud_Footer_Stats_Counter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.file.PointCloud.Footer.Stats.Counter";
  }
  protected:
  explicit PointCloud_Footer_Stats_Counter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
    kPointsFieldNumber = 2,
    kReturnsFieldNumber = 3,
  };
  // optional uint64 frames = 1;
  bool has_frames() const;
  private:
  bool _internal_has_frames() const;
  public:
  void clear_frames();
  ::PROTOBUF_NAMESPACE_ID::uint64 frames() const;
  void set_frames(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frames() const;
  void _internal_set_frames(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 points = 2;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  ::PROTOBUF_NAMESPACE_ID::uint64 points() const;
  void set_points(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_points() const;
  void _internal_set_points(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 returns = 3;
  bool has_returns() const;
  private:
  bool _internal_has_returns() const;
  public:
  void clear_returns();
  ::PROTOBUF_NAMESPACE_ID::uint64 returns() const;
  void set_returns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_returns() const;
  void _internal_set_returns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.file.PointCloud.Footer.Stats.Counter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frames_;
  ::PROTOBUF_NAMESPACE_ID::uint64 points_;
  ::PROTOBUF_NAMESPACE_ID::uint64 returns_;
  friend struct ::TableStruct_blickfeld_2ffile_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT PointCloud_Footer_Stats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.file.PointCloud.Footer.Stats) */ {
 public:
  inline PointCloud_Footer_Stats() : PointCloud_Footer_Stats(nullptr) {}
  ~PointCloud_Footer_Stats() override;
  explicit constexpr PointCloud_Footer_Stats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud_Footer_Stats(const PointCloud_Footer_Stats& from);
  PointCloud_Footer_Stats(PointCloud_Footer_Stats&& from) noexcept
    : PointCloud_Footer_Stats() {
    *this = ::std::move(from);
  }

  inline PointCloud_Footer_Stats& operator=(const PointCloud_Footer_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud_Footer_Stats& operator=(PointCloud_Footer_Stats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud_Footer_Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud_Footer_Stats* internal_default_instance() {
    return reinterpret_cast<const PointCloud_Footer_Stats*>(
               &_PointCloud_Footer_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointCloud_Footer_Stats& a, PointCloud_Footer_Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud_Footer_Stats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud_Footer_Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud_Footer_Stats* New() const final {
    return CreateMaybeMessage<PointCloud_Footer_Stats>(nullptr);
  }

  PointCloud_Footer_Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud_Footer_Stats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud_Footer_Stats& from);
  void MergeFrom(const PointCloud_Footer_Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud_Footer_Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.file.PointCloud.Footer.Stats";
  }
  protected:
  explicit PointCloud_Footer_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PointCloud_Footer_Stats_Counter Counter;

  // accessors -------------------------------------------------------

  enum : int {
    kCounterFieldNumber = 1,
  };
  // optional .blickfeld.protocol.file.PointCloud.Footer.Stats.Counter counter = 1;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;
  public:
  void clear_counter();
  const ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter& counter() const;
  ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* release_counter();
  ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* mutable_counter();
  void set_allocated_counter(::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* counter);
  private:
  const ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter& _internal_counter() const;
  ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* _internal_mutable_counter();
  public:
  void unsafe_arena_set_allocated_counter(
      ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* counter);
  ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* unsafe_arena_release_counter();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.file.PointCloud.Footer.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* counter_;
  friend struct ::TableStruct_blickfeld_2ffile_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT PointCloud_Footer_Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.file.PointCloud.Footer.Event) */ {
 public:
  inline PointCloud_Footer_Event() : PointCloud_Footer_Event(nullptr) {}
  ~PointCloud_Footer_Event() override;
  explicit constexpr PointCloud_Footer_Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud_Footer_Event(const PointCloud_Footer_Event& from);
  PointCloud_Footer_Event(PointCloud_Footer_Event&& from) noexcept
    : PointCloud_Footer_Event() {
    *this = ::std::move(from);
  }

  inline PointCloud_Footer_Event& operator=(const PointCloud_Footer_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud_Footer_Event& operator=(PointCloud_Footer_Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud_Footer_Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud_Footer_Event* internal_default_instance() {
    return reinterpret_cast<const PointCloud_Footer_Event*>(
               &_PointCloud_Footer_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PointCloud_Footer_Event& a, PointCloud_Footer_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud_Footer_Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud_Footer_Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud_Footer_Event* New() const final {
    return CreateMaybeMessage<PointCloud_Footer_Event>(nullptr);
  }

  PointCloud_Footer_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud_Footer_Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud_Footer_Event& from);
  void MergeFrom(const PointCloud_Footer_Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud_Footer_Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.file.PointCloud.Footer.Event";
  }
  protected:
  explicit PointCloud_Footer_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScanPatternFieldNumber = 2,
    kFromFrameIdFieldNumber = 1,
  };
  // optional .blickfeld.protocol.config.ScanPattern scan_pattern = 2;
  bool has_scan_pattern() const;
  private:
  bool _internal_has_scan_pattern() const;
  public:
  void clear_scan_pattern();
  const ::blickfeld::protocol::config::ScanPattern& scan_pattern() const;
  ::blickfeld::protocol::config::ScanPattern* release_scan_pattern();
  ::blickfeld::protocol::config::ScanPattern* mutable_scan_pattern();
  void set_allocated_scan_pattern(::blickfeld::protocol::config::ScanPattern* scan_pattern);
  private:
  const ::blickfeld::protocol::config::ScanPattern& _internal_scan_pattern() const;
  ::blickfeld::protocol::config::ScanPattern* _internal_mutable_scan_pattern();
  public:
  void unsafe_arena_set_allocated_scan_pattern(
      ::blickfeld::protocol::config::ScanPattern* scan_pattern);
  ::blickfeld::protocol::config::ScanPattern* unsafe_arena_release_scan_pattern();

  // optional uint64 from_frame_id = 1;
  bool has_from_frame_id() const;
  private:
  bool _internal_has_from_frame_id() const;
  public:
  void clear_from_frame_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 from_frame_id() const;
  void set_from_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from_frame_id() const;
  void _internal_set_from_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.file.PointCloud.Footer.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::config::ScanPattern* scan_pattern_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_frame_id_;
  friend struct ::TableStruct_blickfeld_2ffile_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT PointCloud_Footer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.file.PointCloud.Footer) */ {
 public:
  inline PointCloud_Footer() : PointCloud_Footer(nullptr) {}
  ~PointCloud_Footer() override;
  explicit constexpr PointCloud_Footer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud_Footer(const PointCloud_Footer& from);
  PointCloud_Footer(PointCloud_Footer&& from) noexcept
    : PointCloud_Footer() {
    *this = ::std::move(from);
  }

  inline PointCloud_Footer& operator=(const PointCloud_Footer& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud_Footer& operator=(PointCloud_Footer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud_Footer& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud_Footer* internal_default_instance() {
    return reinterpret_cast<const PointCloud_Footer*>(
               &_PointCloud_Footer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PointCloud_Footer& a, PointCloud_Footer& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud_Footer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud_Footer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud_Footer* New() const final {
    return CreateMaybeMessage<PointCloud_Footer>(nullptr);
  }

  PointCloud_Footer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud_Footer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud_Footer& from);
  void MergeFrom(const PointCloud_Footer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud_Footer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.file.PointCloud.Footer";
  }
  protected:
  explicit PointCloud_Footer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PointCloud_Footer_Stats Stats;
  typedef PointCloud_Footer_Event Event;

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kStatsFieldNumber = 1,
    kStopTimeNsFieldNumber = 3,
  };
  // repeated .blickfeld.protocol.file.PointCloud.Footer.Event events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::blickfeld::protocol::file::PointCloud_Footer_Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::file::PointCloud_Footer_Event >*
      mutable_events();
  private:
  const ::blickfeld::protocol::file::PointCloud_Footer_Event& _internal_events(int index) const;
  ::blickfeld::protocol::file::PointCloud_Footer_Event* _internal_add_events();
  public:
  const ::blickfeld::protocol::file::PointCloud_Footer_Event& events(int index) const;
  ::blickfeld::protocol::file::PointCloud_Footer_Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::file::PointCloud_Footer_Event >&
      events() const;

  // optional .blickfeld.protocol.file.PointCloud.Footer.Stats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::blickfeld::protocol::file::PointCloud_Footer_Stats& stats() const;
  ::blickfeld::protocol::file::PointCloud_Footer_Stats* release_stats();
  ::blickfeld::protocol::file::PointCloud_Footer_Stats* mutable_stats();
  void set_allocated_stats(::blickfeld::protocol::file::PointCloud_Footer_Stats* stats);
  private:
  const ::blickfeld::protocol::file::PointCloud_Footer_Stats& _internal_stats() const;
  ::blickfeld::protocol::file::PointCloud_Footer_Stats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::blickfeld::protocol::file::PointCloud_Footer_Stats* stats);
  ::blickfeld::protocol::file::PointCloud_Footer_Stats* unsafe_arena_release_stats();

  // optional uint64 stop_time_ns = 3;
  bool has_stop_time_ns() const;
  private:
  bool _internal_has_stop_time_ns() const;
  public:
  void clear_stop_time_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 stop_time_ns() const;
  void set_stop_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stop_time_ns() const;
  void _internal_set_stop_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.file.PointCloud.Footer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::file::PointCloud_Footer_Event > events_;
  ::blickfeld::protocol::file::PointCloud_Footer_Stats* stats_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stop_time_ns_;
  friend struct ::TableStruct_blickfeld_2ffile_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT PointCloud_Metadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.file.PointCloud.Metadata) */ {
 public:
  inline PointCloud_Metadata() : PointCloud_Metadata(nullptr) {}
  ~PointCloud_Metadata() override;
  explicit constexpr PointCloud_Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud_Metadata(const PointCloud_Metadata& from);
  PointCloud_Metadata(PointCloud_Metadata&& from) noexcept
    : PointCloud_Metadata() {
    *this = ::std::move(from);
  }

  inline PointCloud_Metadata& operator=(const PointCloud_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud_Metadata& operator=(PointCloud_Metadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud_Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud_Metadata* internal_default_instance() {
    return reinterpret_cast<const PointCloud_Metadata*>(
               &_PointCloud_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PointCloud_Metadata& a, PointCloud_Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud_Metadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud_Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud_Metadata* New() const final {
    return CreateMaybeMessage<PointCloud_Metadata>(nullptr);
  }

  PointCloud_Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud_Metadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud_Metadata& from);
  void MergeFrom(const PointCloud_Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud_Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.file.PointCloud.Metadata";
  }
  protected:
  explicit PointCloud_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kFooterFieldNumber = 2,
  };
  // optional .blickfeld.protocol.file.PointCloud.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::blickfeld::protocol::file::PointCloud_Header& header() const;
  ::blickfeld::protocol::file::PointCloud_Header* release_header();
  ::blickfeld::protocol::file::PointCloud_Header* mutable_header();
  void set_allocated_header(::blickfeld::protocol::file::PointCloud_Header* header);
  private:
  const ::blickfeld::protocol::file::PointCloud_Header& _internal_header() const;
  ::blickfeld::protocol::file::PointCloud_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::blickfeld::protocol::file::PointCloud_Header* header);
  ::blickfeld::protocol::file::PointCloud_Header* unsafe_arena_release_header();

  // optional .blickfeld.protocol.file.PointCloud.Footer footer = 2;
  bool has_footer() const;
  private:
  bool _internal_has_footer() const;
  public:
  void clear_footer();
  const ::blickfeld::protocol::file::PointCloud_Footer& footer() const;
  ::blickfeld::protocol::file::PointCloud_Footer* release_footer();
  ::blickfeld::protocol::file::PointCloud_Footer* mutable_footer();
  void set_allocated_footer(::blickfeld::protocol::file::PointCloud_Footer* footer);
  private:
  const ::blickfeld::protocol::file::PointCloud_Footer& _internal_footer() const;
  ::blickfeld::protocol::file::PointCloud_Footer* _internal_mutable_footer();
  public:
  void unsafe_arena_set_allocated_footer(
      ::blickfeld::protocol::file::PointCloud_Footer* footer);
  ::blickfeld::protocol::file::PointCloud_Footer* unsafe_arena_release_footer();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.file.PointCloud.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::file::PointCloud_Header* header_;
  ::blickfeld::protocol::file::PointCloud_Footer* footer_;
  friend struct ::TableStruct_blickfeld_2ffile_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT PointCloud_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.file.PointCloud.Data) */ {
 public:
  inline PointCloud_Data() : PointCloud_Data(nullptr) {}
  ~PointCloud_Data() override;
  explicit constexpr PointCloud_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud_Data(const PointCloud_Data& from);
  PointCloud_Data(PointCloud_Data&& from) noexcept
    : PointCloud_Data() {
    *this = ::std::move(from);
  }

  inline PointCloud_Data& operator=(const PointCloud_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud_Data& operator=(PointCloud_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud_Data* internal_default_instance() {
    return reinterpret_cast<const PointCloud_Data*>(
               &_PointCloud_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PointCloud_Data& a, PointCloud_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud_Data* New() const final {
    return CreateMaybeMessage<PointCloud_Data>(nullptr);
  }

  PointCloud_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud_Data& from);
  void MergeFrom(const PointCloud_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.file.PointCloud.Data";
  }
  protected:
  explicit PointCloud_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 1,
    kFooterFieldNumber = 2,
  };
  // optional .blickfeld.protocol.data.Frame frame = 1;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::blickfeld::protocol::data::Frame& frame() const;
  ::blickfeld::protocol::data::Frame* release_frame();
  ::blickfeld::protocol::data::Frame* mutable_frame();
  void set_allocated_frame(::blickfeld::protocol::data::Frame* frame);
  private:
  const ::blickfeld::protocol::data::Frame& _internal_frame() const;
  ::blickfeld::protocol::data::Frame* _internal_mutable_frame();
  public:
  void unsafe_arena_set_allocated_frame(
      ::blickfeld::protocol::data::Frame* frame);
  ::blickfeld::protocol::data::Frame* unsafe_arena_release_frame();

  // optional .blickfeld.protocol.file.PointCloud.Footer footer = 2;
  bool has_footer() const;
  private:
  bool _internal_has_footer() const;
  public:
  void clear_footer();
  const ::blickfeld::protocol::file::PointCloud_Footer& footer() const;
  ::blickfeld::protocol::file::PointCloud_Footer* release_footer();
  ::blickfeld::protocol::file::PointCloud_Footer* mutable_footer();
  void set_allocated_footer(::blickfeld::protocol::file::PointCloud_Footer* footer);
  private:
  const ::blickfeld::protocol::file::PointCloud_Footer& _internal_footer() const;
  ::blickfeld::protocol::file::PointCloud_Footer* _internal_mutable_footer();
  public:
  void unsafe_arena_set_allocated_footer(
      ::blickfeld::protocol::file::PointCloud_Footer* footer);
  ::blickfeld::protocol::file::PointCloud_Footer* unsafe_arena_release_footer();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.file.PointCloud.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::data::Frame* frame_;
  ::blickfeld::protocol::file::PointCloud_Footer* footer_;
  friend struct ::TableStruct_blickfeld_2ffile_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT PointCloud PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.file.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  ~PointCloud() override;
  explicit constexpr PointCloud(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return CreateMaybeMessage<PointCloud>(nullptr);
  }

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.file.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PointCloud_Header Header;
  typedef PointCloud_Footer Footer;
  typedef PointCloud_Metadata Metadata;
  typedef PointCloud_Data Data;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.file.PointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2ffile_2fpoint_5fcloud_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointCloud_Header

// optional .blickfeld.protocol.data.PointCloud.Header device = 1 [(.blickfeld.protocol.optional) = true];
inline bool PointCloud_Header::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || device_ != nullptr);
  return value;
}
inline bool PointCloud_Header::has_device() const {
  return _internal_has_device();
}
inline const ::blickfeld::protocol::data::PointCloud_Header& PointCloud_Header::_internal_device() const {
  const ::blickfeld::protocol::data::PointCloud_Header* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::data::PointCloud_Header&>(
      ::blickfeld::protocol::data::_PointCloud_Header_default_instance_);
}
inline const ::blickfeld::protocol::data::PointCloud_Header& PointCloud_Header::device() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Header.device)
  return _internal_device();
}
inline void PointCloud_Header::unsafe_arena_set_allocated_device(
    ::blickfeld::protocol::data::PointCloud_Header* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.file.PointCloud.Header.device)
}
inline ::blickfeld::protocol::data::PointCloud_Header* PointCloud_Header::release_device() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::data::PointCloud_Header* temp = device_;
  device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::data::PointCloud_Header* PointCloud_Header::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.file.PointCloud.Header.device)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::data::PointCloud_Header* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::data::PointCloud_Header* PointCloud_Header::_internal_mutable_device() {
  _has_bits_[0] |= 0x00000001u;
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::data::PointCloud_Header>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::blickfeld::protocol::data::PointCloud_Header* PointCloud_Header::mutable_device() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.file.PointCloud.Header.device)
  return _internal_mutable_device();
}
inline void PointCloud_Header::set_allocated_device(::blickfeld::protocol::data::PointCloud_Header* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device)->GetArena();
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.file.PointCloud.Header.device)
}

// optional .blickfeld.protocol.file.Client client = 2;
inline bool PointCloud_Header::_internal_has_client() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || client_ != nullptr);
  return value;
}
inline bool PointCloud_Header::has_client() const {
  return _internal_has_client();
}
inline const ::blickfeld::protocol::file::Client& PointCloud_Header::_internal_client() const {
  const ::blickfeld::protocol::file::Client* p = client_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::file::Client&>(
      ::blickfeld::protocol::file::_Client_default_instance_);
}
inline const ::blickfeld::protocol::file::Client& PointCloud_Header::client() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Header.client)
  return _internal_client();
}
inline void PointCloud_Header::unsafe_arena_set_allocated_client(
    ::blickfeld::protocol::file::Client* client) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  client_ = client;
  if (client) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.file.PointCloud.Header.client)
}
inline ::blickfeld::protocol::file::Client* PointCloud_Header::release_client() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::file::Client* temp = client_;
  client_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::file::Client* PointCloud_Header::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.file.PointCloud.Header.client)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::file::Client* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::file::Client* PointCloud_Header::_internal_mutable_client() {
  _has_bits_[0] |= 0x00000002u;
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::file::Client>(GetArena());
    client_ = p;
  }
  return client_;
}
inline ::blickfeld::protocol::file::Client* PointCloud_Header::mutable_client() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.file.PointCloud.Header.client)
  return _internal_mutable_client();
}
inline void PointCloud_Header::set_allocated_client(::blickfeld::protocol::file::Client* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client)->GetArena();
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.file.PointCloud.Header.client)
}

// -------------------------------------------------------------------

// PointCloud_Footer_Stats_Counter

// optional uint64 frames = 1;
inline bool PointCloud_Footer_Stats_Counter::_internal_has_frames() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointCloud_Footer_Stats_Counter::has_frames() const {
  return _internal_has_frames();
}
inline void PointCloud_Footer_Stats_Counter::clear_frames() {
  frames_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Footer_Stats_Counter::_internal_frames() const {
  return frames_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Footer_Stats_Counter::frames() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Footer.Stats.Counter.frames)
  return _internal_frames();
}
inline void PointCloud_Footer_Stats_Counter::_internal_set_frames(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  frames_ = value;
}
inline void PointCloud_Footer_Stats_Counter::set_frames(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frames(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.file.PointCloud.Footer.Stats.Counter.frames)
}

// optional uint64 points = 2;
inline bool PointCloud_Footer_Stats_Counter::_internal_has_points() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointCloud_Footer_Stats_Counter::has_points() const {
  return _internal_has_points();
}
inline void PointCloud_Footer_Stats_Counter::clear_points() {
  points_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Footer_Stats_Counter::_internal_points() const {
  return points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Footer_Stats_Counter::points() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Footer.Stats.Counter.points)
  return _internal_points();
}
inline void PointCloud_Footer_Stats_Counter::_internal_set_points(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  points_ = value;
}
inline void PointCloud_Footer_Stats_Counter::set_points(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.file.PointCloud.Footer.Stats.Counter.points)
}

// optional uint64 returns = 3;
inline bool PointCloud_Footer_Stats_Counter::_internal_has_returns() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointCloud_Footer_Stats_Counter::has_returns() const {
  return _internal_has_returns();
}
inline void PointCloud_Footer_Stats_Counter::clear_returns() {
  returns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Footer_Stats_Counter::_internal_returns() const {
  return returns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Footer_Stats_Counter::returns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Footer.Stats.Counter.returns)
  return _internal_returns();
}
inline void PointCloud_Footer_Stats_Counter::_internal_set_returns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  returns_ = value;
}
inline void PointCloud_Footer_Stats_Counter::set_returns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_returns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.file.PointCloud.Footer.Stats.Counter.returns)
}

// -------------------------------------------------------------------

// PointCloud_Footer_Stats

// optional .blickfeld.protocol.file.PointCloud.Footer.Stats.Counter counter = 1;
inline bool PointCloud_Footer_Stats::_internal_has_counter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || counter_ != nullptr);
  return value;
}
inline bool PointCloud_Footer_Stats::has_counter() const {
  return _internal_has_counter();
}
inline void PointCloud_Footer_Stats::clear_counter() {
  if (counter_ != nullptr) counter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter& PointCloud_Footer_Stats::_internal_counter() const {
  const ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* p = counter_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter&>(
      ::blickfeld::protocol::file::_PointCloud_Footer_Stats_Counter_default_instance_);
}
inline const ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter& PointCloud_Footer_Stats::counter() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Footer.Stats.counter)
  return _internal_counter();
}
inline void PointCloud_Footer_Stats::unsafe_arena_set_allocated_counter(
    ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* counter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counter_);
  }
  counter_ = counter;
  if (counter) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.file.PointCloud.Footer.Stats.counter)
}
inline ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* PointCloud_Footer_Stats::release_counter() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* temp = counter_;
  counter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* PointCloud_Footer_Stats::unsafe_arena_release_counter() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.file.PointCloud.Footer.Stats.counter)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* temp = counter_;
  counter_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* PointCloud_Footer_Stats::_internal_mutable_counter() {
  _has_bits_[0] |= 0x00000001u;
  if (counter_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter>(GetArena());
    counter_ = p;
  }
  return counter_;
}
inline ::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* PointCloud_Footer_Stats::mutable_counter() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.file.PointCloud.Footer.Stats.counter)
  return _internal_mutable_counter();
}
inline void PointCloud_Footer_Stats::set_allocated_counter(::blickfeld::protocol::file::PointCloud_Footer_Stats_Counter* counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete counter_;
  }
  if (counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(counter);
    if (message_arena != submessage_arena) {
      counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  counter_ = counter;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.file.PointCloud.Footer.Stats.counter)
}

// -------------------------------------------------------------------

// PointCloud_Footer_Event

// optional uint64 from_frame_id = 1;
inline bool PointCloud_Footer_Event::_internal_has_from_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointCloud_Footer_Event::has_from_frame_id() const {
  return _internal_has_from_frame_id();
}
inline void PointCloud_Footer_Event::clear_from_frame_id() {
  from_frame_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Footer_Event::_internal_from_frame_id() const {
  return from_frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Footer_Event::from_frame_id() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Footer.Event.from_frame_id)
  return _internal_from_frame_id();
}
inline void PointCloud_Footer_Event::_internal_set_from_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  from_frame_id_ = value;
}
inline void PointCloud_Footer_Event::set_from_frame_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from_frame_id(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.file.PointCloud.Footer.Event.from_frame_id)
}

// optional .blickfeld.protocol.config.ScanPattern scan_pattern = 2;
inline bool PointCloud_Footer_Event::_internal_has_scan_pattern() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scan_pattern_ != nullptr);
  return value;
}
inline bool PointCloud_Footer_Event::has_scan_pattern() const {
  return _internal_has_scan_pattern();
}
inline const ::blickfeld::protocol::config::ScanPattern& PointCloud_Footer_Event::_internal_scan_pattern() const {
  const ::blickfeld::protocol::config::ScanPattern* p = scan_pattern_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern&>(
      ::blickfeld::protocol::config::_ScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern& PointCloud_Footer_Event::scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Footer.Event.scan_pattern)
  return _internal_scan_pattern();
}
inline void PointCloud_Footer_Event::unsafe_arena_set_allocated_scan_pattern(
    ::blickfeld::protocol::config::ScanPattern* scan_pattern) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_pattern_);
  }
  scan_pattern_ = scan_pattern;
  if (scan_pattern) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.file.PointCloud.Footer.Event.scan_pattern)
}
inline ::blickfeld::protocol::config::ScanPattern* PointCloud_Footer_Event::release_scan_pattern() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern* temp = scan_pattern_;
  scan_pattern_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* PointCloud_Footer_Event::unsafe_arena_release_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.file.PointCloud.Footer.Event.scan_pattern)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern* temp = scan_pattern_;
  scan_pattern_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* PointCloud_Footer_Event::_internal_mutable_scan_pattern() {
  _has_bits_[0] |= 0x00000001u;
  if (scan_pattern_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern>(GetArena());
    scan_pattern_ = p;
  }
  return scan_pattern_;
}
inline ::blickfeld::protocol::config::ScanPattern* PointCloud_Footer_Event::mutable_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.file.PointCloud.Footer.Event.scan_pattern)
  return _internal_mutable_scan_pattern();
}
inline void PointCloud_Footer_Event::set_allocated_scan_pattern(::blickfeld::protocol::config::ScanPattern* scan_pattern) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_pattern_);
  }
  if (scan_pattern) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_pattern)->GetArena();
    if (message_arena != submessage_arena) {
      scan_pattern = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_pattern, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scan_pattern_ = scan_pattern;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.file.PointCloud.Footer.Event.scan_pattern)
}

// -------------------------------------------------------------------

// PointCloud_Footer

// optional .blickfeld.protocol.file.PointCloud.Footer.Stats stats = 1;
inline bool PointCloud_Footer::_internal_has_stats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stats_ != nullptr);
  return value;
}
inline bool PointCloud_Footer::has_stats() const {
  return _internal_has_stats();
}
inline void PointCloud_Footer::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::blickfeld::protocol::file::PointCloud_Footer_Stats& PointCloud_Footer::_internal_stats() const {
  const ::blickfeld::protocol::file::PointCloud_Footer_Stats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::file::PointCloud_Footer_Stats&>(
      ::blickfeld::protocol::file::_PointCloud_Footer_Stats_default_instance_);
}
inline const ::blickfeld::protocol::file::PointCloud_Footer_Stats& PointCloud_Footer::stats() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Footer.stats)
  return _internal_stats();
}
inline void PointCloud_Footer::unsafe_arena_set_allocated_stats(
    ::blickfeld::protocol::file::PointCloud_Footer_Stats* stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.file.PointCloud.Footer.stats)
}
inline ::blickfeld::protocol::file::PointCloud_Footer_Stats* PointCloud_Footer::release_stats() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::file::PointCloud_Footer_Stats* temp = stats_;
  stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::file::PointCloud_Footer_Stats* PointCloud_Footer::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.file.PointCloud.Footer.stats)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::file::PointCloud_Footer_Stats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::file::PointCloud_Footer_Stats* PointCloud_Footer::_internal_mutable_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Footer_Stats>(GetArena());
    stats_ = p;
  }
  return stats_;
}
inline ::blickfeld::protocol::file::PointCloud_Footer_Stats* PointCloud_Footer::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.file.PointCloud.Footer.stats)
  return _internal_mutable_stats();
}
inline void PointCloud_Footer::set_allocated_stats(::blickfeld::protocol::file::PointCloud_Footer_Stats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.file.PointCloud.Footer.stats)
}

// repeated .blickfeld.protocol.file.PointCloud.Footer.Event events = 2;
inline int PointCloud_Footer::_internal_events_size() const {
  return events_.size();
}
inline int PointCloud_Footer::events_size() const {
  return _internal_events_size();
}
inline void PointCloud_Footer::clear_events() {
  events_.Clear();
}
inline ::blickfeld::protocol::file::PointCloud_Footer_Event* PointCloud_Footer::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.file.PointCloud.Footer.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::file::PointCloud_Footer_Event >*
PointCloud_Footer::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.file.PointCloud.Footer.events)
  return &events_;
}
inline const ::blickfeld::protocol::file::PointCloud_Footer_Event& PointCloud_Footer::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::blickfeld::protocol::file::PointCloud_Footer_Event& PointCloud_Footer::events(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Footer.events)
  return _internal_events(index);
}
inline ::blickfeld::protocol::file::PointCloud_Footer_Event* PointCloud_Footer::_internal_add_events() {
  return events_.Add();
}
inline ::blickfeld::protocol::file::PointCloud_Footer_Event* PointCloud_Footer::add_events() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.file.PointCloud.Footer.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::file::PointCloud_Footer_Event >&
PointCloud_Footer::events() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.file.PointCloud.Footer.events)
  return events_;
}

// optional uint64 stop_time_ns = 3;
inline bool PointCloud_Footer::_internal_has_stop_time_ns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointCloud_Footer::has_stop_time_ns() const {
  return _internal_has_stop_time_ns();
}
inline void PointCloud_Footer::clear_stop_time_ns() {
  stop_time_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Footer::_internal_stop_time_ns() const {
  return stop_time_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointCloud_Footer::stop_time_ns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Footer.stop_time_ns)
  return _internal_stop_time_ns();
}
inline void PointCloud_Footer::_internal_set_stop_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  stop_time_ns_ = value;
}
inline void PointCloud_Footer::set_stop_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stop_time_ns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.file.PointCloud.Footer.stop_time_ns)
}

// -------------------------------------------------------------------

// PointCloud_Metadata

// optional .blickfeld.protocol.file.PointCloud.Header header = 1;
inline bool PointCloud_Metadata::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool PointCloud_Metadata::has_header() const {
  return _internal_has_header();
}
inline void PointCloud_Metadata::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::blickfeld::protocol::file::PointCloud_Header& PointCloud_Metadata::_internal_header() const {
  const ::blickfeld::protocol::file::PointCloud_Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::file::PointCloud_Header&>(
      ::blickfeld::protocol::file::_PointCloud_Header_default_instance_);
}
inline const ::blickfeld::protocol::file::PointCloud_Header& PointCloud_Metadata::header() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Metadata.header)
  return _internal_header();
}
inline void PointCloud_Metadata::unsafe_arena_set_allocated_header(
    ::blickfeld::protocol::file::PointCloud_Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.file.PointCloud.Metadata.header)
}
inline ::blickfeld::protocol::file::PointCloud_Header* PointCloud_Metadata::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::file::PointCloud_Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::file::PointCloud_Header* PointCloud_Metadata::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.file.PointCloud.Metadata.header)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::file::PointCloud_Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::file::PointCloud_Header* PointCloud_Metadata::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::blickfeld::protocol::file::PointCloud_Header* PointCloud_Metadata::mutable_header() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.file.PointCloud.Metadata.header)
  return _internal_mutable_header();
}
inline void PointCloud_Metadata::set_allocated_header(::blickfeld::protocol::file::PointCloud_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.file.PointCloud.Metadata.header)
}

// optional .blickfeld.protocol.file.PointCloud.Footer footer = 2;
inline bool PointCloud_Metadata::_internal_has_footer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || footer_ != nullptr);
  return value;
}
inline bool PointCloud_Metadata::has_footer() const {
  return _internal_has_footer();
}
inline void PointCloud_Metadata::clear_footer() {
  if (footer_ != nullptr) footer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::blickfeld::protocol::file::PointCloud_Footer& PointCloud_Metadata::_internal_footer() const {
  const ::blickfeld::protocol::file::PointCloud_Footer* p = footer_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::file::PointCloud_Footer&>(
      ::blickfeld::protocol::file::_PointCloud_Footer_default_instance_);
}
inline const ::blickfeld::protocol::file::PointCloud_Footer& PointCloud_Metadata::footer() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Metadata.footer)
  return _internal_footer();
}
inline void PointCloud_Metadata::unsafe_arena_set_allocated_footer(
    ::blickfeld::protocol::file::PointCloud_Footer* footer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_);
  }
  footer_ = footer;
  if (footer) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.file.PointCloud.Metadata.footer)
}
inline ::blickfeld::protocol::file::PointCloud_Footer* PointCloud_Metadata::release_footer() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::file::PointCloud_Footer* temp = footer_;
  footer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::file::PointCloud_Footer* PointCloud_Metadata::unsafe_arena_release_footer() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.file.PointCloud.Metadata.footer)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::file::PointCloud_Footer* temp = footer_;
  footer_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::file::PointCloud_Footer* PointCloud_Metadata::_internal_mutable_footer() {
  _has_bits_[0] |= 0x00000002u;
  if (footer_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Footer>(GetArena());
    footer_ = p;
  }
  return footer_;
}
inline ::blickfeld::protocol::file::PointCloud_Footer* PointCloud_Metadata::mutable_footer() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.file.PointCloud.Metadata.footer)
  return _internal_mutable_footer();
}
inline void PointCloud_Metadata::set_allocated_footer(::blickfeld::protocol::file::PointCloud_Footer* footer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete footer_;
  }
  if (footer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(footer);
    if (message_arena != submessage_arena) {
      footer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  footer_ = footer;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.file.PointCloud.Metadata.footer)
}

// -------------------------------------------------------------------

// PointCloud_Data

// optional .blickfeld.protocol.data.Frame frame = 1;
inline bool PointCloud_Data::_internal_has_frame() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || frame_ != nullptr);
  return value;
}
inline bool PointCloud_Data::has_frame() const {
  return _internal_has_frame();
}
inline const ::blickfeld::protocol::data::Frame& PointCloud_Data::_internal_frame() const {
  const ::blickfeld::protocol::data::Frame* p = frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::data::Frame&>(
      ::blickfeld::protocol::data::_Frame_default_instance_);
}
inline const ::blickfeld::protocol::data::Frame& PointCloud_Data::frame() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Data.frame)
  return _internal_frame();
}
inline void PointCloud_Data::unsafe_arena_set_allocated_frame(
    ::blickfeld::protocol::data::Frame* frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  frame_ = frame;
  if (frame) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.file.PointCloud.Data.frame)
}
inline ::blickfeld::protocol::data::Frame* PointCloud_Data::release_frame() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::data::Frame* temp = frame_;
  frame_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::data::Frame* PointCloud_Data::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.file.PointCloud.Data.frame)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::data::Frame* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::data::Frame* PointCloud_Data::_internal_mutable_frame() {
  _has_bits_[0] |= 0x00000001u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::data::Frame>(GetArena());
    frame_ = p;
  }
  return frame_;
}
inline ::blickfeld::protocol::data::Frame* PointCloud_Data::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.file.PointCloud.Data.frame)
  return _internal_mutable_frame();
}
inline void PointCloud_Data::set_allocated_frame(::blickfeld::protocol::data::Frame* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame)->GetArena();
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.file.PointCloud.Data.frame)
}

// optional .blickfeld.protocol.file.PointCloud.Footer footer = 2;
inline bool PointCloud_Data::_internal_has_footer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || footer_ != nullptr);
  return value;
}
inline bool PointCloud_Data::has_footer() const {
  return _internal_has_footer();
}
inline void PointCloud_Data::clear_footer() {
  if (footer_ != nullptr) footer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::blickfeld::protocol::file::PointCloud_Footer& PointCloud_Data::_internal_footer() const {
  const ::blickfeld::protocol::file::PointCloud_Footer* p = footer_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::file::PointCloud_Footer&>(
      ::blickfeld::protocol::file::_PointCloud_Footer_default_instance_);
}
inline const ::blickfeld::protocol::file::PointCloud_Footer& PointCloud_Data::footer() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.PointCloud.Data.footer)
  return _internal_footer();
}
inline void PointCloud_Data::unsafe_arena_set_allocated_footer(
    ::blickfeld::protocol::file::PointCloud_Footer* footer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_);
  }
  footer_ = footer;
  if (footer) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.file.PointCloud.Data.footer)
}
inline ::blickfeld::protocol::file::PointCloud_Footer* PointCloud_Data::release_footer() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::file::PointCloud_Footer* temp = footer_;
  footer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::file::PointCloud_Footer* PointCloud_Data::unsafe_arena_release_footer() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.file.PointCloud.Data.footer)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::file::PointCloud_Footer* temp = footer_;
  footer_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::file::PointCloud_Footer* PointCloud_Data::_internal_mutable_footer() {
  _has_bits_[0] |= 0x00000002u;
  if (footer_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::file::PointCloud_Footer>(GetArena());
    footer_ = p;
  }
  return footer_;
}
inline ::blickfeld::protocol::file::PointCloud_Footer* PointCloud_Data::mutable_footer() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.file.PointCloud.Data.footer)
  return _internal_mutable_footer();
}
inline void PointCloud_Data::set_allocated_footer(::blickfeld::protocol::file::PointCloud_Footer* footer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete footer_;
  }
  if (footer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(footer);
    if (message_arena != submessage_arena) {
      footer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  footer_ = footer;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.file.PointCloud.Data.footer)
}

// -------------------------------------------------------------------

// PointCloud

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace file
}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2ffile_2fpoint_5fcloud_2eproto
