// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/file/general.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2ffile_2fgeneral_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2ffile_2fgeneral_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2ffile_2fgeneral_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2ffile_2fgeneral_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2ffile_2fgeneral_2eproto;
namespace blickfeld {
namespace protocol {
namespace file {
class Client;
struct ClientDefaultTypeInternal;
BF_DLLEXPORT extern ClientDefaultTypeInternal _Client_default_instance_;
}  // namespace file
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::file::Client* Arena::CreateMaybeMessage<::blickfeld::protocol::file::Client>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace file {

// ===================================================================

class BF_DLLEXPORT Client PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.file.Client) */ {
 public:
  inline Client() : Client(nullptr) {}
  ~Client() override;
  explicit constexpr Client(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Client(const Client& from);
  Client(Client&& from) noexcept
    : Client() {
    *this = ::std::move(from);
  }

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client& operator=(Client&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Client& default_instance() {
    return *internal_default_instance();
  }
  static inline const Client* internal_default_instance() {
    return reinterpret_cast<const Client*>(
               &_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Client& a, Client& b) {
    a.Swap(&b);
  }
  inline void Swap(Client* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Client* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client* New() const final {
    return CreateMaybeMessage<Client>(nullptr);
  }

  Client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client& from);
  void MergeFrom(const Client& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.file.Client";
  }
  protected:
  explicit Client(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLibraryVersionFieldNumber = 1,
    kFileTimeNsFieldNumber = 2,
    kLanguageFieldNumber = 3,
  };
  // optional string library_version = 1 [(.blickfeld.protocol.regex) = "v[0-9]+\\.[0-9]+\\.[0-9]+"];
  bool has_library_version() const;
  private:
  bool _internal_has_library_version() const;
  public:
  void clear_library_version();
  const std::string& library_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_library_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_library_version();
  std::string* release_library_version();
  void set_allocated_library_version(std::string* library_version);
  private:
  const std::string& _internal_library_version() const;
  void _internal_set_library_version(const std::string& value);
  std::string* _internal_mutable_library_version();
  public:

  // optional uint64 file_time_ns = 2;
  bool has_file_time_ns() const;
  private:
  bool _internal_has_file_time_ns() const;
  public:
  void clear_file_time_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_time_ns() const;
  void set_file_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_time_ns() const;
  void _internal_set_file_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .blickfeld.protocol.Language language = 3;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  ::blickfeld::protocol::Language language() const;
  void set_language(::blickfeld::protocol::Language value);
  private:
  ::blickfeld::protocol::Language _internal_language() const;
  void _internal_set_language(::blickfeld::protocol::Language value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.file.Client)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr library_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_time_ns_;
  int language_;
  friend struct ::TableStruct_blickfeld_2ffile_2fgeneral_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Client

// optional string library_version = 1 [(.blickfeld.protocol.regex) = "v[0-9]+\\.[0-9]+\\.[0-9]+"];
inline bool Client::_internal_has_library_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Client::has_library_version() const {
  return _internal_has_library_version();
}
inline void Client::clear_library_version() {
  library_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Client::library_version() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.Client.library_version)
  return _internal_library_version();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Client::set_library_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 library_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.file.Client.library_version)
}
inline std::string* Client::mutable_library_version() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.file.Client.library_version)
  return _internal_mutable_library_version();
}
inline const std::string& Client::_internal_library_version() const {
  return library_version_.Get();
}
inline void Client::_internal_set_library_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  library_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Client::_internal_mutable_library_version() {
  _has_bits_[0] |= 0x00000001u;
  return library_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Client::release_library_version() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.file.Client.library_version)
  if (!_internal_has_library_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return library_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Client::set_allocated_library_version(std::string* library_version) {
  if (library_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  library_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), library_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.file.Client.library_version)
}

// optional uint64 file_time_ns = 2;
inline bool Client::_internal_has_file_time_ns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Client::has_file_time_ns() const {
  return _internal_has_file_time_ns();
}
inline void Client::clear_file_time_ns() {
  file_time_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Client::_internal_file_time_ns() const {
  return file_time_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Client::file_time_ns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.Client.file_time_ns)
  return _internal_file_time_ns();
}
inline void Client::_internal_set_file_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  file_time_ns_ = value;
}
inline void Client::set_file_time_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_time_ns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.file.Client.file_time_ns)
}

// optional .blickfeld.protocol.Language language = 3;
inline bool Client::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Client::has_language() const {
  return _internal_has_language();
}
inline void Client::clear_language() {
  language_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::blickfeld::protocol::Language Client::_internal_language() const {
  return static_cast< ::blickfeld::protocol::Language >(language_);
}
inline ::blickfeld::protocol::Language Client::language() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.file.Client.language)
  return _internal_language();
}
inline void Client::_internal_set_language(::blickfeld::protocol::Language value) {
  assert(::blickfeld::protocol::Language_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  language_ = value;
}
inline void Client::set_language(::blickfeld::protocol::Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.file.Client.language)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace file
}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2ffile_2fgeneral_2eproto
