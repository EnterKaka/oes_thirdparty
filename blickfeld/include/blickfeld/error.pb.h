// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/error.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2ferror_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2ferror_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2ferror_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2ferror_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2ferror_2eproto;
namespace blickfeld {
namespace protocol {
class Error;
struct ErrorDefaultTypeInternal;
BF_DLLEXPORT extern ErrorDefaultTypeInternal _Error_default_instance_;
class Error_ConnectionClosed;
struct Error_ConnectionClosedDefaultTypeInternal;
BF_DLLEXPORT extern Error_ConnectionClosedDefaultTypeInternal _Error_ConnectionClosed_default_instance_;
class Error_Empty;
struct Error_EmptyDefaultTypeInternal;
BF_DLLEXPORT extern Error_EmptyDefaultTypeInternal _Error_Empty_default_instance_;
class Error_HardwareError;
struct Error_HardwareErrorDefaultTypeInternal;
BF_DLLEXPORT extern Error_HardwareErrorDefaultTypeInternal _Error_HardwareError_default_instance_;
class Error_InvalidRequest;
struct Error_InvalidRequestDefaultTypeInternal;
BF_DLLEXPORT extern Error_InvalidRequestDefaultTypeInternal _Error_InvalidRequest_default_instance_;
class Error_NoDeviceDiscovered;
struct Error_NoDeviceDiscoveredDefaultTypeInternal;
BF_DLLEXPORT extern Error_NoDeviceDiscoveredDefaultTypeInternal _Error_NoDeviceDiscovered_default_instance_;
class Error_NotAllowed;
struct Error_NotAllowedDefaultTypeInternal;
BF_DLLEXPORT extern Error_NotAllowedDefaultTypeInternal _Error_NotAllowed_default_instance_;
class Error_NotFound;
struct Error_NotFoundDefaultTypeInternal;
BF_DLLEXPORT extern Error_NotFoundDefaultTypeInternal _Error_NotFound_default_instance_;
class Error_NotImplemented;
struct Error_NotImplementedDefaultTypeInternal;
BF_DLLEXPORT extern Error_NotImplementedDefaultTypeInternal _Error_NotImplemented_default_instance_;
class Error_NotInRange;
struct Error_NotInRangeDefaultTypeInternal;
BF_DLLEXPORT extern Error_NotInRangeDefaultTypeInternal _Error_NotInRange_default_instance_;
class Error_NotSupported;
struct Error_NotSupportedDefaultTypeInternal;
BF_DLLEXPORT extern Error_NotSupportedDefaultTypeInternal _Error_NotSupported_default_instance_;
class Error_OutdatedClientProtocol;
struct Error_OutdatedClientProtocolDefaultTypeInternal;
BF_DLLEXPORT extern Error_OutdatedClientProtocolDefaultTypeInternal _Error_OutdatedClientProtocol_default_instance_;
class Error_OutdatedServerProtocol;
struct Error_OutdatedServerProtocolDefaultTypeInternal;
BF_DLLEXPORT extern Error_OutdatedServerProtocolDefaultTypeInternal _Error_OutdatedServerProtocol_default_instance_;
class Error_ScannerBusy;
struct Error_ScannerBusyDefaultTypeInternal;
BF_DLLEXPORT extern Error_ScannerBusyDefaultTypeInternal _Error_ScannerBusy_default_instance_;
class Error_ServerImplementation;
struct Error_ServerImplementationDefaultTypeInternal;
BF_DLLEXPORT extern Error_ServerImplementationDefaultTypeInternal _Error_ServerImplementation_default_instance_;
class Error_SystemStop;
struct Error_SystemStopDefaultTypeInternal;
BF_DLLEXPORT extern Error_SystemStopDefaultTypeInternal _Error_SystemStop_default_instance_;
class Error_TimeSyncFailed;
struct Error_TimeSyncFailedDefaultTypeInternal;
BF_DLLEXPORT extern Error_TimeSyncFailedDefaultTypeInternal _Error_TimeSyncFailed_default_instance_;
class Error_Unknown;
struct Error_UnknownDefaultTypeInternal;
BF_DLLEXPORT extern Error_UnknownDefaultTypeInternal _Error_Unknown_default_instance_;
class Error_UnknownErrorCode;
struct Error_UnknownErrorCodeDefaultTypeInternal;
BF_DLLEXPORT extern Error_UnknownErrorCodeDefaultTypeInternal _Error_UnknownErrorCode_default_instance_;
class Error_WrongOperationMode;
struct Error_WrongOperationModeDefaultTypeInternal;
BF_DLLEXPORT extern Error_WrongOperationModeDefaultTypeInternal _Error_WrongOperationMode_default_instance_;
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::Error* Arena::CreateMaybeMessage<::blickfeld::protocol::Error>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_ConnectionClosed* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_ConnectionClosed>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_Empty* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_Empty>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_HardwareError* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_HardwareError>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_InvalidRequest* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_InvalidRequest>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_NoDeviceDiscovered* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_NoDeviceDiscovered>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_NotAllowed* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_NotAllowed>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_NotFound* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_NotFound>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_NotImplemented* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_NotImplemented>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_NotInRange* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_NotInRange>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_NotSupported* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_NotSupported>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_OutdatedClientProtocol* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_OutdatedClientProtocol>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_OutdatedServerProtocol* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_OutdatedServerProtocol>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_ScannerBusy* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_ScannerBusy>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_ServerImplementation* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_ServerImplementation>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_SystemStop* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_SystemStop>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_TimeSyncFailed* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_TimeSyncFailed>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_Unknown* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_Unknown>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_UnknownErrorCode* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_UnknownErrorCode>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Error_WrongOperationMode* Arena::CreateMaybeMessage<::blickfeld::protocol::Error_WrongOperationMode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {

// ===================================================================

class BF_DLLEXPORT Error_Unknown PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.Unknown) */ {
 public:
  inline Error_Unknown() : Error_Unknown(nullptr) {}
  ~Error_Unknown() override;
  explicit constexpr Error_Unknown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_Unknown(const Error_Unknown& from);
  Error_Unknown(Error_Unknown&& from) noexcept
    : Error_Unknown() {
    *this = ::std::move(from);
  }

  inline Error_Unknown& operator=(const Error_Unknown& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_Unknown& operator=(Error_Unknown&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_Unknown& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_Unknown* internal_default_instance() {
    return reinterpret_cast<const Error_Unknown*>(
               &_Error_Unknown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Error_Unknown& a, Error_Unknown& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_Unknown* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_Unknown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_Unknown* New() const final {
    return CreateMaybeMessage<Error_Unknown>(nullptr);
  }

  Error_Unknown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_Unknown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_Unknown& from);
  void MergeFrom(const Error_Unknown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_Unknown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.Unknown";
  }
  protected:
  explicit Error_Unknown(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
  };
  // optional string description = 1;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.Unknown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_NotImplemented PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.NotImplemented) */ {
 public:
  inline Error_NotImplemented() : Error_NotImplemented(nullptr) {}
  ~Error_NotImplemented() override;
  explicit constexpr Error_NotImplemented(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_NotImplemented(const Error_NotImplemented& from);
  Error_NotImplemented(Error_NotImplemented&& from) noexcept
    : Error_NotImplemented() {
    *this = ::std::move(from);
  }

  inline Error_NotImplemented& operator=(const Error_NotImplemented& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_NotImplemented& operator=(Error_NotImplemented&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_NotImplemented& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_NotImplemented* internal_default_instance() {
    return reinterpret_cast<const Error_NotImplemented*>(
               &_Error_NotImplemented_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Error_NotImplemented& a, Error_NotImplemented& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_NotImplemented* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_NotImplemented* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_NotImplemented* New() const final {
    return CreateMaybeMessage<Error_NotImplemented>(nullptr);
  }

  Error_NotImplemented* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_NotImplemented>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_NotImplemented& from);
  void MergeFrom(const Error_NotImplemented& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_NotImplemented* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.NotImplemented";
  }
  protected:
  explicit Error_NotImplemented(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // optional string reason = 1 [default = "No detailed reason available."];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.NotImplemented)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.Empty) */ {
 public:
  inline Error_Empty() : Error_Empty(nullptr) {}
  ~Error_Empty() override;
  explicit constexpr Error_Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_Empty(const Error_Empty& from);
  Error_Empty(Error_Empty&& from) noexcept
    : Error_Empty() {
    *this = ::std::move(from);
  }

  inline Error_Empty& operator=(const Error_Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_Empty& operator=(Error_Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_Empty* internal_default_instance() {
    return reinterpret_cast<const Error_Empty*>(
               &_Error_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Error_Empty& a, Error_Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_Empty* New() const final {
    return CreateMaybeMessage<Error_Empty>(nullptr);
  }

  Error_Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_Empty& from);
  void MergeFrom(const Error_Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.Empty";
  }
  protected:
  explicit Error_Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_ServerImplementation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.ServerImplementation) */ {
 public:
  inline Error_ServerImplementation() : Error_ServerImplementation(nullptr) {}
  ~Error_ServerImplementation() override;
  explicit constexpr Error_ServerImplementation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_ServerImplementation(const Error_ServerImplementation& from);
  Error_ServerImplementation(Error_ServerImplementation&& from) noexcept
    : Error_ServerImplementation() {
    *this = ::std::move(from);
  }

  inline Error_ServerImplementation& operator=(const Error_ServerImplementation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_ServerImplementation& operator=(Error_ServerImplementation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_ServerImplementation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_ServerImplementation* internal_default_instance() {
    return reinterpret_cast<const Error_ServerImplementation*>(
               &_Error_ServerImplementation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Error_ServerImplementation& a, Error_ServerImplementation& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_ServerImplementation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_ServerImplementation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_ServerImplementation* New() const final {
    return CreateMaybeMessage<Error_ServerImplementation>(nullptr);
  }

  Error_ServerImplementation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_ServerImplementation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_ServerImplementation& from);
  void MergeFrom(const Error_ServerImplementation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_ServerImplementation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.ServerImplementation";
  }
  protected:
  explicit Error_ServerImplementation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.ServerImplementation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_InvalidRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.InvalidRequest) */ {
 public:
  inline Error_InvalidRequest() : Error_InvalidRequest(nullptr) {}
  ~Error_InvalidRequest() override;
  explicit constexpr Error_InvalidRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_InvalidRequest(const Error_InvalidRequest& from);
  Error_InvalidRequest(Error_InvalidRequest&& from) noexcept
    : Error_InvalidRequest() {
    *this = ::std::move(from);
  }

  inline Error_InvalidRequest& operator=(const Error_InvalidRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_InvalidRequest& operator=(Error_InvalidRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_InvalidRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_InvalidRequest* internal_default_instance() {
    return reinterpret_cast<const Error_InvalidRequest*>(
               &_Error_InvalidRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Error_InvalidRequest& a, Error_InvalidRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_InvalidRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_InvalidRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_InvalidRequest* New() const final {
    return CreateMaybeMessage<Error_InvalidRequest>(nullptr);
  }

  Error_InvalidRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_InvalidRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_InvalidRequest& from);
  void MergeFrom(const Error_InvalidRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_InvalidRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.InvalidRequest";
  }
  protected:
  explicit Error_InvalidRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 2,
    kValidationErrorFieldNumber = 1,
  };
  // repeated .blickfeld.protocol.Constraint constraints = 2;
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::blickfeld::protocol::Constraint* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >*
      mutable_constraints();
  private:
  const ::blickfeld::protocol::Constraint& _internal_constraints(int index) const;
  ::blickfeld::protocol::Constraint* _internal_add_constraints();
  public:
  const ::blickfeld::protocol::Constraint& constraints(int index) const;
  ::blickfeld::protocol::Constraint* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >&
      constraints() const;

  // optional string validation_error = 1;
  bool has_validation_error() const;
  private:
  bool _internal_has_validation_error() const;
  public:
  void clear_validation_error();
  const std::string& validation_error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validation_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validation_error();
  std::string* release_validation_error();
  void set_allocated_validation_error(std::string* validation_error);
  private:
  const std::string& _internal_validation_error() const;
  void _internal_set_validation_error(const std::string& value);
  std::string* _internal_mutable_validation_error();
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.InvalidRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint > constraints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validation_error_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_ConnectionClosed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.ConnectionClosed) */ {
 public:
  inline Error_ConnectionClosed() : Error_ConnectionClosed(nullptr) {}
  ~Error_ConnectionClosed() override;
  explicit constexpr Error_ConnectionClosed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_ConnectionClosed(const Error_ConnectionClosed& from);
  Error_ConnectionClosed(Error_ConnectionClosed&& from) noexcept
    : Error_ConnectionClosed() {
    *this = ::std::move(from);
  }

  inline Error_ConnectionClosed& operator=(const Error_ConnectionClosed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_ConnectionClosed& operator=(Error_ConnectionClosed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_ConnectionClosed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_ConnectionClosed* internal_default_instance() {
    return reinterpret_cast<const Error_ConnectionClosed*>(
               &_Error_ConnectionClosed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Error_ConnectionClosed& a, Error_ConnectionClosed& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_ConnectionClosed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_ConnectionClosed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_ConnectionClosed* New() const final {
    return CreateMaybeMessage<Error_ConnectionClosed>(nullptr);
  }

  Error_ConnectionClosed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_ConnectionClosed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_ConnectionClosed& from);
  void MergeFrom(const Error_ConnectionClosed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_ConnectionClosed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.ConnectionClosed";
  }
  protected:
  explicit Error_ConnectionClosed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.ConnectionClosed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_OutdatedServerProtocol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.OutdatedServerProtocol) */ {
 public:
  inline Error_OutdatedServerProtocol() : Error_OutdatedServerProtocol(nullptr) {}
  ~Error_OutdatedServerProtocol() override;
  explicit constexpr Error_OutdatedServerProtocol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_OutdatedServerProtocol(const Error_OutdatedServerProtocol& from);
  Error_OutdatedServerProtocol(Error_OutdatedServerProtocol&& from) noexcept
    : Error_OutdatedServerProtocol() {
    *this = ::std::move(from);
  }

  inline Error_OutdatedServerProtocol& operator=(const Error_OutdatedServerProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_OutdatedServerProtocol& operator=(Error_OutdatedServerProtocol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_OutdatedServerProtocol& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_OutdatedServerProtocol* internal_default_instance() {
    return reinterpret_cast<const Error_OutdatedServerProtocol*>(
               &_Error_OutdatedServerProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Error_OutdatedServerProtocol& a, Error_OutdatedServerProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_OutdatedServerProtocol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_OutdatedServerProtocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_OutdatedServerProtocol* New() const final {
    return CreateMaybeMessage<Error_OutdatedServerProtocol>(nullptr);
  }

  Error_OutdatedServerProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_OutdatedServerProtocol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_OutdatedServerProtocol& from);
  void MergeFrom(const Error_OutdatedServerProtocol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_OutdatedServerProtocol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.OutdatedServerProtocol";
  }
  protected:
  explicit Error_OutdatedServerProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredVersionFieldNumber = 1,
  };
  // optional uint32 required_version = 1;
  bool has_required_version() const;
  private:
  bool _internal_has_required_version() const;
  public:
  void clear_required_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 required_version() const;
  void set_required_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_required_version() const;
  void _internal_set_required_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.OutdatedServerProtocol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 required_version_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_OutdatedClientProtocol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.OutdatedClientProtocol) */ {
 public:
  inline Error_OutdatedClientProtocol() : Error_OutdatedClientProtocol(nullptr) {}
  ~Error_OutdatedClientProtocol() override;
  explicit constexpr Error_OutdatedClientProtocol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_OutdatedClientProtocol(const Error_OutdatedClientProtocol& from);
  Error_OutdatedClientProtocol(Error_OutdatedClientProtocol&& from) noexcept
    : Error_OutdatedClientProtocol() {
    *this = ::std::move(from);
  }

  inline Error_OutdatedClientProtocol& operator=(const Error_OutdatedClientProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_OutdatedClientProtocol& operator=(Error_OutdatedClientProtocol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_OutdatedClientProtocol& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_OutdatedClientProtocol* internal_default_instance() {
    return reinterpret_cast<const Error_OutdatedClientProtocol*>(
               &_Error_OutdatedClientProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Error_OutdatedClientProtocol& a, Error_OutdatedClientProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_OutdatedClientProtocol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_OutdatedClientProtocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_OutdatedClientProtocol* New() const final {
    return CreateMaybeMessage<Error_OutdatedClientProtocol>(nullptr);
  }

  Error_OutdatedClientProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_OutdatedClientProtocol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_OutdatedClientProtocol& from);
  void MergeFrom(const Error_OutdatedClientProtocol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_OutdatedClientProtocol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.OutdatedClientProtocol";
  }
  protected:
  explicit Error_OutdatedClientProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredVersionFieldNumber = 1,
  };
  // optional uint32 required_version = 1;
  bool has_required_version() const;
  private:
  bool _internal_has_required_version() const;
  public:
  void clear_required_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 required_version() const;
  void set_required_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_required_version() const;
  void _internal_set_required_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.OutdatedClientProtocol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 required_version_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_ScannerBusy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.ScannerBusy) */ {
 public:
  inline Error_ScannerBusy() : Error_ScannerBusy(nullptr) {}
  ~Error_ScannerBusy() override;
  explicit constexpr Error_ScannerBusy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_ScannerBusy(const Error_ScannerBusy& from);
  Error_ScannerBusy(Error_ScannerBusy&& from) noexcept
    : Error_ScannerBusy() {
    *this = ::std::move(from);
  }

  inline Error_ScannerBusy& operator=(const Error_ScannerBusy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_ScannerBusy& operator=(Error_ScannerBusy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_ScannerBusy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_ScannerBusy* internal_default_instance() {
    return reinterpret_cast<const Error_ScannerBusy*>(
               &_Error_ScannerBusy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Error_ScannerBusy& a, Error_ScannerBusy& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_ScannerBusy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_ScannerBusy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_ScannerBusy* New() const final {
    return CreateMaybeMessage<Error_ScannerBusy>(nullptr);
  }

  Error_ScannerBusy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_ScannerBusy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_ScannerBusy& from);
  void MergeFrom(const Error_ScannerBusy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_ScannerBusy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.ScannerBusy";
  }
  protected:
  explicit Error_ScannerBusy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.ScannerBusy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_WrongOperationMode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.WrongOperationMode) */ {
 public:
  inline Error_WrongOperationMode() : Error_WrongOperationMode(nullptr) {}
  ~Error_WrongOperationMode() override;
  explicit constexpr Error_WrongOperationMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_WrongOperationMode(const Error_WrongOperationMode& from);
  Error_WrongOperationMode(Error_WrongOperationMode&& from) noexcept
    : Error_WrongOperationMode() {
    *this = ::std::move(from);
  }

  inline Error_WrongOperationMode& operator=(const Error_WrongOperationMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_WrongOperationMode& operator=(Error_WrongOperationMode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_WrongOperationMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_WrongOperationMode* internal_default_instance() {
    return reinterpret_cast<const Error_WrongOperationMode*>(
               &_Error_WrongOperationMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Error_WrongOperationMode& a, Error_WrongOperationMode& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_WrongOperationMode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_WrongOperationMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_WrongOperationMode* New() const final {
    return CreateMaybeMessage<Error_WrongOperationMode>(nullptr);
  }

  Error_WrongOperationMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_WrongOperationMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_WrongOperationMode& from);
  void MergeFrom(const Error_WrongOperationMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_WrongOperationMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.WrongOperationMode";
  }
  protected:
  explicit Error_WrongOperationMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.WrongOperationMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_NotAllowed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.NotAllowed) */ {
 public:
  inline Error_NotAllowed() : Error_NotAllowed(nullptr) {}
  ~Error_NotAllowed() override;
  explicit constexpr Error_NotAllowed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_NotAllowed(const Error_NotAllowed& from);
  Error_NotAllowed(Error_NotAllowed&& from) noexcept
    : Error_NotAllowed() {
    *this = ::std::move(from);
  }

  inline Error_NotAllowed& operator=(const Error_NotAllowed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_NotAllowed& operator=(Error_NotAllowed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_NotAllowed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_NotAllowed* internal_default_instance() {
    return reinterpret_cast<const Error_NotAllowed*>(
               &_Error_NotAllowed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Error_NotAllowed& a, Error_NotAllowed& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_NotAllowed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_NotAllowed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_NotAllowed* New() const final {
    return CreateMaybeMessage<Error_NotAllowed>(nullptr);
  }

  Error_NotAllowed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_NotAllowed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_NotAllowed& from);
  void MergeFrom(const Error_NotAllowed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_NotAllowed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.NotAllowed";
  }
  protected:
  explicit Error_NotAllowed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.NotAllowed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_HardwareError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.HardwareError) */ {
 public:
  inline Error_HardwareError() : Error_HardwareError(nullptr) {}
  ~Error_HardwareError() override;
  explicit constexpr Error_HardwareError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_HardwareError(const Error_HardwareError& from);
  Error_HardwareError(Error_HardwareError&& from) noexcept
    : Error_HardwareError() {
    *this = ::std::move(from);
  }

  inline Error_HardwareError& operator=(const Error_HardwareError& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_HardwareError& operator=(Error_HardwareError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_HardwareError& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_HardwareError* internal_default_instance() {
    return reinterpret_cast<const Error_HardwareError*>(
               &_Error_HardwareError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Error_HardwareError& a, Error_HardwareError& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_HardwareError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_HardwareError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_HardwareError* New() const final {
    return CreateMaybeMessage<Error_HardwareError>(nullptr);
  }

  Error_HardwareError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_HardwareError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_HardwareError& from);
  void MergeFrom(const Error_HardwareError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_HardwareError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.HardwareError";
  }
  protected:
  explicit Error_HardwareError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.HardwareError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_SystemStop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.SystemStop) */ {
 public:
  inline Error_SystemStop() : Error_SystemStop(nullptr) {}
  ~Error_SystemStop() override;
  explicit constexpr Error_SystemStop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_SystemStop(const Error_SystemStop& from);
  Error_SystemStop(Error_SystemStop&& from) noexcept
    : Error_SystemStop() {
    *this = ::std::move(from);
  }

  inline Error_SystemStop& operator=(const Error_SystemStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_SystemStop& operator=(Error_SystemStop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_SystemStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_SystemStop* internal_default_instance() {
    return reinterpret_cast<const Error_SystemStop*>(
               &_Error_SystemStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Error_SystemStop& a, Error_SystemStop& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_SystemStop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_SystemStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_SystemStop* New() const final {
    return CreateMaybeMessage<Error_SystemStop>(nullptr);
  }

  Error_SystemStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_SystemStop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_SystemStop& from);
  void MergeFrom(const Error_SystemStop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_SystemStop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.SystemStop";
  }
  protected:
  explicit Error_SystemStop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.SystemStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_NotFound PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.NotFound) */ {
 public:
  inline Error_NotFound() : Error_NotFound(nullptr) {}
  ~Error_NotFound() override;
  explicit constexpr Error_NotFound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_NotFound(const Error_NotFound& from);
  Error_NotFound(Error_NotFound&& from) noexcept
    : Error_NotFound() {
    *this = ::std::move(from);
  }

  inline Error_NotFound& operator=(const Error_NotFound& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_NotFound& operator=(Error_NotFound&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_NotFound& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_NotFound* internal_default_instance() {
    return reinterpret_cast<const Error_NotFound*>(
               &_Error_NotFound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Error_NotFound& a, Error_NotFound& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_NotFound* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_NotFound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_NotFound* New() const final {
    return CreateMaybeMessage<Error_NotFound>(nullptr);
  }

  Error_NotFound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_NotFound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_NotFound& from);
  void MergeFrom(const Error_NotFound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_NotFound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.NotFound";
  }
  protected:
  explicit Error_NotFound(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.NotFound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_TimeSyncFailed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.TimeSyncFailed) */ {
 public:
  inline Error_TimeSyncFailed() : Error_TimeSyncFailed(nullptr) {}
  ~Error_TimeSyncFailed() override;
  explicit constexpr Error_TimeSyncFailed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_TimeSyncFailed(const Error_TimeSyncFailed& from);
  Error_TimeSyncFailed(Error_TimeSyncFailed&& from) noexcept
    : Error_TimeSyncFailed() {
    *this = ::std::move(from);
  }

  inline Error_TimeSyncFailed& operator=(const Error_TimeSyncFailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_TimeSyncFailed& operator=(Error_TimeSyncFailed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_TimeSyncFailed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_TimeSyncFailed* internal_default_instance() {
    return reinterpret_cast<const Error_TimeSyncFailed*>(
               &_Error_TimeSyncFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Error_TimeSyncFailed& a, Error_TimeSyncFailed& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_TimeSyncFailed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_TimeSyncFailed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_TimeSyncFailed* New() const final {
    return CreateMaybeMessage<Error_TimeSyncFailed>(nullptr);
  }

  Error_TimeSyncFailed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_TimeSyncFailed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_TimeSyncFailed& from);
  void MergeFrom(const Error_TimeSyncFailed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_TimeSyncFailed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.TimeSyncFailed";
  }
  protected:
  explicit Error_TimeSyncFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNtpDaemonLogFieldNumber = 1,
  };
  // optional string ntp_daemon_log = 1;
  bool has_ntp_daemon_log() const;
  private:
  bool _internal_has_ntp_daemon_log() const;
  public:
  void clear_ntp_daemon_log();
  const std::string& ntp_daemon_log() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ntp_daemon_log(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ntp_daemon_log();
  std::string* release_ntp_daemon_log();
  void set_allocated_ntp_daemon_log(std::string* ntp_daemon_log);
  private:
  const std::string& _internal_ntp_daemon_log() const;
  void _internal_set_ntp_daemon_log(const std::string& value);
  std::string* _internal_mutable_ntp_daemon_log();
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.TimeSyncFailed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ntp_daemon_log_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_NoDeviceDiscovered PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.NoDeviceDiscovered) */ {
 public:
  inline Error_NoDeviceDiscovered() : Error_NoDeviceDiscovered(nullptr) {}
  ~Error_NoDeviceDiscovered() override;
  explicit constexpr Error_NoDeviceDiscovered(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_NoDeviceDiscovered(const Error_NoDeviceDiscovered& from);
  Error_NoDeviceDiscovered(Error_NoDeviceDiscovered&& from) noexcept
    : Error_NoDeviceDiscovered() {
    *this = ::std::move(from);
  }

  inline Error_NoDeviceDiscovered& operator=(const Error_NoDeviceDiscovered& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_NoDeviceDiscovered& operator=(Error_NoDeviceDiscovered&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_NoDeviceDiscovered& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_NoDeviceDiscovered* internal_default_instance() {
    return reinterpret_cast<const Error_NoDeviceDiscovered*>(
               &_Error_NoDeviceDiscovered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Error_NoDeviceDiscovered& a, Error_NoDeviceDiscovered& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_NoDeviceDiscovered* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_NoDeviceDiscovered* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_NoDeviceDiscovered* New() const final {
    return CreateMaybeMessage<Error_NoDeviceDiscovered>(nullptr);
  }

  Error_NoDeviceDiscovered* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_NoDeviceDiscovered>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_NoDeviceDiscovered& from);
  void MergeFrom(const Error_NoDeviceDiscovered& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_NoDeviceDiscovered* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.NoDeviceDiscovered";
  }
  protected:
  explicit Error_NoDeviceDiscovered(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.NoDeviceDiscovered)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_UnknownErrorCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.UnknownErrorCode) */ {
 public:
  inline Error_UnknownErrorCode() : Error_UnknownErrorCode(nullptr) {}
  ~Error_UnknownErrorCode() override;
  explicit constexpr Error_UnknownErrorCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_UnknownErrorCode(const Error_UnknownErrorCode& from);
  Error_UnknownErrorCode(Error_UnknownErrorCode&& from) noexcept
    : Error_UnknownErrorCode() {
    *this = ::std::move(from);
  }

  inline Error_UnknownErrorCode& operator=(const Error_UnknownErrorCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_UnknownErrorCode& operator=(Error_UnknownErrorCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_UnknownErrorCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_UnknownErrorCode* internal_default_instance() {
    return reinterpret_cast<const Error_UnknownErrorCode*>(
               &_Error_UnknownErrorCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Error_UnknownErrorCode& a, Error_UnknownErrorCode& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_UnknownErrorCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_UnknownErrorCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_UnknownErrorCode* New() const final {
    return CreateMaybeMessage<Error_UnknownErrorCode>(nullptr);
  }

  Error_UnknownErrorCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_UnknownErrorCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_UnknownErrorCode& from);
  void MergeFrom(const Error_UnknownErrorCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_UnknownErrorCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.UnknownErrorCode";
  }
  protected:
  explicit Error_UnknownErrorCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
  };
  // optional uint32 error_code = 1;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.UnknownErrorCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_NotInRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.NotInRange) */ {
 public:
  inline Error_NotInRange() : Error_NotInRange(nullptr) {}
  ~Error_NotInRange() override;
  explicit constexpr Error_NotInRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_NotInRange(const Error_NotInRange& from);
  Error_NotInRange(Error_NotInRange&& from) noexcept
    : Error_NotInRange() {
    *this = ::std::move(from);
  }

  inline Error_NotInRange& operator=(const Error_NotInRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_NotInRange& operator=(Error_NotInRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_NotInRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_NotInRange* internal_default_instance() {
    return reinterpret_cast<const Error_NotInRange*>(
               &_Error_NotInRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Error_NotInRange& a, Error_NotInRange& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_NotInRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_NotInRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_NotInRange* New() const final {
    return CreateMaybeMessage<Error_NotInRange>(nullptr);
  }

  Error_NotInRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_NotInRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_NotInRange& from);
  void MergeFrom(const Error_NotInRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_NotInRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.NotInRange";
  }
  protected:
  explicit Error_NotInRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterFieldNumber = 1,
    kUnitFieldNumber = 5,
    kMinimumFieldNumber = 2,
    kMaximumFieldNumber = 3,
    kRequestedFieldNumber = 4,
  };
  // optional string parameter = 1;
  bool has_parameter() const;
  private:
  bool _internal_has_parameter() const;
  public:
  void clear_parameter();
  const std::string& parameter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parameter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parameter();
  std::string* release_parameter();
  void set_allocated_parameter(std::string* parameter);
  private:
  const std::string& _internal_parameter() const;
  void _internal_set_parameter(const std::string& value);
  std::string* _internal_mutable_parameter();
  public:

  // optional string unit = 5 [default = ""];
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const std::string& unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // optional float minimum = 2;
  bool has_minimum() const;
  private:
  bool _internal_has_minimum() const;
  public:
  void clear_minimum();
  float minimum() const;
  void set_minimum(float value);
  private:
  float _internal_minimum() const;
  void _internal_set_minimum(float value);
  public:

  // optional float maximum = 3;
  bool has_maximum() const;
  private:
  bool _internal_has_maximum() const;
  public:
  void clear_maximum();
  float maximum() const;
  void set_maximum(float value);
  private:
  float _internal_maximum() const;
  void _internal_set_maximum(float value);
  public:

  // optional float requested = 4;
  bool has_requested() const;
  private:
  bool _internal_has_requested() const;
  public:
  void clear_requested();
  float requested() const;
  void set_requested(float value);
  private:
  float _internal_requested() const;
  void _internal_set_requested(float value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.NotInRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  float minimum_;
  float maximum_;
  float requested_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error_NotSupported PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error.NotSupported) */ {
 public:
  inline Error_NotSupported() : Error_NotSupported(nullptr) {}
  ~Error_NotSupported() override;
  explicit constexpr Error_NotSupported(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_NotSupported(const Error_NotSupported& from);
  Error_NotSupported(Error_NotSupported&& from) noexcept
    : Error_NotSupported() {
    *this = ::std::move(from);
  }

  inline Error_NotSupported& operator=(const Error_NotSupported& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_NotSupported& operator=(Error_NotSupported&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_NotSupported& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_NotSupported* internal_default_instance() {
    return reinterpret_cast<const Error_NotSupported*>(
               &_Error_NotSupported_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Error_NotSupported& a, Error_NotSupported& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_NotSupported* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_NotSupported* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error_NotSupported* New() const final {
    return CreateMaybeMessage<Error_NotSupported>(nullptr);
  }

  Error_NotSupported* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error_NotSupported>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error_NotSupported& from);
  void MergeFrom(const Error_NotSupported& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_NotSupported* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error.NotSupported";
  }
  protected:
  explicit Error_NotSupported(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // optional string reason = 1 [default = "No detailed reason available."];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error.NotSupported)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Error PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit constexpr Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  enum ErrorCase {
    kUnknown = 1,
    kNotImplemented = 2,
    kEmpty = 3,
    kServerImplementation = 4,
    kInvalidRequest = 5,
    kConnectionClosed = 6,
    kOutdatedServerProtocol = 11,
    kOutdatedClientProtocol = 12,
    kScannerBusy = 13,
    kWrongOperationMode = 14,
    kNotAllowed = 15,
    kHardwareError = 16,
    kSystemStop = 17,
    kNotFound = 18,
    kUnknownErrorCode = 21,
    kNotInRange = 22,
    kTimeSyncFailed = 23,
    kNoDeviceDiscovered = 24,
    kNotSupported = 25,
    ERROR_NOT_SET = 0,
  };

  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(nullptr);
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Error_Unknown Unknown;
  typedef Error_NotImplemented NotImplemented;
  typedef Error_Empty Empty;
  typedef Error_ServerImplementation ServerImplementation;
  typedef Error_InvalidRequest InvalidRequest;
  typedef Error_ConnectionClosed ConnectionClosed;
  typedef Error_OutdatedServerProtocol OutdatedServerProtocol;
  typedef Error_OutdatedClientProtocol OutdatedClientProtocol;
  typedef Error_ScannerBusy ScannerBusy;
  typedef Error_WrongOperationMode WrongOperationMode;
  typedef Error_NotAllowed NotAllowed;
  typedef Error_HardwareError HardwareError;
  typedef Error_SystemStop SystemStop;
  typedef Error_NotFound NotFound;
  typedef Error_TimeSyncFailed TimeSyncFailed;
  typedef Error_NoDeviceDiscovered NoDeviceDiscovered;
  typedef Error_UnknownErrorCode UnknownErrorCode;
  typedef Error_NotInRange NotInRange;
  typedef Error_NotSupported NotSupported;

  // accessors -------------------------------------------------------

  enum : int {
    kUnknownFieldNumber = 1,
    kNotImplementedFieldNumber = 2,
    kEmptyFieldNumber = 3,
    kServerImplementationFieldNumber = 4,
    kInvalidRequestFieldNumber = 5,
    kConnectionClosedFieldNumber = 6,
    kOutdatedServerProtocolFieldNumber = 11,
    kOutdatedClientProtocolFieldNumber = 12,
    kScannerBusyFieldNumber = 13,
    kWrongOperationModeFieldNumber = 14,
    kNotAllowedFieldNumber = 15,
    kHardwareErrorFieldNumber = 16,
    kSystemStopFieldNumber = 17,
    kNotFoundFieldNumber = 18,
    kUnknownErrorCodeFieldNumber = 21,
    kNotInRangeFieldNumber = 22,
    kTimeSyncFailedFieldNumber = 23,
    kNoDeviceDiscoveredFieldNumber = 24,
    kNotSupportedFieldNumber = 25,
  };
  // .blickfeld.protocol.Error.Unknown unknown = 1;
  bool has_unknown() const;
  private:
  bool _internal_has_unknown() const;
  public:
  void clear_unknown();
  const ::blickfeld::protocol::Error_Unknown& unknown() const;
  ::blickfeld::protocol::Error_Unknown* release_unknown();
  ::blickfeld::protocol::Error_Unknown* mutable_unknown();
  void set_allocated_unknown(::blickfeld::protocol::Error_Unknown* unknown);
  private:
  const ::blickfeld::protocol::Error_Unknown& _internal_unknown() const;
  ::blickfeld::protocol::Error_Unknown* _internal_mutable_unknown();
  public:
  void unsafe_arena_set_allocated_unknown(
      ::blickfeld::protocol::Error_Unknown* unknown);
  ::blickfeld::protocol::Error_Unknown* unsafe_arena_release_unknown();

  // .blickfeld.protocol.Error.NotImplemented not_implemented = 2;
  bool has_not_implemented() const;
  private:
  bool _internal_has_not_implemented() const;
  public:
  void clear_not_implemented();
  const ::blickfeld::protocol::Error_NotImplemented& not_implemented() const;
  ::blickfeld::protocol::Error_NotImplemented* release_not_implemented();
  ::blickfeld::protocol::Error_NotImplemented* mutable_not_implemented();
  void set_allocated_not_implemented(::blickfeld::protocol::Error_NotImplemented* not_implemented);
  private:
  const ::blickfeld::protocol::Error_NotImplemented& _internal_not_implemented() const;
  ::blickfeld::protocol::Error_NotImplemented* _internal_mutable_not_implemented();
  public:
  void unsafe_arena_set_allocated_not_implemented(
      ::blickfeld::protocol::Error_NotImplemented* not_implemented);
  ::blickfeld::protocol::Error_NotImplemented* unsafe_arena_release_not_implemented();

  // .blickfeld.protocol.Error.Empty empty = 3;
  bool has_empty() const;
  private:
  bool _internal_has_empty() const;
  public:
  void clear_empty();
  const ::blickfeld::protocol::Error_Empty& empty() const;
  ::blickfeld::protocol::Error_Empty* release_empty();
  ::blickfeld::protocol::Error_Empty* mutable_empty();
  void set_allocated_empty(::blickfeld::protocol::Error_Empty* empty);
  private:
  const ::blickfeld::protocol::Error_Empty& _internal_empty() const;
  ::blickfeld::protocol::Error_Empty* _internal_mutable_empty();
  public:
  void unsafe_arena_set_allocated_empty(
      ::blickfeld::protocol::Error_Empty* empty);
  ::blickfeld::protocol::Error_Empty* unsafe_arena_release_empty();

  // .blickfeld.protocol.Error.ServerImplementation server_implementation = 4;
  bool has_server_implementation() const;
  private:
  bool _internal_has_server_implementation() const;
  public:
  void clear_server_implementation();
  const ::blickfeld::protocol::Error_ServerImplementation& server_implementation() const;
  ::blickfeld::protocol::Error_ServerImplementation* release_server_implementation();
  ::blickfeld::protocol::Error_ServerImplementation* mutable_server_implementation();
  void set_allocated_server_implementation(::blickfeld::protocol::Error_ServerImplementation* server_implementation);
  private:
  const ::blickfeld::protocol::Error_ServerImplementation& _internal_server_implementation() const;
  ::blickfeld::protocol::Error_ServerImplementation* _internal_mutable_server_implementation();
  public:
  void unsafe_arena_set_allocated_server_implementation(
      ::blickfeld::protocol::Error_ServerImplementation* server_implementation);
  ::blickfeld::protocol::Error_ServerImplementation* unsafe_arena_release_server_implementation();

  // .blickfeld.protocol.Error.InvalidRequest invalid_request = 5;
  bool has_invalid_request() const;
  private:
  bool _internal_has_invalid_request() const;
  public:
  void clear_invalid_request();
  const ::blickfeld::protocol::Error_InvalidRequest& invalid_request() const;
  ::blickfeld::protocol::Error_InvalidRequest* release_invalid_request();
  ::blickfeld::protocol::Error_InvalidRequest* mutable_invalid_request();
  void set_allocated_invalid_request(::blickfeld::protocol::Error_InvalidRequest* invalid_request);
  private:
  const ::blickfeld::protocol::Error_InvalidRequest& _internal_invalid_request() const;
  ::blickfeld::protocol::Error_InvalidRequest* _internal_mutable_invalid_request();
  public:
  void unsafe_arena_set_allocated_invalid_request(
      ::blickfeld::protocol::Error_InvalidRequest* invalid_request);
  ::blickfeld::protocol::Error_InvalidRequest* unsafe_arena_release_invalid_request();

  // .blickfeld.protocol.Error.ConnectionClosed connection_closed = 6;
  bool has_connection_closed() const;
  private:
  bool _internal_has_connection_closed() const;
  public:
  void clear_connection_closed();
  const ::blickfeld::protocol::Error_ConnectionClosed& connection_closed() const;
  ::blickfeld::protocol::Error_ConnectionClosed* release_connection_closed();
  ::blickfeld::protocol::Error_ConnectionClosed* mutable_connection_closed();
  void set_allocated_connection_closed(::blickfeld::protocol::Error_ConnectionClosed* connection_closed);
  private:
  const ::blickfeld::protocol::Error_ConnectionClosed& _internal_connection_closed() const;
  ::blickfeld::protocol::Error_ConnectionClosed* _internal_mutable_connection_closed();
  public:
  void unsafe_arena_set_allocated_connection_closed(
      ::blickfeld::protocol::Error_ConnectionClosed* connection_closed);
  ::blickfeld::protocol::Error_ConnectionClosed* unsafe_arena_release_connection_closed();

  // .blickfeld.protocol.Error.OutdatedServerProtocol outdated_server_protocol = 11;
  bool has_outdated_server_protocol() const;
  private:
  bool _internal_has_outdated_server_protocol() const;
  public:
  void clear_outdated_server_protocol();
  const ::blickfeld::protocol::Error_OutdatedServerProtocol& outdated_server_protocol() const;
  ::blickfeld::protocol::Error_OutdatedServerProtocol* release_outdated_server_protocol();
  ::blickfeld::protocol::Error_OutdatedServerProtocol* mutable_outdated_server_protocol();
  void set_allocated_outdated_server_protocol(::blickfeld::protocol::Error_OutdatedServerProtocol* outdated_server_protocol);
  private:
  const ::blickfeld::protocol::Error_OutdatedServerProtocol& _internal_outdated_server_protocol() const;
  ::blickfeld::protocol::Error_OutdatedServerProtocol* _internal_mutable_outdated_server_protocol();
  public:
  void unsafe_arena_set_allocated_outdated_server_protocol(
      ::blickfeld::protocol::Error_OutdatedServerProtocol* outdated_server_protocol);
  ::blickfeld::protocol::Error_OutdatedServerProtocol* unsafe_arena_release_outdated_server_protocol();

  // .blickfeld.protocol.Error.OutdatedClientProtocol outdated_client_protocol = 12;
  bool has_outdated_client_protocol() const;
  private:
  bool _internal_has_outdated_client_protocol() const;
  public:
  void clear_outdated_client_protocol();
  const ::blickfeld::protocol::Error_OutdatedClientProtocol& outdated_client_protocol() const;
  ::blickfeld::protocol::Error_OutdatedClientProtocol* release_outdated_client_protocol();
  ::blickfeld::protocol::Error_OutdatedClientProtocol* mutable_outdated_client_protocol();
  void set_allocated_outdated_client_protocol(::blickfeld::protocol::Error_OutdatedClientProtocol* outdated_client_protocol);
  private:
  const ::blickfeld::protocol::Error_OutdatedClientProtocol& _internal_outdated_client_protocol() const;
  ::blickfeld::protocol::Error_OutdatedClientProtocol* _internal_mutable_outdated_client_protocol();
  public:
  void unsafe_arena_set_allocated_outdated_client_protocol(
      ::blickfeld::protocol::Error_OutdatedClientProtocol* outdated_client_protocol);
  ::blickfeld::protocol::Error_OutdatedClientProtocol* unsafe_arena_release_outdated_client_protocol();

  // .blickfeld.protocol.Error.ScannerBusy scanner_busy = 13;
  bool has_scanner_busy() const;
  private:
  bool _internal_has_scanner_busy() const;
  public:
  void clear_scanner_busy();
  const ::blickfeld::protocol::Error_ScannerBusy& scanner_busy() const;
  ::blickfeld::protocol::Error_ScannerBusy* release_scanner_busy();
  ::blickfeld::protocol::Error_ScannerBusy* mutable_scanner_busy();
  void set_allocated_scanner_busy(::blickfeld::protocol::Error_ScannerBusy* scanner_busy);
  private:
  const ::blickfeld::protocol::Error_ScannerBusy& _internal_scanner_busy() const;
  ::blickfeld::protocol::Error_ScannerBusy* _internal_mutable_scanner_busy();
  public:
  void unsafe_arena_set_allocated_scanner_busy(
      ::blickfeld::protocol::Error_ScannerBusy* scanner_busy);
  ::blickfeld::protocol::Error_ScannerBusy* unsafe_arena_release_scanner_busy();

  // .blickfeld.protocol.Error.WrongOperationMode wrong_operation_mode = 14;
  bool has_wrong_operation_mode() const;
  private:
  bool _internal_has_wrong_operation_mode() const;
  public:
  void clear_wrong_operation_mode();
  const ::blickfeld::protocol::Error_WrongOperationMode& wrong_operation_mode() const;
  ::blickfeld::protocol::Error_WrongOperationMode* release_wrong_operation_mode();
  ::blickfeld::protocol::Error_WrongOperationMode* mutable_wrong_operation_mode();
  void set_allocated_wrong_operation_mode(::blickfeld::protocol::Error_WrongOperationMode* wrong_operation_mode);
  private:
  const ::blickfeld::protocol::Error_WrongOperationMode& _internal_wrong_operation_mode() const;
  ::blickfeld::protocol::Error_WrongOperationMode* _internal_mutable_wrong_operation_mode();
  public:
  void unsafe_arena_set_allocated_wrong_operation_mode(
      ::blickfeld::protocol::Error_WrongOperationMode* wrong_operation_mode);
  ::blickfeld::protocol::Error_WrongOperationMode* unsafe_arena_release_wrong_operation_mode();

  // .blickfeld.protocol.Error.NotAllowed not_allowed = 15;
  bool has_not_allowed() const;
  private:
  bool _internal_has_not_allowed() const;
  public:
  void clear_not_allowed();
  const ::blickfeld::protocol::Error_NotAllowed& not_allowed() const;
  ::blickfeld::protocol::Error_NotAllowed* release_not_allowed();
  ::blickfeld::protocol::Error_NotAllowed* mutable_not_allowed();
  void set_allocated_not_allowed(::blickfeld::protocol::Error_NotAllowed* not_allowed);
  private:
  const ::blickfeld::protocol::Error_NotAllowed& _internal_not_allowed() const;
  ::blickfeld::protocol::Error_NotAllowed* _internal_mutable_not_allowed();
  public:
  void unsafe_arena_set_allocated_not_allowed(
      ::blickfeld::protocol::Error_NotAllowed* not_allowed);
  ::blickfeld::protocol::Error_NotAllowed* unsafe_arena_release_not_allowed();

  // .blickfeld.protocol.Error.HardwareError hardware_error = 16;
  bool has_hardware_error() const;
  private:
  bool _internal_has_hardware_error() const;
  public:
  void clear_hardware_error();
  const ::blickfeld::protocol::Error_HardwareError& hardware_error() const;
  ::blickfeld::protocol::Error_HardwareError* release_hardware_error();
  ::blickfeld::protocol::Error_HardwareError* mutable_hardware_error();
  void set_allocated_hardware_error(::blickfeld::protocol::Error_HardwareError* hardware_error);
  private:
  const ::blickfeld::protocol::Error_HardwareError& _internal_hardware_error() const;
  ::blickfeld::protocol::Error_HardwareError* _internal_mutable_hardware_error();
  public:
  void unsafe_arena_set_allocated_hardware_error(
      ::blickfeld::protocol::Error_HardwareError* hardware_error);
  ::blickfeld::protocol::Error_HardwareError* unsafe_arena_release_hardware_error();

  // .blickfeld.protocol.Error.SystemStop system_stop = 17;
  bool has_system_stop() const;
  private:
  bool _internal_has_system_stop() const;
  public:
  void clear_system_stop();
  const ::blickfeld::protocol::Error_SystemStop& system_stop() const;
  ::blickfeld::protocol::Error_SystemStop* release_system_stop();
  ::blickfeld::protocol::Error_SystemStop* mutable_system_stop();
  void set_allocated_system_stop(::blickfeld::protocol::Error_SystemStop* system_stop);
  private:
  const ::blickfeld::protocol::Error_SystemStop& _internal_system_stop() const;
  ::blickfeld::protocol::Error_SystemStop* _internal_mutable_system_stop();
  public:
  void unsafe_arena_set_allocated_system_stop(
      ::blickfeld::protocol::Error_SystemStop* system_stop);
  ::blickfeld::protocol::Error_SystemStop* unsafe_arena_release_system_stop();

  // .blickfeld.protocol.Error.NotFound not_found = 18;
  bool has_not_found() const;
  private:
  bool _internal_has_not_found() const;
  public:
  void clear_not_found();
  const ::blickfeld::protocol::Error_NotFound& not_found() const;
  ::blickfeld::protocol::Error_NotFound* release_not_found();
  ::blickfeld::protocol::Error_NotFound* mutable_not_found();
  void set_allocated_not_found(::blickfeld::protocol::Error_NotFound* not_found);
  private:
  const ::blickfeld::protocol::Error_NotFound& _internal_not_found() const;
  ::blickfeld::protocol::Error_NotFound* _internal_mutable_not_found();
  public:
  void unsafe_arena_set_allocated_not_found(
      ::blickfeld::protocol::Error_NotFound* not_found);
  ::blickfeld::protocol::Error_NotFound* unsafe_arena_release_not_found();

  // .blickfeld.protocol.Error.UnknownErrorCode unknown_error_code = 21;
  bool has_unknown_error_code() const;
  private:
  bool _internal_has_unknown_error_code() const;
  public:
  void clear_unknown_error_code();
  const ::blickfeld::protocol::Error_UnknownErrorCode& unknown_error_code() const;
  ::blickfeld::protocol::Error_UnknownErrorCode* release_unknown_error_code();
  ::blickfeld::protocol::Error_UnknownErrorCode* mutable_unknown_error_code();
  void set_allocated_unknown_error_code(::blickfeld::protocol::Error_UnknownErrorCode* unknown_error_code);
  private:
  const ::blickfeld::protocol::Error_UnknownErrorCode& _internal_unknown_error_code() const;
  ::blickfeld::protocol::Error_UnknownErrorCode* _internal_mutable_unknown_error_code();
  public:
  void unsafe_arena_set_allocated_unknown_error_code(
      ::blickfeld::protocol::Error_UnknownErrorCode* unknown_error_code);
  ::blickfeld::protocol::Error_UnknownErrorCode* unsafe_arena_release_unknown_error_code();

  // .blickfeld.protocol.Error.NotInRange not_in_range = 22;
  bool has_not_in_range() const;
  private:
  bool _internal_has_not_in_range() const;
  public:
  void clear_not_in_range();
  const ::blickfeld::protocol::Error_NotInRange& not_in_range() const;
  ::blickfeld::protocol::Error_NotInRange* release_not_in_range();
  ::blickfeld::protocol::Error_NotInRange* mutable_not_in_range();
  void set_allocated_not_in_range(::blickfeld::protocol::Error_NotInRange* not_in_range);
  private:
  const ::blickfeld::protocol::Error_NotInRange& _internal_not_in_range() const;
  ::blickfeld::protocol::Error_NotInRange* _internal_mutable_not_in_range();
  public:
  void unsafe_arena_set_allocated_not_in_range(
      ::blickfeld::protocol::Error_NotInRange* not_in_range);
  ::blickfeld::protocol::Error_NotInRange* unsafe_arena_release_not_in_range();

  // .blickfeld.protocol.Error.TimeSyncFailed time_sync_failed = 23;
  bool has_time_sync_failed() const;
  private:
  bool _internal_has_time_sync_failed() const;
  public:
  void clear_time_sync_failed();
  const ::blickfeld::protocol::Error_TimeSyncFailed& time_sync_failed() const;
  ::blickfeld::protocol::Error_TimeSyncFailed* release_time_sync_failed();
  ::blickfeld::protocol::Error_TimeSyncFailed* mutable_time_sync_failed();
  void set_allocated_time_sync_failed(::blickfeld::protocol::Error_TimeSyncFailed* time_sync_failed);
  private:
  const ::blickfeld::protocol::Error_TimeSyncFailed& _internal_time_sync_failed() const;
  ::blickfeld::protocol::Error_TimeSyncFailed* _internal_mutable_time_sync_failed();
  public:
  void unsafe_arena_set_allocated_time_sync_failed(
      ::blickfeld::protocol::Error_TimeSyncFailed* time_sync_failed);
  ::blickfeld::protocol::Error_TimeSyncFailed* unsafe_arena_release_time_sync_failed();

  // .blickfeld.protocol.Error.NoDeviceDiscovered no_device_discovered = 24;
  bool has_no_device_discovered() const;
  private:
  bool _internal_has_no_device_discovered() const;
  public:
  void clear_no_device_discovered();
  const ::blickfeld::protocol::Error_NoDeviceDiscovered& no_device_discovered() const;
  ::blickfeld::protocol::Error_NoDeviceDiscovered* release_no_device_discovered();
  ::blickfeld::protocol::Error_NoDeviceDiscovered* mutable_no_device_discovered();
  void set_allocated_no_device_discovered(::blickfeld::protocol::Error_NoDeviceDiscovered* no_device_discovered);
  private:
  const ::blickfeld::protocol::Error_NoDeviceDiscovered& _internal_no_device_discovered() const;
  ::blickfeld::protocol::Error_NoDeviceDiscovered* _internal_mutable_no_device_discovered();
  public:
  void unsafe_arena_set_allocated_no_device_discovered(
      ::blickfeld::protocol::Error_NoDeviceDiscovered* no_device_discovered);
  ::blickfeld::protocol::Error_NoDeviceDiscovered* unsafe_arena_release_no_device_discovered();

  // .blickfeld.protocol.Error.NotSupported not_supported = 25;
  bool has_not_supported() const;
  private:
  bool _internal_has_not_supported() const;
  public:
  void clear_not_supported();
  const ::blickfeld::protocol::Error_NotSupported& not_supported() const;
  ::blickfeld::protocol::Error_NotSupported* release_not_supported();
  ::blickfeld::protocol::Error_NotSupported* mutable_not_supported();
  void set_allocated_not_supported(::blickfeld::protocol::Error_NotSupported* not_supported);
  private:
  const ::blickfeld::protocol::Error_NotSupported& _internal_not_supported() const;
  ::blickfeld::protocol::Error_NotSupported* _internal_mutable_not_supported();
  public:
  void unsafe_arena_set_allocated_not_supported(
      ::blickfeld::protocol::Error_NotSupported* not_supported);
  ::blickfeld::protocol::Error_NotSupported* unsafe_arena_release_not_supported();

  void clear_error();
  ErrorCase error_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Error)
 private:
  class _Internal;
  void set_has_unknown();
  void set_has_not_implemented();
  void set_has_empty();
  void set_has_server_implementation();
  void set_has_invalid_request();
  void set_has_connection_closed();
  void set_has_outdated_server_protocol();
  void set_has_outdated_client_protocol();
  void set_has_scanner_busy();
  void set_has_wrong_operation_mode();
  void set_has_not_allowed();
  void set_has_hardware_error();
  void set_has_system_stop();
  void set_has_not_found();
  void set_has_unknown_error_code();
  void set_has_not_in_range();
  void set_has_time_sync_failed();
  void set_has_no_device_discovered();
  void set_has_not_supported();

  inline bool has_error() const;
  inline void clear_has_error();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ErrorUnion {
    constexpr ErrorUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::Error_Unknown* unknown_;
    ::blickfeld::protocol::Error_NotImplemented* not_implemented_;
    ::blickfeld::protocol::Error_Empty* empty_;
    ::blickfeld::protocol::Error_ServerImplementation* server_implementation_;
    ::blickfeld::protocol::Error_InvalidRequest* invalid_request_;
    ::blickfeld::protocol::Error_ConnectionClosed* connection_closed_;
    ::blickfeld::protocol::Error_OutdatedServerProtocol* outdated_server_protocol_;
    ::blickfeld::protocol::Error_OutdatedClientProtocol* outdated_client_protocol_;
    ::blickfeld::protocol::Error_ScannerBusy* scanner_busy_;
    ::blickfeld::protocol::Error_WrongOperationMode* wrong_operation_mode_;
    ::blickfeld::protocol::Error_NotAllowed* not_allowed_;
    ::blickfeld::protocol::Error_HardwareError* hardware_error_;
    ::blickfeld::protocol::Error_SystemStop* system_stop_;
    ::blickfeld::protocol::Error_NotFound* not_found_;
    ::blickfeld::protocol::Error_UnknownErrorCode* unknown_error_code_;
    ::blickfeld::protocol::Error_NotInRange* not_in_range_;
    ::blickfeld::protocol::Error_TimeSyncFailed* time_sync_failed_;
    ::blickfeld::protocol::Error_NoDeviceDiscovered* no_device_discovered_;
    ::blickfeld::protocol::Error_NotSupported* not_supported_;
  } error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2ferror_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Error_Unknown

// optional string description = 1;
inline bool Error_Unknown::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Error_Unknown::has_description() const {
  return _internal_has_description();
}
inline void Error_Unknown::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Error_Unknown::description() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.Unknown.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Error_Unknown::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.Unknown.description)
}
inline std::string* Error_Unknown::mutable_description() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.Unknown.description)
  return _internal_mutable_description();
}
inline const std::string& Error_Unknown::_internal_description() const {
  return description_.Get();
}
inline void Error_Unknown::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Error_Unknown::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Error_Unknown::release_description() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.Unknown.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Error_Unknown::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Error.Unknown.description)
}

// -------------------------------------------------------------------

// Error_NotImplemented

// optional string reason = 1 [default = "No detailed reason available."];
inline bool Error_NotImplemented::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Error_NotImplemented::has_reason() const {
  return _internal_has_reason();
}
inline void Error_NotImplemented::clear_reason() {
  reason_.ClearToDefault(::blickfeld::protocol::Error_NotImplemented::_i_give_permission_to_break_this_code_default_reason_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Error_NotImplemented::reason() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.NotImplemented.reason)
  if (reason_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_reason_.get();
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Error_NotImplemented::set_reason(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.NotImplemented.reason)
}
inline std::string* Error_NotImplemented::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.NotImplemented.reason)
  return _internal_mutable_reason();
}
inline const std::string& Error_NotImplemented::_internal_reason() const {
  return reason_.Get();
}
inline void Error_NotImplemented::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline std::string* Error_NotImplemented::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::blickfeld::protocol::Error_NotImplemented::_i_give_permission_to_break_this_code_default_reason_, GetArena());
}
inline std::string* Error_NotImplemented::release_reason() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.NotImplemented.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(nullptr, GetArena());
}
inline void Error_NotImplemented::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(nullptr, reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Error.NotImplemented.reason)
}

// -------------------------------------------------------------------

// Error_Empty

// -------------------------------------------------------------------

// Error_ServerImplementation

// -------------------------------------------------------------------

// Error_InvalidRequest

// optional string validation_error = 1;
inline bool Error_InvalidRequest::_internal_has_validation_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Error_InvalidRequest::has_validation_error() const {
  return _internal_has_validation_error();
}
inline void Error_InvalidRequest::clear_validation_error() {
  validation_error_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Error_InvalidRequest::validation_error() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.InvalidRequest.validation_error)
  return _internal_validation_error();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Error_InvalidRequest::set_validation_error(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 validation_error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.InvalidRequest.validation_error)
}
inline std::string* Error_InvalidRequest::mutable_validation_error() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.InvalidRequest.validation_error)
  return _internal_mutable_validation_error();
}
inline const std::string& Error_InvalidRequest::_internal_validation_error() const {
  return validation_error_.Get();
}
inline void Error_InvalidRequest::_internal_set_validation_error(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  validation_error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Error_InvalidRequest::_internal_mutable_validation_error() {
  _has_bits_[0] |= 0x00000001u;
  return validation_error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Error_InvalidRequest::release_validation_error() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.InvalidRequest.validation_error)
  if (!_internal_has_validation_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return validation_error_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Error_InvalidRequest::set_allocated_validation_error(std::string* validation_error) {
  if (validation_error != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  validation_error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validation_error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Error.InvalidRequest.validation_error)
}

// repeated .blickfeld.protocol.Constraint constraints = 2;
inline int Error_InvalidRequest::_internal_constraints_size() const {
  return constraints_.size();
}
inline int Error_InvalidRequest::constraints_size() const {
  return _internal_constraints_size();
}
inline ::blickfeld::protocol::Constraint* Error_InvalidRequest::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.InvalidRequest.constraints)
  return constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >*
Error_InvalidRequest::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.Error.InvalidRequest.constraints)
  return &constraints_;
}
inline const ::blickfeld::protocol::Constraint& Error_InvalidRequest::_internal_constraints(int index) const {
  return constraints_.Get(index);
}
inline const ::blickfeld::protocol::Constraint& Error_InvalidRequest::constraints(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.InvalidRequest.constraints)
  return _internal_constraints(index);
}
inline ::blickfeld::protocol::Constraint* Error_InvalidRequest::_internal_add_constraints() {
  return constraints_.Add();
}
inline ::blickfeld::protocol::Constraint* Error_InvalidRequest::add_constraints() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.Error.InvalidRequest.constraints)
  return _internal_add_constraints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >&
Error_InvalidRequest::constraints() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.Error.InvalidRequest.constraints)
  return constraints_;
}

// -------------------------------------------------------------------

// Error_ConnectionClosed

// -------------------------------------------------------------------

// Error_OutdatedServerProtocol

// optional uint32 required_version = 1;
inline bool Error_OutdatedServerProtocol::_internal_has_required_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Error_OutdatedServerProtocol::has_required_version() const {
  return _internal_has_required_version();
}
inline void Error_OutdatedServerProtocol::clear_required_version() {
  required_version_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error_OutdatedServerProtocol::_internal_required_version() const {
  return required_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error_OutdatedServerProtocol::required_version() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.OutdatedServerProtocol.required_version)
  return _internal_required_version();
}
inline void Error_OutdatedServerProtocol::_internal_set_required_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  required_version_ = value;
}
inline void Error_OutdatedServerProtocol::set_required_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_required_version(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.OutdatedServerProtocol.required_version)
}

// -------------------------------------------------------------------

// Error_OutdatedClientProtocol

// optional uint32 required_version = 1;
inline bool Error_OutdatedClientProtocol::_internal_has_required_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Error_OutdatedClientProtocol::has_required_version() const {
  return _internal_has_required_version();
}
inline void Error_OutdatedClientProtocol::clear_required_version() {
  required_version_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error_OutdatedClientProtocol::_internal_required_version() const {
  return required_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error_OutdatedClientProtocol::required_version() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.OutdatedClientProtocol.required_version)
  return _internal_required_version();
}
inline void Error_OutdatedClientProtocol::_internal_set_required_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  required_version_ = value;
}
inline void Error_OutdatedClientProtocol::set_required_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_required_version(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.OutdatedClientProtocol.required_version)
}

// -------------------------------------------------------------------

// Error_ScannerBusy

// -------------------------------------------------------------------

// Error_WrongOperationMode

// -------------------------------------------------------------------

// Error_NotAllowed

// -------------------------------------------------------------------

// Error_HardwareError

// -------------------------------------------------------------------

// Error_SystemStop

// -------------------------------------------------------------------

// Error_NotFound

// -------------------------------------------------------------------

// Error_TimeSyncFailed

// optional string ntp_daemon_log = 1;
inline bool Error_TimeSyncFailed::_internal_has_ntp_daemon_log() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Error_TimeSyncFailed::has_ntp_daemon_log() const {
  return _internal_has_ntp_daemon_log();
}
inline void Error_TimeSyncFailed::clear_ntp_daemon_log() {
  ntp_daemon_log_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Error_TimeSyncFailed::ntp_daemon_log() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.TimeSyncFailed.ntp_daemon_log)
  return _internal_ntp_daemon_log();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Error_TimeSyncFailed::set_ntp_daemon_log(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ntp_daemon_log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.TimeSyncFailed.ntp_daemon_log)
}
inline std::string* Error_TimeSyncFailed::mutable_ntp_daemon_log() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.TimeSyncFailed.ntp_daemon_log)
  return _internal_mutable_ntp_daemon_log();
}
inline const std::string& Error_TimeSyncFailed::_internal_ntp_daemon_log() const {
  return ntp_daemon_log_.Get();
}
inline void Error_TimeSyncFailed::_internal_set_ntp_daemon_log(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ntp_daemon_log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Error_TimeSyncFailed::_internal_mutable_ntp_daemon_log() {
  _has_bits_[0] |= 0x00000001u;
  return ntp_daemon_log_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Error_TimeSyncFailed::release_ntp_daemon_log() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.TimeSyncFailed.ntp_daemon_log)
  if (!_internal_has_ntp_daemon_log()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ntp_daemon_log_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Error_TimeSyncFailed::set_allocated_ntp_daemon_log(std::string* ntp_daemon_log) {
  if (ntp_daemon_log != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ntp_daemon_log_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ntp_daemon_log,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Error.TimeSyncFailed.ntp_daemon_log)
}

// -------------------------------------------------------------------

// Error_NoDeviceDiscovered

// -------------------------------------------------------------------

// Error_UnknownErrorCode

// optional uint32 error_code = 1;
inline bool Error_UnknownErrorCode::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Error_UnknownErrorCode::has_error_code() const {
  return _internal_has_error_code();
}
inline void Error_UnknownErrorCode::clear_error_code() {
  error_code_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error_UnknownErrorCode::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error_UnknownErrorCode::error_code() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.UnknownErrorCode.error_code)
  return _internal_error_code();
}
inline void Error_UnknownErrorCode::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  error_code_ = value;
}
inline void Error_UnknownErrorCode::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.UnknownErrorCode.error_code)
}

// -------------------------------------------------------------------

// Error_NotInRange

// optional string parameter = 1;
inline bool Error_NotInRange::_internal_has_parameter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Error_NotInRange::has_parameter() const {
  return _internal_has_parameter();
}
inline void Error_NotInRange::clear_parameter() {
  parameter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Error_NotInRange::parameter() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.NotInRange.parameter)
  return _internal_parameter();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Error_NotInRange::set_parameter(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.NotInRange.parameter)
}
inline std::string* Error_NotInRange::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.NotInRange.parameter)
  return _internal_mutable_parameter();
}
inline const std::string& Error_NotInRange::_internal_parameter() const {
  return parameter_.Get();
}
inline void Error_NotInRange::_internal_set_parameter(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Error_NotInRange::_internal_mutable_parameter() {
  _has_bits_[0] |= 0x00000001u;
  return parameter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Error_NotInRange::release_parameter() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.NotInRange.parameter)
  if (!_internal_has_parameter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return parameter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Error_NotInRange::set_allocated_parameter(std::string* parameter) {
  if (parameter != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parameter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Error.NotInRange.parameter)
}

// optional float minimum = 2;
inline bool Error_NotInRange::_internal_has_minimum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Error_NotInRange::has_minimum() const {
  return _internal_has_minimum();
}
inline void Error_NotInRange::clear_minimum() {
  minimum_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Error_NotInRange::_internal_minimum() const {
  return minimum_;
}
inline float Error_NotInRange::minimum() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.NotInRange.minimum)
  return _internal_minimum();
}
inline void Error_NotInRange::_internal_set_minimum(float value) {
  _has_bits_[0] |= 0x00000004u;
  minimum_ = value;
}
inline void Error_NotInRange::set_minimum(float value) {
  _internal_set_minimum(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.NotInRange.minimum)
}

// optional float maximum = 3;
inline bool Error_NotInRange::_internal_has_maximum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Error_NotInRange::has_maximum() const {
  return _internal_has_maximum();
}
inline void Error_NotInRange::clear_maximum() {
  maximum_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Error_NotInRange::_internal_maximum() const {
  return maximum_;
}
inline float Error_NotInRange::maximum() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.NotInRange.maximum)
  return _internal_maximum();
}
inline void Error_NotInRange::_internal_set_maximum(float value) {
  _has_bits_[0] |= 0x00000008u;
  maximum_ = value;
}
inline void Error_NotInRange::set_maximum(float value) {
  _internal_set_maximum(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.NotInRange.maximum)
}

// optional float requested = 4;
inline bool Error_NotInRange::_internal_has_requested() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Error_NotInRange::has_requested() const {
  return _internal_has_requested();
}
inline void Error_NotInRange::clear_requested() {
  requested_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Error_NotInRange::_internal_requested() const {
  return requested_;
}
inline float Error_NotInRange::requested() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.NotInRange.requested)
  return _internal_requested();
}
inline void Error_NotInRange::_internal_set_requested(float value) {
  _has_bits_[0] |= 0x00000010u;
  requested_ = value;
}
inline void Error_NotInRange::set_requested(float value) {
  _internal_set_requested(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.NotInRange.requested)
}

// optional string unit = 5 [default = ""];
inline bool Error_NotInRange::_internal_has_unit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Error_NotInRange::has_unit() const {
  return _internal_has_unit();
}
inline void Error_NotInRange::clear_unit() {
  unit_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Error_NotInRange::unit() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.NotInRange.unit)
  return _internal_unit();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Error_NotInRange::set_unit(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.NotInRange.unit)
}
inline std::string* Error_NotInRange::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.NotInRange.unit)
  return _internal_mutable_unit();
}
inline const std::string& Error_NotInRange::_internal_unit() const {
  return unit_.Get();
}
inline void Error_NotInRange::_internal_set_unit(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Error_NotInRange::_internal_mutable_unit() {
  _has_bits_[0] |= 0x00000002u;
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Error_NotInRange::release_unit() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.NotInRange.unit)
  if (!_internal_has_unit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return unit_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Error_NotInRange::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Error.NotInRange.unit)
}

// -------------------------------------------------------------------

// Error_NotSupported

// optional string reason = 1 [default = "No detailed reason available."];
inline bool Error_NotSupported::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Error_NotSupported::has_reason() const {
  return _internal_has_reason();
}
inline void Error_NotSupported::clear_reason() {
  reason_.ClearToDefault(::blickfeld::protocol::Error_NotSupported::_i_give_permission_to_break_this_code_default_reason_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Error_NotSupported::reason() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.NotSupported.reason)
  if (reason_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_reason_.get();
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Error_NotSupported::set_reason(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Error.NotSupported.reason)
}
inline std::string* Error_NotSupported::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.NotSupported.reason)
  return _internal_mutable_reason();
}
inline const std::string& Error_NotSupported::_internal_reason() const {
  return reason_.Get();
}
inline void Error_NotSupported::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline std::string* Error_NotSupported::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(::blickfeld::protocol::Error_NotSupported::_i_give_permission_to_break_this_code_default_reason_, GetArena());
}
inline std::string* Error_NotSupported::release_reason() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.NotSupported.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(nullptr, GetArena());
}
inline void Error_NotSupported::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(nullptr, reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Error.NotSupported.reason)
}

// -------------------------------------------------------------------

// Error

// .blickfeld.protocol.Error.Unknown unknown = 1;
inline bool Error::_internal_has_unknown() const {
  return error_case() == kUnknown;
}
inline bool Error::has_unknown() const {
  return _internal_has_unknown();
}
inline void Error::set_has_unknown() {
  _oneof_case_[0] = kUnknown;
}
inline void Error::clear_unknown() {
  if (_internal_has_unknown()) {
    if (GetArena() == nullptr) {
      delete error_.unknown_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_Unknown* Error::release_unknown() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.unknown)
  if (_internal_has_unknown()) {
    clear_has_error();
      ::blickfeld::protocol::Error_Unknown* temp = error_.unknown_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.unknown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_Unknown& Error::_internal_unknown() const {
  return _internal_has_unknown()
      ? *error_.unknown_
      : reinterpret_cast< ::blickfeld::protocol::Error_Unknown&>(::blickfeld::protocol::_Error_Unknown_default_instance_);
}
inline const ::blickfeld::protocol::Error_Unknown& Error::unknown() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.unknown)
  return _internal_unknown();
}
inline ::blickfeld::protocol::Error_Unknown* Error::unsafe_arena_release_unknown() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.unknown)
  if (_internal_has_unknown()) {
    clear_has_error();
    ::blickfeld::protocol::Error_Unknown* temp = error_.unknown_;
    error_.unknown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_unknown(::blickfeld::protocol::Error_Unknown* unknown) {
  clear_error();
  if (unknown) {
    set_has_unknown();
    error_.unknown_ = unknown;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.unknown)
}
inline ::blickfeld::protocol::Error_Unknown* Error::_internal_mutable_unknown() {
  if (!_internal_has_unknown()) {
    clear_error();
    set_has_unknown();
    error_.unknown_ = CreateMaybeMessage< ::blickfeld::protocol::Error_Unknown >(GetArena());
  }
  return error_.unknown_;
}
inline ::blickfeld::protocol::Error_Unknown* Error::mutable_unknown() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.unknown)
  return _internal_mutable_unknown();
}

// .blickfeld.protocol.Error.NotImplemented not_implemented = 2;
inline bool Error::_internal_has_not_implemented() const {
  return error_case() == kNotImplemented;
}
inline bool Error::has_not_implemented() const {
  return _internal_has_not_implemented();
}
inline void Error::set_has_not_implemented() {
  _oneof_case_[0] = kNotImplemented;
}
inline void Error::clear_not_implemented() {
  if (_internal_has_not_implemented()) {
    if (GetArena() == nullptr) {
      delete error_.not_implemented_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_NotImplemented* Error::release_not_implemented() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.not_implemented)
  if (_internal_has_not_implemented()) {
    clear_has_error();
      ::blickfeld::protocol::Error_NotImplemented* temp = error_.not_implemented_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.not_implemented_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_NotImplemented& Error::_internal_not_implemented() const {
  return _internal_has_not_implemented()
      ? *error_.not_implemented_
      : reinterpret_cast< ::blickfeld::protocol::Error_NotImplemented&>(::blickfeld::protocol::_Error_NotImplemented_default_instance_);
}
inline const ::blickfeld::protocol::Error_NotImplemented& Error::not_implemented() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.not_implemented)
  return _internal_not_implemented();
}
inline ::blickfeld::protocol::Error_NotImplemented* Error::unsafe_arena_release_not_implemented() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.not_implemented)
  if (_internal_has_not_implemented()) {
    clear_has_error();
    ::blickfeld::protocol::Error_NotImplemented* temp = error_.not_implemented_;
    error_.not_implemented_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_not_implemented(::blickfeld::protocol::Error_NotImplemented* not_implemented) {
  clear_error();
  if (not_implemented) {
    set_has_not_implemented();
    error_.not_implemented_ = not_implemented;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.not_implemented)
}
inline ::blickfeld::protocol::Error_NotImplemented* Error::_internal_mutable_not_implemented() {
  if (!_internal_has_not_implemented()) {
    clear_error();
    set_has_not_implemented();
    error_.not_implemented_ = CreateMaybeMessage< ::blickfeld::protocol::Error_NotImplemented >(GetArena());
  }
  return error_.not_implemented_;
}
inline ::blickfeld::protocol::Error_NotImplemented* Error::mutable_not_implemented() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.not_implemented)
  return _internal_mutable_not_implemented();
}

// .blickfeld.protocol.Error.Empty empty = 3;
inline bool Error::_internal_has_empty() const {
  return error_case() == kEmpty;
}
inline bool Error::has_empty() const {
  return _internal_has_empty();
}
inline void Error::set_has_empty() {
  _oneof_case_[0] = kEmpty;
}
inline void Error::clear_empty() {
  if (_internal_has_empty()) {
    if (GetArena() == nullptr) {
      delete error_.empty_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_Empty* Error::release_empty() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.empty)
  if (_internal_has_empty()) {
    clear_has_error();
      ::blickfeld::protocol::Error_Empty* temp = error_.empty_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.empty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_Empty& Error::_internal_empty() const {
  return _internal_has_empty()
      ? *error_.empty_
      : reinterpret_cast< ::blickfeld::protocol::Error_Empty&>(::blickfeld::protocol::_Error_Empty_default_instance_);
}
inline const ::blickfeld::protocol::Error_Empty& Error::empty() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.empty)
  return _internal_empty();
}
inline ::blickfeld::protocol::Error_Empty* Error::unsafe_arena_release_empty() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.empty)
  if (_internal_has_empty()) {
    clear_has_error();
    ::blickfeld::protocol::Error_Empty* temp = error_.empty_;
    error_.empty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_empty(::blickfeld::protocol::Error_Empty* empty) {
  clear_error();
  if (empty) {
    set_has_empty();
    error_.empty_ = empty;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.empty)
}
inline ::blickfeld::protocol::Error_Empty* Error::_internal_mutable_empty() {
  if (!_internal_has_empty()) {
    clear_error();
    set_has_empty();
    error_.empty_ = CreateMaybeMessage< ::blickfeld::protocol::Error_Empty >(GetArena());
  }
  return error_.empty_;
}
inline ::blickfeld::protocol::Error_Empty* Error::mutable_empty() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.empty)
  return _internal_mutable_empty();
}

// .blickfeld.protocol.Error.ServerImplementation server_implementation = 4;
inline bool Error::_internal_has_server_implementation() const {
  return error_case() == kServerImplementation;
}
inline bool Error::has_server_implementation() const {
  return _internal_has_server_implementation();
}
inline void Error::set_has_server_implementation() {
  _oneof_case_[0] = kServerImplementation;
}
inline void Error::clear_server_implementation() {
  if (_internal_has_server_implementation()) {
    if (GetArena() == nullptr) {
      delete error_.server_implementation_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_ServerImplementation* Error::release_server_implementation() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.server_implementation)
  if (_internal_has_server_implementation()) {
    clear_has_error();
      ::blickfeld::protocol::Error_ServerImplementation* temp = error_.server_implementation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.server_implementation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_ServerImplementation& Error::_internal_server_implementation() const {
  return _internal_has_server_implementation()
      ? *error_.server_implementation_
      : reinterpret_cast< ::blickfeld::protocol::Error_ServerImplementation&>(::blickfeld::protocol::_Error_ServerImplementation_default_instance_);
}
inline const ::blickfeld::protocol::Error_ServerImplementation& Error::server_implementation() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.server_implementation)
  return _internal_server_implementation();
}
inline ::blickfeld::protocol::Error_ServerImplementation* Error::unsafe_arena_release_server_implementation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.server_implementation)
  if (_internal_has_server_implementation()) {
    clear_has_error();
    ::blickfeld::protocol::Error_ServerImplementation* temp = error_.server_implementation_;
    error_.server_implementation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_server_implementation(::blickfeld::protocol::Error_ServerImplementation* server_implementation) {
  clear_error();
  if (server_implementation) {
    set_has_server_implementation();
    error_.server_implementation_ = server_implementation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.server_implementation)
}
inline ::blickfeld::protocol::Error_ServerImplementation* Error::_internal_mutable_server_implementation() {
  if (!_internal_has_server_implementation()) {
    clear_error();
    set_has_server_implementation();
    error_.server_implementation_ = CreateMaybeMessage< ::blickfeld::protocol::Error_ServerImplementation >(GetArena());
  }
  return error_.server_implementation_;
}
inline ::blickfeld::protocol::Error_ServerImplementation* Error::mutable_server_implementation() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.server_implementation)
  return _internal_mutable_server_implementation();
}

// .blickfeld.protocol.Error.InvalidRequest invalid_request = 5;
inline bool Error::_internal_has_invalid_request() const {
  return error_case() == kInvalidRequest;
}
inline bool Error::has_invalid_request() const {
  return _internal_has_invalid_request();
}
inline void Error::set_has_invalid_request() {
  _oneof_case_[0] = kInvalidRequest;
}
inline void Error::clear_invalid_request() {
  if (_internal_has_invalid_request()) {
    if (GetArena() == nullptr) {
      delete error_.invalid_request_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_InvalidRequest* Error::release_invalid_request() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.invalid_request)
  if (_internal_has_invalid_request()) {
    clear_has_error();
      ::blickfeld::protocol::Error_InvalidRequest* temp = error_.invalid_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.invalid_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_InvalidRequest& Error::_internal_invalid_request() const {
  return _internal_has_invalid_request()
      ? *error_.invalid_request_
      : reinterpret_cast< ::blickfeld::protocol::Error_InvalidRequest&>(::blickfeld::protocol::_Error_InvalidRequest_default_instance_);
}
inline const ::blickfeld::protocol::Error_InvalidRequest& Error::invalid_request() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.invalid_request)
  return _internal_invalid_request();
}
inline ::blickfeld::protocol::Error_InvalidRequest* Error::unsafe_arena_release_invalid_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.invalid_request)
  if (_internal_has_invalid_request()) {
    clear_has_error();
    ::blickfeld::protocol::Error_InvalidRequest* temp = error_.invalid_request_;
    error_.invalid_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_invalid_request(::blickfeld::protocol::Error_InvalidRequest* invalid_request) {
  clear_error();
  if (invalid_request) {
    set_has_invalid_request();
    error_.invalid_request_ = invalid_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.invalid_request)
}
inline ::blickfeld::protocol::Error_InvalidRequest* Error::_internal_mutable_invalid_request() {
  if (!_internal_has_invalid_request()) {
    clear_error();
    set_has_invalid_request();
    error_.invalid_request_ = CreateMaybeMessage< ::blickfeld::protocol::Error_InvalidRequest >(GetArena());
  }
  return error_.invalid_request_;
}
inline ::blickfeld::protocol::Error_InvalidRequest* Error::mutable_invalid_request() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.invalid_request)
  return _internal_mutable_invalid_request();
}

// .blickfeld.protocol.Error.ConnectionClosed connection_closed = 6;
inline bool Error::_internal_has_connection_closed() const {
  return error_case() == kConnectionClosed;
}
inline bool Error::has_connection_closed() const {
  return _internal_has_connection_closed();
}
inline void Error::set_has_connection_closed() {
  _oneof_case_[0] = kConnectionClosed;
}
inline void Error::clear_connection_closed() {
  if (_internal_has_connection_closed()) {
    if (GetArena() == nullptr) {
      delete error_.connection_closed_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_ConnectionClosed* Error::release_connection_closed() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.connection_closed)
  if (_internal_has_connection_closed()) {
    clear_has_error();
      ::blickfeld::protocol::Error_ConnectionClosed* temp = error_.connection_closed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.connection_closed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_ConnectionClosed& Error::_internal_connection_closed() const {
  return _internal_has_connection_closed()
      ? *error_.connection_closed_
      : reinterpret_cast< ::blickfeld::protocol::Error_ConnectionClosed&>(::blickfeld::protocol::_Error_ConnectionClosed_default_instance_);
}
inline const ::blickfeld::protocol::Error_ConnectionClosed& Error::connection_closed() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.connection_closed)
  return _internal_connection_closed();
}
inline ::blickfeld::protocol::Error_ConnectionClosed* Error::unsafe_arena_release_connection_closed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.connection_closed)
  if (_internal_has_connection_closed()) {
    clear_has_error();
    ::blickfeld::protocol::Error_ConnectionClosed* temp = error_.connection_closed_;
    error_.connection_closed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_connection_closed(::blickfeld::protocol::Error_ConnectionClosed* connection_closed) {
  clear_error();
  if (connection_closed) {
    set_has_connection_closed();
    error_.connection_closed_ = connection_closed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.connection_closed)
}
inline ::blickfeld::protocol::Error_ConnectionClosed* Error::_internal_mutable_connection_closed() {
  if (!_internal_has_connection_closed()) {
    clear_error();
    set_has_connection_closed();
    error_.connection_closed_ = CreateMaybeMessage< ::blickfeld::protocol::Error_ConnectionClosed >(GetArena());
  }
  return error_.connection_closed_;
}
inline ::blickfeld::protocol::Error_ConnectionClosed* Error::mutable_connection_closed() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.connection_closed)
  return _internal_mutable_connection_closed();
}

// .blickfeld.protocol.Error.OutdatedServerProtocol outdated_server_protocol = 11;
inline bool Error::_internal_has_outdated_server_protocol() const {
  return error_case() == kOutdatedServerProtocol;
}
inline bool Error::has_outdated_server_protocol() const {
  return _internal_has_outdated_server_protocol();
}
inline void Error::set_has_outdated_server_protocol() {
  _oneof_case_[0] = kOutdatedServerProtocol;
}
inline void Error::clear_outdated_server_protocol() {
  if (_internal_has_outdated_server_protocol()) {
    if (GetArena() == nullptr) {
      delete error_.outdated_server_protocol_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_OutdatedServerProtocol* Error::release_outdated_server_protocol() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.outdated_server_protocol)
  if (_internal_has_outdated_server_protocol()) {
    clear_has_error();
      ::blickfeld::protocol::Error_OutdatedServerProtocol* temp = error_.outdated_server_protocol_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.outdated_server_protocol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_OutdatedServerProtocol& Error::_internal_outdated_server_protocol() const {
  return _internal_has_outdated_server_protocol()
      ? *error_.outdated_server_protocol_
      : reinterpret_cast< ::blickfeld::protocol::Error_OutdatedServerProtocol&>(::blickfeld::protocol::_Error_OutdatedServerProtocol_default_instance_);
}
inline const ::blickfeld::protocol::Error_OutdatedServerProtocol& Error::outdated_server_protocol() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.outdated_server_protocol)
  return _internal_outdated_server_protocol();
}
inline ::blickfeld::protocol::Error_OutdatedServerProtocol* Error::unsafe_arena_release_outdated_server_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.outdated_server_protocol)
  if (_internal_has_outdated_server_protocol()) {
    clear_has_error();
    ::blickfeld::protocol::Error_OutdatedServerProtocol* temp = error_.outdated_server_protocol_;
    error_.outdated_server_protocol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_outdated_server_protocol(::blickfeld::protocol::Error_OutdatedServerProtocol* outdated_server_protocol) {
  clear_error();
  if (outdated_server_protocol) {
    set_has_outdated_server_protocol();
    error_.outdated_server_protocol_ = outdated_server_protocol;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.outdated_server_protocol)
}
inline ::blickfeld::protocol::Error_OutdatedServerProtocol* Error::_internal_mutable_outdated_server_protocol() {
  if (!_internal_has_outdated_server_protocol()) {
    clear_error();
    set_has_outdated_server_protocol();
    error_.outdated_server_protocol_ = CreateMaybeMessage< ::blickfeld::protocol::Error_OutdatedServerProtocol >(GetArena());
  }
  return error_.outdated_server_protocol_;
}
inline ::blickfeld::protocol::Error_OutdatedServerProtocol* Error::mutable_outdated_server_protocol() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.outdated_server_protocol)
  return _internal_mutable_outdated_server_protocol();
}

// .blickfeld.protocol.Error.OutdatedClientProtocol outdated_client_protocol = 12;
inline bool Error::_internal_has_outdated_client_protocol() const {
  return error_case() == kOutdatedClientProtocol;
}
inline bool Error::has_outdated_client_protocol() const {
  return _internal_has_outdated_client_protocol();
}
inline void Error::set_has_outdated_client_protocol() {
  _oneof_case_[0] = kOutdatedClientProtocol;
}
inline void Error::clear_outdated_client_protocol() {
  if (_internal_has_outdated_client_protocol()) {
    if (GetArena() == nullptr) {
      delete error_.outdated_client_protocol_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_OutdatedClientProtocol* Error::release_outdated_client_protocol() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.outdated_client_protocol)
  if (_internal_has_outdated_client_protocol()) {
    clear_has_error();
      ::blickfeld::protocol::Error_OutdatedClientProtocol* temp = error_.outdated_client_protocol_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.outdated_client_protocol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_OutdatedClientProtocol& Error::_internal_outdated_client_protocol() const {
  return _internal_has_outdated_client_protocol()
      ? *error_.outdated_client_protocol_
      : reinterpret_cast< ::blickfeld::protocol::Error_OutdatedClientProtocol&>(::blickfeld::protocol::_Error_OutdatedClientProtocol_default_instance_);
}
inline const ::blickfeld::protocol::Error_OutdatedClientProtocol& Error::outdated_client_protocol() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.outdated_client_protocol)
  return _internal_outdated_client_protocol();
}
inline ::blickfeld::protocol::Error_OutdatedClientProtocol* Error::unsafe_arena_release_outdated_client_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.outdated_client_protocol)
  if (_internal_has_outdated_client_protocol()) {
    clear_has_error();
    ::blickfeld::protocol::Error_OutdatedClientProtocol* temp = error_.outdated_client_protocol_;
    error_.outdated_client_protocol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_outdated_client_protocol(::blickfeld::protocol::Error_OutdatedClientProtocol* outdated_client_protocol) {
  clear_error();
  if (outdated_client_protocol) {
    set_has_outdated_client_protocol();
    error_.outdated_client_protocol_ = outdated_client_protocol;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.outdated_client_protocol)
}
inline ::blickfeld::protocol::Error_OutdatedClientProtocol* Error::_internal_mutable_outdated_client_protocol() {
  if (!_internal_has_outdated_client_protocol()) {
    clear_error();
    set_has_outdated_client_protocol();
    error_.outdated_client_protocol_ = CreateMaybeMessage< ::blickfeld::protocol::Error_OutdatedClientProtocol >(GetArena());
  }
  return error_.outdated_client_protocol_;
}
inline ::blickfeld::protocol::Error_OutdatedClientProtocol* Error::mutable_outdated_client_protocol() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.outdated_client_protocol)
  return _internal_mutable_outdated_client_protocol();
}

// .blickfeld.protocol.Error.ScannerBusy scanner_busy = 13;
inline bool Error::_internal_has_scanner_busy() const {
  return error_case() == kScannerBusy;
}
inline bool Error::has_scanner_busy() const {
  return _internal_has_scanner_busy();
}
inline void Error::set_has_scanner_busy() {
  _oneof_case_[0] = kScannerBusy;
}
inline void Error::clear_scanner_busy() {
  if (_internal_has_scanner_busy()) {
    if (GetArena() == nullptr) {
      delete error_.scanner_busy_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_ScannerBusy* Error::release_scanner_busy() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.scanner_busy)
  if (_internal_has_scanner_busy()) {
    clear_has_error();
      ::blickfeld::protocol::Error_ScannerBusy* temp = error_.scanner_busy_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.scanner_busy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_ScannerBusy& Error::_internal_scanner_busy() const {
  return _internal_has_scanner_busy()
      ? *error_.scanner_busy_
      : reinterpret_cast< ::blickfeld::protocol::Error_ScannerBusy&>(::blickfeld::protocol::_Error_ScannerBusy_default_instance_);
}
inline const ::blickfeld::protocol::Error_ScannerBusy& Error::scanner_busy() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.scanner_busy)
  return _internal_scanner_busy();
}
inline ::blickfeld::protocol::Error_ScannerBusy* Error::unsafe_arena_release_scanner_busy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.scanner_busy)
  if (_internal_has_scanner_busy()) {
    clear_has_error();
    ::blickfeld::protocol::Error_ScannerBusy* temp = error_.scanner_busy_;
    error_.scanner_busy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_scanner_busy(::blickfeld::protocol::Error_ScannerBusy* scanner_busy) {
  clear_error();
  if (scanner_busy) {
    set_has_scanner_busy();
    error_.scanner_busy_ = scanner_busy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.scanner_busy)
}
inline ::blickfeld::protocol::Error_ScannerBusy* Error::_internal_mutable_scanner_busy() {
  if (!_internal_has_scanner_busy()) {
    clear_error();
    set_has_scanner_busy();
    error_.scanner_busy_ = CreateMaybeMessage< ::blickfeld::protocol::Error_ScannerBusy >(GetArena());
  }
  return error_.scanner_busy_;
}
inline ::blickfeld::protocol::Error_ScannerBusy* Error::mutable_scanner_busy() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.scanner_busy)
  return _internal_mutable_scanner_busy();
}

// .blickfeld.protocol.Error.WrongOperationMode wrong_operation_mode = 14;
inline bool Error::_internal_has_wrong_operation_mode() const {
  return error_case() == kWrongOperationMode;
}
inline bool Error::has_wrong_operation_mode() const {
  return _internal_has_wrong_operation_mode();
}
inline void Error::set_has_wrong_operation_mode() {
  _oneof_case_[0] = kWrongOperationMode;
}
inline void Error::clear_wrong_operation_mode() {
  if (_internal_has_wrong_operation_mode()) {
    if (GetArena() == nullptr) {
      delete error_.wrong_operation_mode_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_WrongOperationMode* Error::release_wrong_operation_mode() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.wrong_operation_mode)
  if (_internal_has_wrong_operation_mode()) {
    clear_has_error();
      ::blickfeld::protocol::Error_WrongOperationMode* temp = error_.wrong_operation_mode_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.wrong_operation_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_WrongOperationMode& Error::_internal_wrong_operation_mode() const {
  return _internal_has_wrong_operation_mode()
      ? *error_.wrong_operation_mode_
      : reinterpret_cast< ::blickfeld::protocol::Error_WrongOperationMode&>(::blickfeld::protocol::_Error_WrongOperationMode_default_instance_);
}
inline const ::blickfeld::protocol::Error_WrongOperationMode& Error::wrong_operation_mode() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.wrong_operation_mode)
  return _internal_wrong_operation_mode();
}
inline ::blickfeld::protocol::Error_WrongOperationMode* Error::unsafe_arena_release_wrong_operation_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.wrong_operation_mode)
  if (_internal_has_wrong_operation_mode()) {
    clear_has_error();
    ::blickfeld::protocol::Error_WrongOperationMode* temp = error_.wrong_operation_mode_;
    error_.wrong_operation_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_wrong_operation_mode(::blickfeld::protocol::Error_WrongOperationMode* wrong_operation_mode) {
  clear_error();
  if (wrong_operation_mode) {
    set_has_wrong_operation_mode();
    error_.wrong_operation_mode_ = wrong_operation_mode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.wrong_operation_mode)
}
inline ::blickfeld::protocol::Error_WrongOperationMode* Error::_internal_mutable_wrong_operation_mode() {
  if (!_internal_has_wrong_operation_mode()) {
    clear_error();
    set_has_wrong_operation_mode();
    error_.wrong_operation_mode_ = CreateMaybeMessage< ::blickfeld::protocol::Error_WrongOperationMode >(GetArena());
  }
  return error_.wrong_operation_mode_;
}
inline ::blickfeld::protocol::Error_WrongOperationMode* Error::mutable_wrong_operation_mode() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.wrong_operation_mode)
  return _internal_mutable_wrong_operation_mode();
}

// .blickfeld.protocol.Error.NotAllowed not_allowed = 15;
inline bool Error::_internal_has_not_allowed() const {
  return error_case() == kNotAllowed;
}
inline bool Error::has_not_allowed() const {
  return _internal_has_not_allowed();
}
inline void Error::set_has_not_allowed() {
  _oneof_case_[0] = kNotAllowed;
}
inline void Error::clear_not_allowed() {
  if (_internal_has_not_allowed()) {
    if (GetArena() == nullptr) {
      delete error_.not_allowed_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_NotAllowed* Error::release_not_allowed() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.not_allowed)
  if (_internal_has_not_allowed()) {
    clear_has_error();
      ::blickfeld::protocol::Error_NotAllowed* temp = error_.not_allowed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.not_allowed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_NotAllowed& Error::_internal_not_allowed() const {
  return _internal_has_not_allowed()
      ? *error_.not_allowed_
      : reinterpret_cast< ::blickfeld::protocol::Error_NotAllowed&>(::blickfeld::protocol::_Error_NotAllowed_default_instance_);
}
inline const ::blickfeld::protocol::Error_NotAllowed& Error::not_allowed() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.not_allowed)
  return _internal_not_allowed();
}
inline ::blickfeld::protocol::Error_NotAllowed* Error::unsafe_arena_release_not_allowed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.not_allowed)
  if (_internal_has_not_allowed()) {
    clear_has_error();
    ::blickfeld::protocol::Error_NotAllowed* temp = error_.not_allowed_;
    error_.not_allowed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_not_allowed(::blickfeld::protocol::Error_NotAllowed* not_allowed) {
  clear_error();
  if (not_allowed) {
    set_has_not_allowed();
    error_.not_allowed_ = not_allowed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.not_allowed)
}
inline ::blickfeld::protocol::Error_NotAllowed* Error::_internal_mutable_not_allowed() {
  if (!_internal_has_not_allowed()) {
    clear_error();
    set_has_not_allowed();
    error_.not_allowed_ = CreateMaybeMessage< ::blickfeld::protocol::Error_NotAllowed >(GetArena());
  }
  return error_.not_allowed_;
}
inline ::blickfeld::protocol::Error_NotAllowed* Error::mutable_not_allowed() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.not_allowed)
  return _internal_mutable_not_allowed();
}

// .blickfeld.protocol.Error.HardwareError hardware_error = 16;
inline bool Error::_internal_has_hardware_error() const {
  return error_case() == kHardwareError;
}
inline bool Error::has_hardware_error() const {
  return _internal_has_hardware_error();
}
inline void Error::set_has_hardware_error() {
  _oneof_case_[0] = kHardwareError;
}
inline void Error::clear_hardware_error() {
  if (_internal_has_hardware_error()) {
    if (GetArena() == nullptr) {
      delete error_.hardware_error_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_HardwareError* Error::release_hardware_error() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.hardware_error)
  if (_internal_has_hardware_error()) {
    clear_has_error();
      ::blickfeld::protocol::Error_HardwareError* temp = error_.hardware_error_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.hardware_error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_HardwareError& Error::_internal_hardware_error() const {
  return _internal_has_hardware_error()
      ? *error_.hardware_error_
      : reinterpret_cast< ::blickfeld::protocol::Error_HardwareError&>(::blickfeld::protocol::_Error_HardwareError_default_instance_);
}
inline const ::blickfeld::protocol::Error_HardwareError& Error::hardware_error() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.hardware_error)
  return _internal_hardware_error();
}
inline ::blickfeld::protocol::Error_HardwareError* Error::unsafe_arena_release_hardware_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.hardware_error)
  if (_internal_has_hardware_error()) {
    clear_has_error();
    ::blickfeld::protocol::Error_HardwareError* temp = error_.hardware_error_;
    error_.hardware_error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_hardware_error(::blickfeld::protocol::Error_HardwareError* hardware_error) {
  clear_error();
  if (hardware_error) {
    set_has_hardware_error();
    error_.hardware_error_ = hardware_error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.hardware_error)
}
inline ::blickfeld::protocol::Error_HardwareError* Error::_internal_mutable_hardware_error() {
  if (!_internal_has_hardware_error()) {
    clear_error();
    set_has_hardware_error();
    error_.hardware_error_ = CreateMaybeMessage< ::blickfeld::protocol::Error_HardwareError >(GetArena());
  }
  return error_.hardware_error_;
}
inline ::blickfeld::protocol::Error_HardwareError* Error::mutable_hardware_error() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.hardware_error)
  return _internal_mutable_hardware_error();
}

// .blickfeld.protocol.Error.SystemStop system_stop = 17;
inline bool Error::_internal_has_system_stop() const {
  return error_case() == kSystemStop;
}
inline bool Error::has_system_stop() const {
  return _internal_has_system_stop();
}
inline void Error::set_has_system_stop() {
  _oneof_case_[0] = kSystemStop;
}
inline void Error::clear_system_stop() {
  if (_internal_has_system_stop()) {
    if (GetArena() == nullptr) {
      delete error_.system_stop_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_SystemStop* Error::release_system_stop() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.system_stop)
  if (_internal_has_system_stop()) {
    clear_has_error();
      ::blickfeld::protocol::Error_SystemStop* temp = error_.system_stop_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.system_stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_SystemStop& Error::_internal_system_stop() const {
  return _internal_has_system_stop()
      ? *error_.system_stop_
      : reinterpret_cast< ::blickfeld::protocol::Error_SystemStop&>(::blickfeld::protocol::_Error_SystemStop_default_instance_);
}
inline const ::blickfeld::protocol::Error_SystemStop& Error::system_stop() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.system_stop)
  return _internal_system_stop();
}
inline ::blickfeld::protocol::Error_SystemStop* Error::unsafe_arena_release_system_stop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.system_stop)
  if (_internal_has_system_stop()) {
    clear_has_error();
    ::blickfeld::protocol::Error_SystemStop* temp = error_.system_stop_;
    error_.system_stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_system_stop(::blickfeld::protocol::Error_SystemStop* system_stop) {
  clear_error();
  if (system_stop) {
    set_has_system_stop();
    error_.system_stop_ = system_stop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.system_stop)
}
inline ::blickfeld::protocol::Error_SystemStop* Error::_internal_mutable_system_stop() {
  if (!_internal_has_system_stop()) {
    clear_error();
    set_has_system_stop();
    error_.system_stop_ = CreateMaybeMessage< ::blickfeld::protocol::Error_SystemStop >(GetArena());
  }
  return error_.system_stop_;
}
inline ::blickfeld::protocol::Error_SystemStop* Error::mutable_system_stop() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.system_stop)
  return _internal_mutable_system_stop();
}

// .blickfeld.protocol.Error.NotFound not_found = 18;
inline bool Error::_internal_has_not_found() const {
  return error_case() == kNotFound;
}
inline bool Error::has_not_found() const {
  return _internal_has_not_found();
}
inline void Error::set_has_not_found() {
  _oneof_case_[0] = kNotFound;
}
inline void Error::clear_not_found() {
  if (_internal_has_not_found()) {
    if (GetArena() == nullptr) {
      delete error_.not_found_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_NotFound* Error::release_not_found() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.not_found)
  if (_internal_has_not_found()) {
    clear_has_error();
      ::blickfeld::protocol::Error_NotFound* temp = error_.not_found_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.not_found_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_NotFound& Error::_internal_not_found() const {
  return _internal_has_not_found()
      ? *error_.not_found_
      : reinterpret_cast< ::blickfeld::protocol::Error_NotFound&>(::blickfeld::protocol::_Error_NotFound_default_instance_);
}
inline const ::blickfeld::protocol::Error_NotFound& Error::not_found() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.not_found)
  return _internal_not_found();
}
inline ::blickfeld::protocol::Error_NotFound* Error::unsafe_arena_release_not_found() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.not_found)
  if (_internal_has_not_found()) {
    clear_has_error();
    ::blickfeld::protocol::Error_NotFound* temp = error_.not_found_;
    error_.not_found_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_not_found(::blickfeld::protocol::Error_NotFound* not_found) {
  clear_error();
  if (not_found) {
    set_has_not_found();
    error_.not_found_ = not_found;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.not_found)
}
inline ::blickfeld::protocol::Error_NotFound* Error::_internal_mutable_not_found() {
  if (!_internal_has_not_found()) {
    clear_error();
    set_has_not_found();
    error_.not_found_ = CreateMaybeMessage< ::blickfeld::protocol::Error_NotFound >(GetArena());
  }
  return error_.not_found_;
}
inline ::blickfeld::protocol::Error_NotFound* Error::mutable_not_found() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.not_found)
  return _internal_mutable_not_found();
}

// .blickfeld.protocol.Error.UnknownErrorCode unknown_error_code = 21;
inline bool Error::_internal_has_unknown_error_code() const {
  return error_case() == kUnknownErrorCode;
}
inline bool Error::has_unknown_error_code() const {
  return _internal_has_unknown_error_code();
}
inline void Error::set_has_unknown_error_code() {
  _oneof_case_[0] = kUnknownErrorCode;
}
inline void Error::clear_unknown_error_code() {
  if (_internal_has_unknown_error_code()) {
    if (GetArena() == nullptr) {
      delete error_.unknown_error_code_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_UnknownErrorCode* Error::release_unknown_error_code() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.unknown_error_code)
  if (_internal_has_unknown_error_code()) {
    clear_has_error();
      ::blickfeld::protocol::Error_UnknownErrorCode* temp = error_.unknown_error_code_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.unknown_error_code_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_UnknownErrorCode& Error::_internal_unknown_error_code() const {
  return _internal_has_unknown_error_code()
      ? *error_.unknown_error_code_
      : reinterpret_cast< ::blickfeld::protocol::Error_UnknownErrorCode&>(::blickfeld::protocol::_Error_UnknownErrorCode_default_instance_);
}
inline const ::blickfeld::protocol::Error_UnknownErrorCode& Error::unknown_error_code() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.unknown_error_code)
  return _internal_unknown_error_code();
}
inline ::blickfeld::protocol::Error_UnknownErrorCode* Error::unsafe_arena_release_unknown_error_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.unknown_error_code)
  if (_internal_has_unknown_error_code()) {
    clear_has_error();
    ::blickfeld::protocol::Error_UnknownErrorCode* temp = error_.unknown_error_code_;
    error_.unknown_error_code_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_unknown_error_code(::blickfeld::protocol::Error_UnknownErrorCode* unknown_error_code) {
  clear_error();
  if (unknown_error_code) {
    set_has_unknown_error_code();
    error_.unknown_error_code_ = unknown_error_code;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.unknown_error_code)
}
inline ::blickfeld::protocol::Error_UnknownErrorCode* Error::_internal_mutable_unknown_error_code() {
  if (!_internal_has_unknown_error_code()) {
    clear_error();
    set_has_unknown_error_code();
    error_.unknown_error_code_ = CreateMaybeMessage< ::blickfeld::protocol::Error_UnknownErrorCode >(GetArena());
  }
  return error_.unknown_error_code_;
}
inline ::blickfeld::protocol::Error_UnknownErrorCode* Error::mutable_unknown_error_code() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.unknown_error_code)
  return _internal_mutable_unknown_error_code();
}

// .blickfeld.protocol.Error.NotInRange not_in_range = 22;
inline bool Error::_internal_has_not_in_range() const {
  return error_case() == kNotInRange;
}
inline bool Error::has_not_in_range() const {
  return _internal_has_not_in_range();
}
inline void Error::set_has_not_in_range() {
  _oneof_case_[0] = kNotInRange;
}
inline void Error::clear_not_in_range() {
  if (_internal_has_not_in_range()) {
    if (GetArena() == nullptr) {
      delete error_.not_in_range_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_NotInRange* Error::release_not_in_range() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.not_in_range)
  if (_internal_has_not_in_range()) {
    clear_has_error();
      ::blickfeld::protocol::Error_NotInRange* temp = error_.not_in_range_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.not_in_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_NotInRange& Error::_internal_not_in_range() const {
  return _internal_has_not_in_range()
      ? *error_.not_in_range_
      : reinterpret_cast< ::blickfeld::protocol::Error_NotInRange&>(::blickfeld::protocol::_Error_NotInRange_default_instance_);
}
inline const ::blickfeld::protocol::Error_NotInRange& Error::not_in_range() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.not_in_range)
  return _internal_not_in_range();
}
inline ::blickfeld::protocol::Error_NotInRange* Error::unsafe_arena_release_not_in_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.not_in_range)
  if (_internal_has_not_in_range()) {
    clear_has_error();
    ::blickfeld::protocol::Error_NotInRange* temp = error_.not_in_range_;
    error_.not_in_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_not_in_range(::blickfeld::protocol::Error_NotInRange* not_in_range) {
  clear_error();
  if (not_in_range) {
    set_has_not_in_range();
    error_.not_in_range_ = not_in_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.not_in_range)
}
inline ::blickfeld::protocol::Error_NotInRange* Error::_internal_mutable_not_in_range() {
  if (!_internal_has_not_in_range()) {
    clear_error();
    set_has_not_in_range();
    error_.not_in_range_ = CreateMaybeMessage< ::blickfeld::protocol::Error_NotInRange >(GetArena());
  }
  return error_.not_in_range_;
}
inline ::blickfeld::protocol::Error_NotInRange* Error::mutable_not_in_range() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.not_in_range)
  return _internal_mutable_not_in_range();
}

// .blickfeld.protocol.Error.TimeSyncFailed time_sync_failed = 23;
inline bool Error::_internal_has_time_sync_failed() const {
  return error_case() == kTimeSyncFailed;
}
inline bool Error::has_time_sync_failed() const {
  return _internal_has_time_sync_failed();
}
inline void Error::set_has_time_sync_failed() {
  _oneof_case_[0] = kTimeSyncFailed;
}
inline void Error::clear_time_sync_failed() {
  if (_internal_has_time_sync_failed()) {
    if (GetArena() == nullptr) {
      delete error_.time_sync_failed_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_TimeSyncFailed* Error::release_time_sync_failed() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.time_sync_failed)
  if (_internal_has_time_sync_failed()) {
    clear_has_error();
      ::blickfeld::protocol::Error_TimeSyncFailed* temp = error_.time_sync_failed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.time_sync_failed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_TimeSyncFailed& Error::_internal_time_sync_failed() const {
  return _internal_has_time_sync_failed()
      ? *error_.time_sync_failed_
      : reinterpret_cast< ::blickfeld::protocol::Error_TimeSyncFailed&>(::blickfeld::protocol::_Error_TimeSyncFailed_default_instance_);
}
inline const ::blickfeld::protocol::Error_TimeSyncFailed& Error::time_sync_failed() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.time_sync_failed)
  return _internal_time_sync_failed();
}
inline ::blickfeld::protocol::Error_TimeSyncFailed* Error::unsafe_arena_release_time_sync_failed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.time_sync_failed)
  if (_internal_has_time_sync_failed()) {
    clear_has_error();
    ::blickfeld::protocol::Error_TimeSyncFailed* temp = error_.time_sync_failed_;
    error_.time_sync_failed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_time_sync_failed(::blickfeld::protocol::Error_TimeSyncFailed* time_sync_failed) {
  clear_error();
  if (time_sync_failed) {
    set_has_time_sync_failed();
    error_.time_sync_failed_ = time_sync_failed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.time_sync_failed)
}
inline ::blickfeld::protocol::Error_TimeSyncFailed* Error::_internal_mutable_time_sync_failed() {
  if (!_internal_has_time_sync_failed()) {
    clear_error();
    set_has_time_sync_failed();
    error_.time_sync_failed_ = CreateMaybeMessage< ::blickfeld::protocol::Error_TimeSyncFailed >(GetArena());
  }
  return error_.time_sync_failed_;
}
inline ::blickfeld::protocol::Error_TimeSyncFailed* Error::mutable_time_sync_failed() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.time_sync_failed)
  return _internal_mutable_time_sync_failed();
}

// .blickfeld.protocol.Error.NoDeviceDiscovered no_device_discovered = 24;
inline bool Error::_internal_has_no_device_discovered() const {
  return error_case() == kNoDeviceDiscovered;
}
inline bool Error::has_no_device_discovered() const {
  return _internal_has_no_device_discovered();
}
inline void Error::set_has_no_device_discovered() {
  _oneof_case_[0] = kNoDeviceDiscovered;
}
inline void Error::clear_no_device_discovered() {
  if (_internal_has_no_device_discovered()) {
    if (GetArena() == nullptr) {
      delete error_.no_device_discovered_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_NoDeviceDiscovered* Error::release_no_device_discovered() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.no_device_discovered)
  if (_internal_has_no_device_discovered()) {
    clear_has_error();
      ::blickfeld::protocol::Error_NoDeviceDiscovered* temp = error_.no_device_discovered_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.no_device_discovered_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_NoDeviceDiscovered& Error::_internal_no_device_discovered() const {
  return _internal_has_no_device_discovered()
      ? *error_.no_device_discovered_
      : reinterpret_cast< ::blickfeld::protocol::Error_NoDeviceDiscovered&>(::blickfeld::protocol::_Error_NoDeviceDiscovered_default_instance_);
}
inline const ::blickfeld::protocol::Error_NoDeviceDiscovered& Error::no_device_discovered() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.no_device_discovered)
  return _internal_no_device_discovered();
}
inline ::blickfeld::protocol::Error_NoDeviceDiscovered* Error::unsafe_arena_release_no_device_discovered() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.no_device_discovered)
  if (_internal_has_no_device_discovered()) {
    clear_has_error();
    ::blickfeld::protocol::Error_NoDeviceDiscovered* temp = error_.no_device_discovered_;
    error_.no_device_discovered_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_no_device_discovered(::blickfeld::protocol::Error_NoDeviceDiscovered* no_device_discovered) {
  clear_error();
  if (no_device_discovered) {
    set_has_no_device_discovered();
    error_.no_device_discovered_ = no_device_discovered;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.no_device_discovered)
}
inline ::blickfeld::protocol::Error_NoDeviceDiscovered* Error::_internal_mutable_no_device_discovered() {
  if (!_internal_has_no_device_discovered()) {
    clear_error();
    set_has_no_device_discovered();
    error_.no_device_discovered_ = CreateMaybeMessage< ::blickfeld::protocol::Error_NoDeviceDiscovered >(GetArena());
  }
  return error_.no_device_discovered_;
}
inline ::blickfeld::protocol::Error_NoDeviceDiscovered* Error::mutable_no_device_discovered() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.no_device_discovered)
  return _internal_mutable_no_device_discovered();
}

// .blickfeld.protocol.Error.NotSupported not_supported = 25;
inline bool Error::_internal_has_not_supported() const {
  return error_case() == kNotSupported;
}
inline bool Error::has_not_supported() const {
  return _internal_has_not_supported();
}
inline void Error::set_has_not_supported() {
  _oneof_case_[0] = kNotSupported;
}
inline void Error::clear_not_supported() {
  if (_internal_has_not_supported()) {
    if (GetArena() == nullptr) {
      delete error_.not_supported_;
    }
    clear_has_error();
  }
}
inline ::blickfeld::protocol::Error_NotSupported* Error::release_not_supported() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Error.not_supported)
  if (_internal_has_not_supported()) {
    clear_has_error();
      ::blickfeld::protocol::Error_NotSupported* temp = error_.not_supported_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    error_.not_supported_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error_NotSupported& Error::_internal_not_supported() const {
  return _internal_has_not_supported()
      ? *error_.not_supported_
      : reinterpret_cast< ::blickfeld::protocol::Error_NotSupported&>(::blickfeld::protocol::_Error_NotSupported_default_instance_);
}
inline const ::blickfeld::protocol::Error_NotSupported& Error::not_supported() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Error.not_supported)
  return _internal_not_supported();
}
inline ::blickfeld::protocol::Error_NotSupported* Error::unsafe_arena_release_not_supported() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Error.not_supported)
  if (_internal_has_not_supported()) {
    clear_has_error();
    ::blickfeld::protocol::Error_NotSupported* temp = error_.not_supported_;
    error_.not_supported_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error::unsafe_arena_set_allocated_not_supported(::blickfeld::protocol::Error_NotSupported* not_supported) {
  clear_error();
  if (not_supported) {
    set_has_not_supported();
    error_.not_supported_ = not_supported;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Error.not_supported)
}
inline ::blickfeld::protocol::Error_NotSupported* Error::_internal_mutable_not_supported() {
  if (!_internal_has_not_supported()) {
    clear_error();
    set_has_not_supported();
    error_.not_supported_ = CreateMaybeMessage< ::blickfeld::protocol::Error_NotSupported >(GetArena());
  }
  return error_.not_supported_;
}
inline ::blickfeld::protocol::Error_NotSupported* Error::mutable_not_supported() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Error.not_supported)
  return _internal_mutable_not_supported();
}

inline bool Error::has_error() const {
  return error_case() != ERROR_NOT_SET;
}
inline void Error::clear_has_error() {
  _oneof_case_[0] = ERROR_NOT_SET;
}
inline Error::ErrorCase Error::error_case() const {
  return Error::ErrorCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2ferror_2eproto
