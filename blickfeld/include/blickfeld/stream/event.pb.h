// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/stream/event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstream_2fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstream_2fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/data/point_cloud.pb.h"
#include "blickfeld/data/imu.pb.h"
#include "blickfeld/status/main.pb.h"
#include "blickfeld/stream/connection.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fstream_2fevent_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fstream_2fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fstream_2fevent_2eproto;
namespace blickfeld {
namespace protocol {
namespace stream {
class Event;
struct EventDefaultTypeInternal;
BF_DLLEXPORT extern EventDefaultTypeInternal _Event_default_instance_;
class Event_Developer;
struct Event_DeveloperDefaultTypeInternal;
BF_DLLEXPORT extern Event_DeveloperDefaultTypeInternal _Event_Developer_default_instance_;
class Event_EndOfStream;
struct Event_EndOfStreamDefaultTypeInternal;
BF_DLLEXPORT extern Event_EndOfStreamDefaultTypeInternal _Event_EndOfStream_default_instance_;
}  // namespace stream
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::stream::Event* Arena::CreateMaybeMessage<::blickfeld::protocol::stream::Event>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::stream::Event_Developer* Arena::CreateMaybeMessage<::blickfeld::protocol::stream::Event_Developer>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::stream::Event_EndOfStream* Arena::CreateMaybeMessage<::blickfeld::protocol::stream::Event_EndOfStream>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace stream {

// ===================================================================

class BF_DLLEXPORT Event_Developer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.stream.Event.Developer) */ {
 public:
  inline Event_Developer() : Event_Developer(nullptr) {}
  ~Event_Developer() override;
  explicit constexpr Event_Developer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event_Developer(const Event_Developer& from);
  Event_Developer(Event_Developer&& from) noexcept
    : Event_Developer() {
    *this = ::std::move(from);
  }

  inline Event_Developer& operator=(const Event_Developer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_Developer& operator=(Event_Developer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event_Developer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event_Developer* internal_default_instance() {
    return reinterpret_cast<const Event_Developer*>(
               &_Event_Developer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event_Developer& a, Event_Developer& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_Developer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_Developer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_Developer* New() const final {
    return CreateMaybeMessage<Event_Developer>(nullptr);
  }

  Event_Developer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_Developer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_Developer& from);
  void MergeFrom(const Event_Developer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_Developer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.stream.Event.Developer";
  }
  protected:
  explicit Event_Developer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Event_Developer)
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.stream.Event.Developer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fstream_2fevent_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Event_EndOfStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.stream.Event.EndOfStream) */ {
 public:
  inline Event_EndOfStream() : Event_EndOfStream(nullptr) {}
  ~Event_EndOfStream() override;
  explicit constexpr Event_EndOfStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event_EndOfStream(const Event_EndOfStream& from);
  Event_EndOfStream(Event_EndOfStream&& from) noexcept
    : Event_EndOfStream() {
    *this = ::std::move(from);
  }

  inline Event_EndOfStream& operator=(const Event_EndOfStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_EndOfStream& operator=(Event_EndOfStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event_EndOfStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event_EndOfStream* internal_default_instance() {
    return reinterpret_cast<const Event_EndOfStream*>(
               &_Event_EndOfStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Event_EndOfStream& a, Event_EndOfStream& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_EndOfStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_EndOfStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_EndOfStream* New() const final {
    return CreateMaybeMessage<Event_EndOfStream>(nullptr);
  }

  Event_EndOfStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_EndOfStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_EndOfStream& from);
  void MergeFrom(const Event_EndOfStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_EndOfStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.stream.Event.EndOfStream";
  }
  protected:
  explicit Event_EndOfStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 1,
  };
  // optional .blickfeld.protocol.stream.Subscribe subscription = 1;
  bool has_subscription() const;
  private:
  bool _internal_has_subscription() const;
  public:
  void clear_subscription();
  const ::blickfeld::protocol::stream::Subscribe& subscription() const;
  ::blickfeld::protocol::stream::Subscribe* release_subscription();
  ::blickfeld::protocol::stream::Subscribe* mutable_subscription();
  void set_allocated_subscription(::blickfeld::protocol::stream::Subscribe* subscription);
  private:
  const ::blickfeld::protocol::stream::Subscribe& _internal_subscription() const;
  ::blickfeld::protocol::stream::Subscribe* _internal_mutable_subscription();
  public:
  void unsafe_arena_set_allocated_subscription(
      ::blickfeld::protocol::stream::Subscribe* subscription);
  ::blickfeld::protocol::stream::Subscribe* unsafe_arena_release_subscription();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.stream.Event.EndOfStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::stream::Subscribe* subscription_;
  friend struct ::TableStruct_blickfeld_2fstream_2fevent_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.stream.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit constexpr Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kPointCloud = 11,
    kStatus = 12,
    kDeveloper = 13,
    kRawFile = 14,
    kEndOfStream = 15,
    kImu = 16,
    DATA_NOT_SET = 0,
  };

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.stream.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Event_Developer Developer;
  typedef Event_EndOfStream EndOfStream;

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 11,
    kStatusFieldNumber = 12,
    kDeveloperFieldNumber = 13,
    kRawFileFieldNumber = 14,
    kEndOfStreamFieldNumber = 15,
    kImuFieldNumber = 16,
  };
  // .blickfeld.protocol.data.PointCloud point_cloud = 11;
  bool has_point_cloud() const;
  private:
  bool _internal_has_point_cloud() const;
  public:
  void clear_point_cloud();
  const ::blickfeld::protocol::data::PointCloud& point_cloud() const;
  ::blickfeld::protocol::data::PointCloud* release_point_cloud();
  ::blickfeld::protocol::data::PointCloud* mutable_point_cloud();
  void set_allocated_point_cloud(::blickfeld::protocol::data::PointCloud* point_cloud);
  private:
  const ::blickfeld::protocol::data::PointCloud& _internal_point_cloud() const;
  ::blickfeld::protocol::data::PointCloud* _internal_mutable_point_cloud();
  public:
  void unsafe_arena_set_allocated_point_cloud(
      ::blickfeld::protocol::data::PointCloud* point_cloud);
  ::blickfeld::protocol::data::PointCloud* unsafe_arena_release_point_cloud();

  // .blickfeld.protocol.Status status = 12;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::blickfeld::protocol::Status& status() const;
  ::blickfeld::protocol::Status* release_status();
  ::blickfeld::protocol::Status* mutable_status();
  void set_allocated_status(::blickfeld::protocol::Status* status);
  private:
  const ::blickfeld::protocol::Status& _internal_status() const;
  ::blickfeld::protocol::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::blickfeld::protocol::Status* status);
  ::blickfeld::protocol::Status* unsafe_arena_release_status();

  // .blickfeld.protocol.stream.Event.Developer developer = 13;
  bool has_developer() const;
  private:
  bool _internal_has_developer() const;
  public:
  void clear_developer();
  const ::blickfeld::protocol::stream::Event_Developer& developer() const;
  ::blickfeld::protocol::stream::Event_Developer* release_developer();
  ::blickfeld::protocol::stream::Event_Developer* mutable_developer();
  void set_allocated_developer(::blickfeld::protocol::stream::Event_Developer* developer);
  private:
  const ::blickfeld::protocol::stream::Event_Developer& _internal_developer() const;
  ::blickfeld::protocol::stream::Event_Developer* _internal_mutable_developer();
  public:
  void unsafe_arena_set_allocated_developer(
      ::blickfeld::protocol::stream::Event_Developer* developer);
  ::blickfeld::protocol::stream::Event_Developer* unsafe_arena_release_developer();

  // bytes raw_file = 14;
  bool has_raw_file() const;
  private:
  bool _internal_has_raw_file() const;
  public:
  void clear_raw_file();
  const std::string& raw_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_file();
  std::string* release_raw_file();
  void set_allocated_raw_file(std::string* raw_file);
  private:
  const std::string& _internal_raw_file() const;
  void _internal_set_raw_file(const std::string& value);
  std::string* _internal_mutable_raw_file();
  public:

  // .blickfeld.protocol.stream.Event.EndOfStream end_of_stream = 15;
  bool has_end_of_stream() const;
  private:
  bool _internal_has_end_of_stream() const;
  public:
  void clear_end_of_stream();
  const ::blickfeld::protocol::stream::Event_EndOfStream& end_of_stream() const;
  ::blickfeld::protocol::stream::Event_EndOfStream* release_end_of_stream();
  ::blickfeld::protocol::stream::Event_EndOfStream* mutable_end_of_stream();
  void set_allocated_end_of_stream(::blickfeld::protocol::stream::Event_EndOfStream* end_of_stream);
  private:
  const ::blickfeld::protocol::stream::Event_EndOfStream& _internal_end_of_stream() const;
  ::blickfeld::protocol::stream::Event_EndOfStream* _internal_mutable_end_of_stream();
  public:
  void unsafe_arena_set_allocated_end_of_stream(
      ::blickfeld::protocol::stream::Event_EndOfStream* end_of_stream);
  ::blickfeld::protocol::stream::Event_EndOfStream* unsafe_arena_release_end_of_stream();

  // .blickfeld.protocol.data.IMU imu = 16;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::blickfeld::protocol::data::IMU& imu() const;
  ::blickfeld::protocol::data::IMU* release_imu();
  ::blickfeld::protocol::data::IMU* mutable_imu();
  void set_allocated_imu(::blickfeld::protocol::data::IMU* imu);
  private:
  const ::blickfeld::protocol::data::IMU& _internal_imu() const;
  ::blickfeld::protocol::data::IMU* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::blickfeld::protocol::data::IMU* imu);
  ::blickfeld::protocol::data::IMU* unsafe_arena_release_imu();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.stream.Event)
 private:
  class _Internal;
  void set_has_point_cloud();
  void set_has_status();
  void set_has_developer();
  void set_has_raw_file();
  void set_has_end_of_stream();
  void set_has_imu();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::data::PointCloud* point_cloud_;
    ::blickfeld::protocol::Status* status_;
    ::blickfeld::protocol::stream::Event_Developer* developer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_file_;
    ::blickfeld::protocol::stream::Event_EndOfStream* end_of_stream_;
    ::blickfeld::protocol::data::IMU* imu_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fstream_2fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event_Developer

// -------------------------------------------------------------------

// Event_EndOfStream

// optional .blickfeld.protocol.stream.Subscribe subscription = 1;
inline bool Event_EndOfStream::_internal_has_subscription() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || subscription_ != nullptr);
  return value;
}
inline bool Event_EndOfStream::has_subscription() const {
  return _internal_has_subscription();
}
inline const ::blickfeld::protocol::stream::Subscribe& Event_EndOfStream::_internal_subscription() const {
  const ::blickfeld::protocol::stream::Subscribe* p = subscription_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::stream::Subscribe&>(
      ::blickfeld::protocol::stream::_Subscribe_default_instance_);
}
inline const ::blickfeld::protocol::stream::Subscribe& Event_EndOfStream::subscription() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Event.EndOfStream.subscription)
  return _internal_subscription();
}
inline void Event_EndOfStream::unsafe_arena_set_allocated_subscription(
    ::blickfeld::protocol::stream::Subscribe* subscription) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subscription_);
  }
  subscription_ = subscription;
  if (subscription) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Event.EndOfStream.subscription)
}
inline ::blickfeld::protocol::stream::Subscribe* Event_EndOfStream::release_subscription() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::stream::Subscribe* temp = subscription_;
  subscription_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::stream::Subscribe* Event_EndOfStream::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Event.EndOfStream.subscription)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::stream::Subscribe* temp = subscription_;
  subscription_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::stream::Subscribe* Event_EndOfStream::_internal_mutable_subscription() {
  _has_bits_[0] |= 0x00000001u;
  if (subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::stream::Subscribe>(GetArena());
    subscription_ = p;
  }
  return subscription_;
}
inline ::blickfeld::protocol::stream::Subscribe* Event_EndOfStream::mutable_subscription() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Event.EndOfStream.subscription)
  return _internal_mutable_subscription();
}
inline void Event_EndOfStream::set_allocated_subscription(::blickfeld::protocol::stream::Subscribe* subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subscription_);
  }
  if (subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subscription)->GetArena();
    if (message_arena != submessage_arena) {
      subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subscription_ = subscription;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.stream.Event.EndOfStream.subscription)
}

// -------------------------------------------------------------------

// Event

// .blickfeld.protocol.data.PointCloud point_cloud = 11;
inline bool Event::_internal_has_point_cloud() const {
  return data_case() == kPointCloud;
}
inline bool Event::has_point_cloud() const {
  return _internal_has_point_cloud();
}
inline void Event::set_has_point_cloud() {
  _oneof_case_[0] = kPointCloud;
}
inline ::blickfeld::protocol::data::PointCloud* Event::release_point_cloud() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Event.point_cloud)
  if (_internal_has_point_cloud()) {
    clear_has_data();
      ::blickfeld::protocol::data::PointCloud* temp = data_.point_cloud_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.point_cloud_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::data::PointCloud& Event::_internal_point_cloud() const {
  return _internal_has_point_cloud()
      ? *data_.point_cloud_
      : reinterpret_cast< ::blickfeld::protocol::data::PointCloud&>(::blickfeld::protocol::data::_PointCloud_default_instance_);
}
inline const ::blickfeld::protocol::data::PointCloud& Event::point_cloud() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Event.point_cloud)
  return _internal_point_cloud();
}
inline ::blickfeld::protocol::data::PointCloud* Event::unsafe_arena_release_point_cloud() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.stream.Event.point_cloud)
  if (_internal_has_point_cloud()) {
    clear_has_data();
    ::blickfeld::protocol::data::PointCloud* temp = data_.point_cloud_;
    data_.point_cloud_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_point_cloud(::blickfeld::protocol::data::PointCloud* point_cloud) {
  clear_data();
  if (point_cloud) {
    set_has_point_cloud();
    data_.point_cloud_ = point_cloud;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Event.point_cloud)
}
inline ::blickfeld::protocol::data::PointCloud* Event::_internal_mutable_point_cloud() {
  if (!_internal_has_point_cloud()) {
    clear_data();
    set_has_point_cloud();
    data_.point_cloud_ = CreateMaybeMessage< ::blickfeld::protocol::data::PointCloud >(GetArena());
  }
  return data_.point_cloud_;
}
inline ::blickfeld::protocol::data::PointCloud* Event::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Event.point_cloud)
  return _internal_mutable_point_cloud();
}

// .blickfeld.protocol.Status status = 12;
inline bool Event::_internal_has_status() const {
  return data_case() == kStatus;
}
inline bool Event::has_status() const {
  return _internal_has_status();
}
inline void Event::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline ::blickfeld::protocol::Status* Event::release_status() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Event.status)
  if (_internal_has_status()) {
    clear_has_data();
      ::blickfeld::protocol::Status* temp = data_.status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Status& Event::_internal_status() const {
  return _internal_has_status()
      ? *data_.status_
      : reinterpret_cast< ::blickfeld::protocol::Status&>(::blickfeld::protocol::_Status_default_instance_);
}
inline const ::blickfeld::protocol::Status& Event::status() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Event.status)
  return _internal_status();
}
inline ::blickfeld::protocol::Status* Event::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.stream.Event.status)
  if (_internal_has_status()) {
    clear_has_data();
    ::blickfeld::protocol::Status* temp = data_.status_;
    data_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_status(::blickfeld::protocol::Status* status) {
  clear_data();
  if (status) {
    set_has_status();
    data_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Event.status)
}
inline ::blickfeld::protocol::Status* Event::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_data();
    set_has_status();
    data_.status_ = CreateMaybeMessage< ::blickfeld::protocol::Status >(GetArena());
  }
  return data_.status_;
}
inline ::blickfeld::protocol::Status* Event::mutable_status() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Event.status)
  return _internal_mutable_status();
}

// .blickfeld.protocol.stream.Event.Developer developer = 13;
inline bool Event::_internal_has_developer() const {
  return data_case() == kDeveloper;
}
inline bool Event::has_developer() const {
  return _internal_has_developer();
}
inline void Event::set_has_developer() {
  _oneof_case_[0] = kDeveloper;
}
inline void Event::clear_developer() {
  if (_internal_has_developer()) {
    if (GetArena() == nullptr) {
      delete data_.developer_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::stream::Event_Developer* Event::release_developer() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Event.developer)
  if (_internal_has_developer()) {
    clear_has_data();
      ::blickfeld::protocol::stream::Event_Developer* temp = data_.developer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.developer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::stream::Event_Developer& Event::_internal_developer() const {
  return _internal_has_developer()
      ? *data_.developer_
      : reinterpret_cast< ::blickfeld::protocol::stream::Event_Developer&>(::blickfeld::protocol::stream::_Event_Developer_default_instance_);
}
inline const ::blickfeld::protocol::stream::Event_Developer& Event::developer() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Event.developer)
  return _internal_developer();
}
inline ::blickfeld::protocol::stream::Event_Developer* Event::unsafe_arena_release_developer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.stream.Event.developer)
  if (_internal_has_developer()) {
    clear_has_data();
    ::blickfeld::protocol::stream::Event_Developer* temp = data_.developer_;
    data_.developer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_developer(::blickfeld::protocol::stream::Event_Developer* developer) {
  clear_data();
  if (developer) {
    set_has_developer();
    data_.developer_ = developer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Event.developer)
}
inline ::blickfeld::protocol::stream::Event_Developer* Event::_internal_mutable_developer() {
  if (!_internal_has_developer()) {
    clear_data();
    set_has_developer();
    data_.developer_ = CreateMaybeMessage< ::blickfeld::protocol::stream::Event_Developer >(GetArena());
  }
  return data_.developer_;
}
inline ::blickfeld::protocol::stream::Event_Developer* Event::mutable_developer() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Event.developer)
  return _internal_mutable_developer();
}

// bytes raw_file = 14;
inline bool Event::_internal_has_raw_file() const {
  return data_case() == kRawFile;
}
inline bool Event::has_raw_file() const {
  return _internal_has_raw_file();
}
inline void Event::set_has_raw_file() {
  _oneof_case_[0] = kRawFile;
}
inline void Event::clear_raw_file() {
  if (_internal_has_raw_file()) {
    data_.raw_file_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& Event::raw_file() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Event.raw_file)
  return _internal_raw_file();
}
template <typename ArgT0, typename... ArgT>
inline void Event::set_raw_file(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_raw_file()) {
    clear_data();
    set_has_raw_file();
    data_.raw_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_file_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.stream.Event.raw_file)
}
inline std::string* Event::mutable_raw_file() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Event.raw_file)
  return _internal_mutable_raw_file();
}
inline const std::string& Event::_internal_raw_file() const {
  if (_internal_has_raw_file()) {
    return data_.raw_file_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Event::_internal_set_raw_file(const std::string& value) {
  if (!_internal_has_raw_file()) {
    clear_data();
    set_has_raw_file();
    data_.raw_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Event::_internal_mutable_raw_file() {
  if (!_internal_has_raw_file()) {
    clear_data();
    set_has_raw_file();
    data_.raw_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.raw_file_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Event::release_raw_file() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Event.raw_file)
  if (_internal_has_raw_file()) {
    clear_has_data();
    return data_.raw_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Event::set_allocated_raw_file(std::string* raw_file) {
  if (has_data()) {
    clear_data();
  }
  if (raw_file != nullptr) {
    set_has_raw_file();
    data_.raw_file_.UnsafeSetDefault(raw_file);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(raw_file);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.stream.Event.raw_file)
}

// .blickfeld.protocol.stream.Event.EndOfStream end_of_stream = 15;
inline bool Event::_internal_has_end_of_stream() const {
  return data_case() == kEndOfStream;
}
inline bool Event::has_end_of_stream() const {
  return _internal_has_end_of_stream();
}
inline void Event::set_has_end_of_stream() {
  _oneof_case_[0] = kEndOfStream;
}
inline void Event::clear_end_of_stream() {
  if (_internal_has_end_of_stream()) {
    if (GetArena() == nullptr) {
      delete data_.end_of_stream_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::stream::Event_EndOfStream* Event::release_end_of_stream() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Event.end_of_stream)
  if (_internal_has_end_of_stream()) {
    clear_has_data();
      ::blickfeld::protocol::stream::Event_EndOfStream* temp = data_.end_of_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.end_of_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::stream::Event_EndOfStream& Event::_internal_end_of_stream() const {
  return _internal_has_end_of_stream()
      ? *data_.end_of_stream_
      : reinterpret_cast< ::blickfeld::protocol::stream::Event_EndOfStream&>(::blickfeld::protocol::stream::_Event_EndOfStream_default_instance_);
}
inline const ::blickfeld::protocol::stream::Event_EndOfStream& Event::end_of_stream() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Event.end_of_stream)
  return _internal_end_of_stream();
}
inline ::blickfeld::protocol::stream::Event_EndOfStream* Event::unsafe_arena_release_end_of_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.stream.Event.end_of_stream)
  if (_internal_has_end_of_stream()) {
    clear_has_data();
    ::blickfeld::protocol::stream::Event_EndOfStream* temp = data_.end_of_stream_;
    data_.end_of_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_end_of_stream(::blickfeld::protocol::stream::Event_EndOfStream* end_of_stream) {
  clear_data();
  if (end_of_stream) {
    set_has_end_of_stream();
    data_.end_of_stream_ = end_of_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Event.end_of_stream)
}
inline ::blickfeld::protocol::stream::Event_EndOfStream* Event::_internal_mutable_end_of_stream() {
  if (!_internal_has_end_of_stream()) {
    clear_data();
    set_has_end_of_stream();
    data_.end_of_stream_ = CreateMaybeMessage< ::blickfeld::protocol::stream::Event_EndOfStream >(GetArena());
  }
  return data_.end_of_stream_;
}
inline ::blickfeld::protocol::stream::Event_EndOfStream* Event::mutable_end_of_stream() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Event.end_of_stream)
  return _internal_mutable_end_of_stream();
}

// .blickfeld.protocol.data.IMU imu = 16;
inline bool Event::_internal_has_imu() const {
  return data_case() == kImu;
}
inline bool Event::has_imu() const {
  return _internal_has_imu();
}
inline void Event::set_has_imu() {
  _oneof_case_[0] = kImu;
}
inline ::blickfeld::protocol::data::IMU* Event::release_imu() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Event.imu)
  if (_internal_has_imu()) {
    clear_has_data();
      ::blickfeld::protocol::data::IMU* temp = data_.imu_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.imu_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::data::IMU& Event::_internal_imu() const {
  return _internal_has_imu()
      ? *data_.imu_
      : reinterpret_cast< ::blickfeld::protocol::data::IMU&>(::blickfeld::protocol::data::_IMU_default_instance_);
}
inline const ::blickfeld::protocol::data::IMU& Event::imu() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Event.imu)
  return _internal_imu();
}
inline ::blickfeld::protocol::data::IMU* Event::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.stream.Event.imu)
  if (_internal_has_imu()) {
    clear_has_data();
    ::blickfeld::protocol::data::IMU* temp = data_.imu_;
    data_.imu_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_imu(::blickfeld::protocol::data::IMU* imu) {
  clear_data();
  if (imu) {
    set_has_imu();
    data_.imu_ = imu;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Event.imu)
}
inline ::blickfeld::protocol::data::IMU* Event::_internal_mutable_imu() {
  if (!_internal_has_imu()) {
    clear_data();
    set_has_imu();
    data_.imu_ = CreateMaybeMessage< ::blickfeld::protocol::data::IMU >(GetArena());
  }
  return data_.imu_;
}
inline ::blickfeld::protocol::data::IMU* Event::mutable_imu() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Event.imu)
  return _internal_mutable_imu();
}

inline bool Event::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Event::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Event::DataCase Event::data_case() const {
  return Event::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream
}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstream_2fevent_2eproto
