// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/stream/connection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstream_2fconnection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstream_2fconnection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/config/algorithm.pb.h"
#include "blickfeld/data/frame.pb.h"
#include "blickfeld/config/scan_pattern.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fstream_2fconnection_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fstream_2fconnection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fstream_2fconnection_2eproto;
namespace blickfeld {
namespace protocol {
namespace stream {
class Subscribe;
struct SubscribeDefaultTypeInternal;
BF_DLLEXPORT extern SubscribeDefaultTypeInternal _Subscribe_default_instance_;
class Subscribe_Developer;
struct Subscribe_DeveloperDefaultTypeInternal;
BF_DLLEXPORT extern Subscribe_DeveloperDefaultTypeInternal _Subscribe_Developer_default_instance_;
class Subscribe_IMU;
struct Subscribe_IMUDefaultTypeInternal;
BF_DLLEXPORT extern Subscribe_IMUDefaultTypeInternal _Subscribe_IMU_default_instance_;
class Subscribe_PointCloud;
struct Subscribe_PointCloudDefaultTypeInternal;
BF_DLLEXPORT extern Subscribe_PointCloudDefaultTypeInternal _Subscribe_PointCloud_default_instance_;
class Subscribe_RawFile;
struct Subscribe_RawFileDefaultTypeInternal;
BF_DLLEXPORT extern Subscribe_RawFileDefaultTypeInternal _Subscribe_RawFile_default_instance_;
class Subscribe_Status;
struct Subscribe_StatusDefaultTypeInternal;
BF_DLLEXPORT extern Subscribe_StatusDefaultTypeInternal _Subscribe_Status_default_instance_;
}  // namespace stream
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::stream::Subscribe* Arena::CreateMaybeMessage<::blickfeld::protocol::stream::Subscribe>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::stream::Subscribe_Developer* Arena::CreateMaybeMessage<::blickfeld::protocol::stream::Subscribe_Developer>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::stream::Subscribe_IMU* Arena::CreateMaybeMessage<::blickfeld::protocol::stream::Subscribe_IMU>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::stream::Subscribe_PointCloud* Arena::CreateMaybeMessage<::blickfeld::protocol::stream::Subscribe_PointCloud>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::stream::Subscribe_RawFile* Arena::CreateMaybeMessage<::blickfeld::protocol::stream::Subscribe_RawFile>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::stream::Subscribe_Status* Arena::CreateMaybeMessage<::blickfeld::protocol::stream::Subscribe_Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {
namespace stream {

// ===================================================================

class BF_DLLEXPORT Subscribe_PointCloud PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.stream.Subscribe.PointCloud) */ {
 public:
  inline Subscribe_PointCloud() : Subscribe_PointCloud(nullptr) {}
  ~Subscribe_PointCloud() override;
  explicit constexpr Subscribe_PointCloud(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subscribe_PointCloud(const Subscribe_PointCloud& from);
  Subscribe_PointCloud(Subscribe_PointCloud&& from) noexcept
    : Subscribe_PointCloud() {
    *this = ::std::move(from);
  }

  inline Subscribe_PointCloud& operator=(const Subscribe_PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscribe_PointCloud& operator=(Subscribe_PointCloud&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscribe_PointCloud& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subscribe_PointCloud* internal_default_instance() {
    return reinterpret_cast<const Subscribe_PointCloud*>(
               &_Subscribe_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Subscribe_PointCloud& a, Subscribe_PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscribe_PointCloud* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscribe_PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subscribe_PointCloud* New() const final {
    return CreateMaybeMessage<Subscribe_PointCloud>(nullptr);
  }

  Subscribe_PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subscribe_PointCloud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subscribe_PointCloud& from);
  void MergeFrom(const Subscribe_PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscribe_PointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.stream.Subscribe.PointCloud";
  }
  protected:
  explicit Subscribe_PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmsFieldNumber = 3,
    kReferenceFrameFieldNumber = 1,
    kFilterFieldNumber = 2,
    kPrependAdvancedConfigAlgorithmsFieldNumber = 4,
  };
  // repeated .blickfeld.protocol.config.Algorithm algorithms = 3;
  int algorithms_size() const;
  private:
  int _internal_algorithms_size() const;
  public:
  void clear_algorithms();
  ::blickfeld::protocol::config::Algorithm* mutable_algorithms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::Algorithm >*
      mutable_algorithms();
  private:
  const ::blickfeld::protocol::config::Algorithm& _internal_algorithms(int index) const;
  ::blickfeld::protocol::config::Algorithm* _internal_add_algorithms();
  public:
  const ::blickfeld::protocol::config::Algorithm& algorithms(int index) const;
  ::blickfeld::protocol::config::Algorithm* add_algorithms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::Algorithm >&
      algorithms() const;

  // optional .blickfeld.protocol.data.Frame reference_frame = 1 [(.blickfeld.protocol.optional) = true, (.blickfeld.protocol.allow_sparse) = true];
  bool has_reference_frame() const;
  private:
  bool _internal_has_reference_frame() const;
  public:
  void clear_reference_frame();
  const ::blickfeld::protocol::data::Frame& reference_frame() const;
  ::blickfeld::protocol::data::Frame* release_reference_frame();
  ::blickfeld::protocol::data::Frame* mutable_reference_frame();
  void set_allocated_reference_frame(::blickfeld::protocol::data::Frame* reference_frame);
  private:
  const ::blickfeld::protocol::data::Frame& _internal_reference_frame() const;
  ::blickfeld::protocol::data::Frame* _internal_mutable_reference_frame();
  public:
  void unsafe_arena_set_allocated_reference_frame(
      ::blickfeld::protocol::data::Frame* reference_frame);
  ::blickfeld::protocol::data::Frame* unsafe_arena_release_reference_frame();

  // optional .blickfeld.protocol.config.ScanPattern.Filter filter = 2;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::blickfeld::protocol::config::ScanPattern_Filter& filter() const;
  ::blickfeld::protocol::config::ScanPattern_Filter* release_filter();
  ::blickfeld::protocol::config::ScanPattern_Filter* mutable_filter();
  void set_allocated_filter(::blickfeld::protocol::config::ScanPattern_Filter* filter);
  private:
  const ::blickfeld::protocol::config::ScanPattern_Filter& _internal_filter() const;
  ::blickfeld::protocol::config::ScanPattern_Filter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::blickfeld::protocol::config::ScanPattern_Filter* filter);
  ::blickfeld::protocol::config::ScanPattern_Filter* unsafe_arena_release_filter();

  // optional bool prepend_advanced_config_algorithms = 4 [default = true];
  bool has_prepend_advanced_config_algorithms() const;
  private:
  bool _internal_has_prepend_advanced_config_algorithms() const;
  public:
  void clear_prepend_advanced_config_algorithms();
  bool prepend_advanced_config_algorithms() const;
  void set_prepend_advanced_config_algorithms(bool value);
  private:
  bool _internal_prepend_advanced_config_algorithms() const;
  void _internal_set_prepend_advanced_config_algorithms(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.stream.Subscribe.PointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::Algorithm > algorithms_;
  ::blickfeld::protocol::data::Frame* reference_frame_;
  ::blickfeld::protocol::config::ScanPattern_Filter* filter_;
  bool prepend_advanced_config_algorithms_;
  friend struct ::TableStruct_blickfeld_2fstream_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Subscribe_Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.stream.Subscribe.Status) */ {
 public:
  inline Subscribe_Status() : Subscribe_Status(nullptr) {}
  ~Subscribe_Status() override;
  explicit constexpr Subscribe_Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subscribe_Status(const Subscribe_Status& from);
  Subscribe_Status(Subscribe_Status&& from) noexcept
    : Subscribe_Status() {
    *this = ::std::move(from);
  }

  inline Subscribe_Status& operator=(const Subscribe_Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscribe_Status& operator=(Subscribe_Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscribe_Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subscribe_Status* internal_default_instance() {
    return reinterpret_cast<const Subscribe_Status*>(
               &_Subscribe_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Subscribe_Status& a, Subscribe_Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscribe_Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscribe_Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subscribe_Status* New() const final {
    return CreateMaybeMessage<Subscribe_Status>(nullptr);
  }

  Subscribe_Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subscribe_Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subscribe_Status& from);
  void MergeFrom(const Subscribe_Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscribe_Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.stream.Subscribe.Status";
  }
  protected:
  explicit Subscribe_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.stream.Subscribe.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fstream_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Subscribe_RawFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.stream.Subscribe.RawFile) */ {
 public:
  inline Subscribe_RawFile() : Subscribe_RawFile(nullptr) {}
  ~Subscribe_RawFile() override;
  explicit constexpr Subscribe_RawFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subscribe_RawFile(const Subscribe_RawFile& from);
  Subscribe_RawFile(Subscribe_RawFile&& from) noexcept
    : Subscribe_RawFile() {
    *this = ::std::move(from);
  }

  inline Subscribe_RawFile& operator=(const Subscribe_RawFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscribe_RawFile& operator=(Subscribe_RawFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscribe_RawFile& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kPointCloud = 1,
    DATA_NOT_SET = 0,
  };

  static inline const Subscribe_RawFile* internal_default_instance() {
    return reinterpret_cast<const Subscribe_RawFile*>(
               &_Subscribe_RawFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Subscribe_RawFile& a, Subscribe_RawFile& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscribe_RawFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscribe_RawFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subscribe_RawFile* New() const final {
    return CreateMaybeMessage<Subscribe_RawFile>(nullptr);
  }

  Subscribe_RawFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subscribe_RawFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subscribe_RawFile& from);
  void MergeFrom(const Subscribe_RawFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscribe_RawFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.stream.Subscribe.RawFile";
  }
  protected:
  explicit Subscribe_RawFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 1,
  };
  // .blickfeld.protocol.stream.Subscribe.PointCloud point_cloud = 1;
  bool has_point_cloud() const;
  private:
  bool _internal_has_point_cloud() const;
  public:
  void clear_point_cloud();
  const ::blickfeld::protocol::stream::Subscribe_PointCloud& point_cloud() const;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* release_point_cloud();
  ::blickfeld::protocol::stream::Subscribe_PointCloud* mutable_point_cloud();
  void set_allocated_point_cloud(::blickfeld::protocol::stream::Subscribe_PointCloud* point_cloud);
  private:
  const ::blickfeld::protocol::stream::Subscribe_PointCloud& _internal_point_cloud() const;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* _internal_mutable_point_cloud();
  public:
  void unsafe_arena_set_allocated_point_cloud(
      ::blickfeld::protocol::stream::Subscribe_PointCloud* point_cloud);
  ::blickfeld::protocol::stream::Subscribe_PointCloud* unsafe_arena_release_point_cloud();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.stream.Subscribe.RawFile)
 private:
  class _Internal;
  void set_has_point_cloud();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::stream::Subscribe_PointCloud* point_cloud_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fstream_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Subscribe_IMU PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.stream.Subscribe.IMU) */ {
 public:
  inline Subscribe_IMU() : Subscribe_IMU(nullptr) {}
  ~Subscribe_IMU() override;
  explicit constexpr Subscribe_IMU(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subscribe_IMU(const Subscribe_IMU& from);
  Subscribe_IMU(Subscribe_IMU&& from) noexcept
    : Subscribe_IMU() {
    *this = ::std::move(from);
  }

  inline Subscribe_IMU& operator=(const Subscribe_IMU& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscribe_IMU& operator=(Subscribe_IMU&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscribe_IMU& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subscribe_IMU* internal_default_instance() {
    return reinterpret_cast<const Subscribe_IMU*>(
               &_Subscribe_IMU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Subscribe_IMU& a, Subscribe_IMU& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscribe_IMU* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscribe_IMU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subscribe_IMU* New() const final {
    return CreateMaybeMessage<Subscribe_IMU>(nullptr);
  }

  Subscribe_IMU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subscribe_IMU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subscribe_IMU& from);
  void MergeFrom(const Subscribe_IMU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscribe_IMU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.stream.Subscribe.IMU";
  }
  protected:
  explicit Subscribe_IMU(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedFormatFieldNumber = 1,
  };
  // optional bool packed_format = 1 [default = false];
  bool has_packed_format() const;
  private:
  bool _internal_has_packed_format() const;
  public:
  void clear_packed_format();
  bool packed_format() const;
  void set_packed_format(bool value);
  private:
  bool _internal_packed_format() const;
  void _internal_set_packed_format(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.stream.Subscribe.IMU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool packed_format_;
  friend struct ::TableStruct_blickfeld_2fstream_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Subscribe_Developer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.stream.Subscribe.Developer) */ {
 public:
  inline Subscribe_Developer() : Subscribe_Developer(nullptr) {}
  ~Subscribe_Developer() override;
  explicit constexpr Subscribe_Developer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subscribe_Developer(const Subscribe_Developer& from);
  Subscribe_Developer(Subscribe_Developer&& from) noexcept
    : Subscribe_Developer() {
    *this = ::std::move(from);
  }

  inline Subscribe_Developer& operator=(const Subscribe_Developer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscribe_Developer& operator=(Subscribe_Developer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscribe_Developer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subscribe_Developer* internal_default_instance() {
    return reinterpret_cast<const Subscribe_Developer*>(
               &_Subscribe_Developer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Subscribe_Developer& a, Subscribe_Developer& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscribe_Developer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscribe_Developer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subscribe_Developer* New() const final {
    return CreateMaybeMessage<Subscribe_Developer>(nullptr);
  }

  Subscribe_Developer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subscribe_Developer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subscribe_Developer& from);
  void MergeFrom(const Subscribe_Developer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscribe_Developer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.stream.Subscribe.Developer";
  }
  protected:
  explicit Subscribe_Developer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Subscribe_Developer)
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.stream.Subscribe.Developer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fstream_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Subscribe PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.stream.Subscribe) */ {
 public:
  inline Subscribe() : Subscribe(nullptr) {}
  ~Subscribe() override;
  explicit constexpr Subscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subscribe(const Subscribe& from);
  Subscribe(Subscribe&& from) noexcept
    : Subscribe() {
    *this = ::std::move(from);
  }

  inline Subscribe& operator=(const Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscribe& operator=(Subscribe&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscribe& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kPointCloud = 11,
    kStatus = 12,
    kDeveloper = 13,
    kRawFile = 14,
    kImu = 16,
    DATA_NOT_SET = 0,
  };

  static inline const Subscribe* internal_default_instance() {
    return reinterpret_cast<const Subscribe*>(
               &_Subscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Subscribe& a, Subscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscribe* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subscribe* New() const final {
    return CreateMaybeMessage<Subscribe>(nullptr);
  }

  Subscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subscribe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Subscribe& from);
  void MergeFrom(const Subscribe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.stream.Subscribe";
  }
  protected:
  explicit Subscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Subscribe_PointCloud PointCloud;
  typedef Subscribe_Status Status;
  typedef Subscribe_RawFile RawFile;
  typedef Subscribe_IMU IMU;
  typedef Subscribe_Developer Developer;

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 11,
    kStatusFieldNumber = 12,
    kDeveloperFieldNumber = 13,
    kRawFileFieldNumber = 14,
    kImuFieldNumber = 16,
  };
  // .blickfeld.protocol.stream.Subscribe.PointCloud point_cloud = 11;
  bool has_point_cloud() const;
  private:
  bool _internal_has_point_cloud() const;
  public:
  void clear_point_cloud();
  const ::blickfeld::protocol::stream::Subscribe_PointCloud& point_cloud() const;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* release_point_cloud();
  ::blickfeld::protocol::stream::Subscribe_PointCloud* mutable_point_cloud();
  void set_allocated_point_cloud(::blickfeld::protocol::stream::Subscribe_PointCloud* point_cloud);
  private:
  const ::blickfeld::protocol::stream::Subscribe_PointCloud& _internal_point_cloud() const;
  ::blickfeld::protocol::stream::Subscribe_PointCloud* _internal_mutable_point_cloud();
  public:
  void unsafe_arena_set_allocated_point_cloud(
      ::blickfeld::protocol::stream::Subscribe_PointCloud* point_cloud);
  ::blickfeld::protocol::stream::Subscribe_PointCloud* unsafe_arena_release_point_cloud();

  // .blickfeld.protocol.stream.Subscribe.Status status = 12;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::blickfeld::protocol::stream::Subscribe_Status& status() const;
  ::blickfeld::protocol::stream::Subscribe_Status* release_status();
  ::blickfeld::protocol::stream::Subscribe_Status* mutable_status();
  void set_allocated_status(::blickfeld::protocol::stream::Subscribe_Status* status);
  private:
  const ::blickfeld::protocol::stream::Subscribe_Status& _internal_status() const;
  ::blickfeld::protocol::stream::Subscribe_Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::blickfeld::protocol::stream::Subscribe_Status* status);
  ::blickfeld::protocol::stream::Subscribe_Status* unsafe_arena_release_status();

  // .blickfeld.protocol.stream.Subscribe.Developer developer = 13;
  bool has_developer() const;
  private:
  bool _internal_has_developer() const;
  public:
  void clear_developer();
  const ::blickfeld::protocol::stream::Subscribe_Developer& developer() const;
  ::blickfeld::protocol::stream::Subscribe_Developer* release_developer();
  ::blickfeld::protocol::stream::Subscribe_Developer* mutable_developer();
  void set_allocated_developer(::blickfeld::protocol::stream::Subscribe_Developer* developer);
  private:
  const ::blickfeld::protocol::stream::Subscribe_Developer& _internal_developer() const;
  ::blickfeld::protocol::stream::Subscribe_Developer* _internal_mutable_developer();
  public:
  void unsafe_arena_set_allocated_developer(
      ::blickfeld::protocol::stream::Subscribe_Developer* developer);
  ::blickfeld::protocol::stream::Subscribe_Developer* unsafe_arena_release_developer();

  // .blickfeld.protocol.stream.Subscribe.RawFile raw_file = 14;
  bool has_raw_file() const;
  private:
  bool _internal_has_raw_file() const;
  public:
  void clear_raw_file();
  const ::blickfeld::protocol::stream::Subscribe_RawFile& raw_file() const;
  ::blickfeld::protocol::stream::Subscribe_RawFile* release_raw_file();
  ::blickfeld::protocol::stream::Subscribe_RawFile* mutable_raw_file();
  void set_allocated_raw_file(::blickfeld::protocol::stream::Subscribe_RawFile* raw_file);
  private:
  const ::blickfeld::protocol::stream::Subscribe_RawFile& _internal_raw_file() const;
  ::blickfeld::protocol::stream::Subscribe_RawFile* _internal_mutable_raw_file();
  public:
  void unsafe_arena_set_allocated_raw_file(
      ::blickfeld::protocol::stream::Subscribe_RawFile* raw_file);
  ::blickfeld::protocol::stream::Subscribe_RawFile* unsafe_arena_release_raw_file();

  // .blickfeld.protocol.stream.Subscribe.IMU imu = 16;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::blickfeld::protocol::stream::Subscribe_IMU& imu() const;
  ::blickfeld::protocol::stream::Subscribe_IMU* release_imu();
  ::blickfeld::protocol::stream::Subscribe_IMU* mutable_imu();
  void set_allocated_imu(::blickfeld::protocol::stream::Subscribe_IMU* imu);
  private:
  const ::blickfeld::protocol::stream::Subscribe_IMU& _internal_imu() const;
  ::blickfeld::protocol::stream::Subscribe_IMU* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::blickfeld::protocol::stream::Subscribe_IMU* imu);
  ::blickfeld::protocol::stream::Subscribe_IMU* unsafe_arena_release_imu();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.stream.Subscribe)
 private:
  class _Internal;
  void set_has_point_cloud();
  void set_has_status();
  void set_has_developer();
  void set_has_raw_file();
  void set_has_imu();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::stream::Subscribe_PointCloud* point_cloud_;
    ::blickfeld::protocol::stream::Subscribe_Status* status_;
    ::blickfeld::protocol::stream::Subscribe_Developer* developer_;
    ::blickfeld::protocol::stream::Subscribe_RawFile* raw_file_;
    ::blickfeld::protocol::stream::Subscribe_IMU* imu_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fstream_2fconnection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Subscribe_PointCloud

// optional .blickfeld.protocol.data.Frame reference_frame = 1 [(.blickfeld.protocol.optional) = true, (.blickfeld.protocol.allow_sparse) = true];
inline bool Subscribe_PointCloud::_internal_has_reference_frame() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || reference_frame_ != nullptr);
  return value;
}
inline bool Subscribe_PointCloud::has_reference_frame() const {
  return _internal_has_reference_frame();
}
inline const ::blickfeld::protocol::data::Frame& Subscribe_PointCloud::_internal_reference_frame() const {
  const ::blickfeld::protocol::data::Frame* p = reference_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::data::Frame&>(
      ::blickfeld::protocol::data::_Frame_default_instance_);
}
inline const ::blickfeld::protocol::data::Frame& Subscribe_PointCloud::reference_frame() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Subscribe.PointCloud.reference_frame)
  return _internal_reference_frame();
}
inline void Subscribe_PointCloud::unsafe_arena_set_allocated_reference_frame(
    ::blickfeld::protocol::data::Frame* reference_frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_frame_);
  }
  reference_frame_ = reference_frame;
  if (reference_frame) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Subscribe.PointCloud.reference_frame)
}
inline ::blickfeld::protocol::data::Frame* Subscribe_PointCloud::release_reference_frame() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::data::Frame* temp = reference_frame_;
  reference_frame_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::data::Frame* Subscribe_PointCloud::unsafe_arena_release_reference_frame() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Subscribe.PointCloud.reference_frame)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::data::Frame* temp = reference_frame_;
  reference_frame_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::data::Frame* Subscribe_PointCloud::_internal_mutable_reference_frame() {
  _has_bits_[0] |= 0x00000001u;
  if (reference_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::data::Frame>(GetArena());
    reference_frame_ = p;
  }
  return reference_frame_;
}
inline ::blickfeld::protocol::data::Frame* Subscribe_PointCloud::mutable_reference_frame() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Subscribe.PointCloud.reference_frame)
  return _internal_mutable_reference_frame();
}
inline void Subscribe_PointCloud::set_allocated_reference_frame(::blickfeld::protocol::data::Frame* reference_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_frame_);
  }
  if (reference_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_frame)->GetArena();
    if (message_arena != submessage_arena) {
      reference_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reference_frame_ = reference_frame;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.stream.Subscribe.PointCloud.reference_frame)
}

// optional .blickfeld.protocol.config.ScanPattern.Filter filter = 2;
inline bool Subscribe_PointCloud::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || filter_ != nullptr);
  return value;
}
inline bool Subscribe_PointCloud::has_filter() const {
  return _internal_has_filter();
}
inline const ::blickfeld::protocol::config::ScanPattern_Filter& Subscribe_PointCloud::_internal_filter() const {
  const ::blickfeld::protocol::config::ScanPattern_Filter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern_Filter&>(
      ::blickfeld::protocol::config::_ScanPattern_Filter_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern_Filter& Subscribe_PointCloud::filter() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Subscribe.PointCloud.filter)
  return _internal_filter();
}
inline void Subscribe_PointCloud::unsafe_arena_set_allocated_filter(
    ::blickfeld::protocol::config::ScanPattern_Filter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Subscribe.PointCloud.filter)
}
inline ::blickfeld::protocol::config::ScanPattern_Filter* Subscribe_PointCloud::release_filter() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::ScanPattern_Filter* temp = filter_;
  filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Filter* Subscribe_PointCloud::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Subscribe.PointCloud.filter)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::ScanPattern_Filter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern_Filter* Subscribe_PointCloud::_internal_mutable_filter() {
  _has_bits_[0] |= 0x00000002u;
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern_Filter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::blickfeld::protocol::config::ScanPattern_Filter* Subscribe_PointCloud::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Subscribe.PointCloud.filter)
  return _internal_mutable_filter();
}
inline void Subscribe_PointCloud::set_allocated_filter(::blickfeld::protocol::config::ScanPattern_Filter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter)->GetArena();
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.stream.Subscribe.PointCloud.filter)
}

// repeated .blickfeld.protocol.config.Algorithm algorithms = 3;
inline int Subscribe_PointCloud::_internal_algorithms_size() const {
  return algorithms_.size();
}
inline int Subscribe_PointCloud::algorithms_size() const {
  return _internal_algorithms_size();
}
inline ::blickfeld::protocol::config::Algorithm* Subscribe_PointCloud::mutable_algorithms(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Subscribe.PointCloud.algorithms)
  return algorithms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::Algorithm >*
Subscribe_PointCloud::mutable_algorithms() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.stream.Subscribe.PointCloud.algorithms)
  return &algorithms_;
}
inline const ::blickfeld::protocol::config::Algorithm& Subscribe_PointCloud::_internal_algorithms(int index) const {
  return algorithms_.Get(index);
}
inline const ::blickfeld::protocol::config::Algorithm& Subscribe_PointCloud::algorithms(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Subscribe.PointCloud.algorithms)
  return _internal_algorithms(index);
}
inline ::blickfeld::protocol::config::Algorithm* Subscribe_PointCloud::_internal_add_algorithms() {
  return algorithms_.Add();
}
inline ::blickfeld::protocol::config::Algorithm* Subscribe_PointCloud::add_algorithms() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.stream.Subscribe.PointCloud.algorithms)
  return _internal_add_algorithms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::Algorithm >&
Subscribe_PointCloud::algorithms() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.stream.Subscribe.PointCloud.algorithms)
  return algorithms_;
}

// optional bool prepend_advanced_config_algorithms = 4 [default = true];
inline bool Subscribe_PointCloud::_internal_has_prepend_advanced_config_algorithms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Subscribe_PointCloud::has_prepend_advanced_config_algorithms() const {
  return _internal_has_prepend_advanced_config_algorithms();
}
inline void Subscribe_PointCloud::clear_prepend_advanced_config_algorithms() {
  prepend_advanced_config_algorithms_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Subscribe_PointCloud::_internal_prepend_advanced_config_algorithms() const {
  return prepend_advanced_config_algorithms_;
}
inline bool Subscribe_PointCloud::prepend_advanced_config_algorithms() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Subscribe.PointCloud.prepend_advanced_config_algorithms)
  return _internal_prepend_advanced_config_algorithms();
}
inline void Subscribe_PointCloud::_internal_set_prepend_advanced_config_algorithms(bool value) {
  _has_bits_[0] |= 0x00000004u;
  prepend_advanced_config_algorithms_ = value;
}
inline void Subscribe_PointCloud::set_prepend_advanced_config_algorithms(bool value) {
  _internal_set_prepend_advanced_config_algorithms(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.stream.Subscribe.PointCloud.prepend_advanced_config_algorithms)
}

// -------------------------------------------------------------------

// Subscribe_Status

// -------------------------------------------------------------------

// Subscribe_RawFile

// .blickfeld.protocol.stream.Subscribe.PointCloud point_cloud = 1;
inline bool Subscribe_RawFile::_internal_has_point_cloud() const {
  return data_case() == kPointCloud;
}
inline bool Subscribe_RawFile::has_point_cloud() const {
  return _internal_has_point_cloud();
}
inline void Subscribe_RawFile::set_has_point_cloud() {
  _oneof_case_[0] = kPointCloud;
}
inline void Subscribe_RawFile::clear_point_cloud() {
  if (_internal_has_point_cloud()) {
    if (GetArena() == nullptr) {
      delete data_.point_cloud_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Subscribe_RawFile::release_point_cloud() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Subscribe.RawFile.point_cloud)
  if (_internal_has_point_cloud()) {
    clear_has_data();
      ::blickfeld::protocol::stream::Subscribe_PointCloud* temp = data_.point_cloud_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.point_cloud_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::stream::Subscribe_PointCloud& Subscribe_RawFile::_internal_point_cloud() const {
  return _internal_has_point_cloud()
      ? *data_.point_cloud_
      : reinterpret_cast< ::blickfeld::protocol::stream::Subscribe_PointCloud&>(::blickfeld::protocol::stream::_Subscribe_PointCloud_default_instance_);
}
inline const ::blickfeld::protocol::stream::Subscribe_PointCloud& Subscribe_RawFile::point_cloud() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Subscribe.RawFile.point_cloud)
  return _internal_point_cloud();
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Subscribe_RawFile::unsafe_arena_release_point_cloud() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.stream.Subscribe.RawFile.point_cloud)
  if (_internal_has_point_cloud()) {
    clear_has_data();
    ::blickfeld::protocol::stream::Subscribe_PointCloud* temp = data_.point_cloud_;
    data_.point_cloud_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Subscribe_RawFile::unsafe_arena_set_allocated_point_cloud(::blickfeld::protocol::stream::Subscribe_PointCloud* point_cloud) {
  clear_data();
  if (point_cloud) {
    set_has_point_cloud();
    data_.point_cloud_ = point_cloud;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Subscribe.RawFile.point_cloud)
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Subscribe_RawFile::_internal_mutable_point_cloud() {
  if (!_internal_has_point_cloud()) {
    clear_data();
    set_has_point_cloud();
    data_.point_cloud_ = CreateMaybeMessage< ::blickfeld::protocol::stream::Subscribe_PointCloud >(GetArena());
  }
  return data_.point_cloud_;
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Subscribe_RawFile::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Subscribe.RawFile.point_cloud)
  return _internal_mutable_point_cloud();
}

inline bool Subscribe_RawFile::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Subscribe_RawFile::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Subscribe_RawFile::DataCase Subscribe_RawFile::data_case() const {
  return Subscribe_RawFile::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Subscribe_IMU

// optional bool packed_format = 1 [default = false];
inline bool Subscribe_IMU::_internal_has_packed_format() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Subscribe_IMU::has_packed_format() const {
  return _internal_has_packed_format();
}
inline void Subscribe_IMU::clear_packed_format() {
  packed_format_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Subscribe_IMU::_internal_packed_format() const {
  return packed_format_;
}
inline bool Subscribe_IMU::packed_format() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Subscribe.IMU.packed_format)
  return _internal_packed_format();
}
inline void Subscribe_IMU::_internal_set_packed_format(bool value) {
  _has_bits_[0] |= 0x00000001u;
  packed_format_ = value;
}
inline void Subscribe_IMU::set_packed_format(bool value) {
  _internal_set_packed_format(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.stream.Subscribe.IMU.packed_format)
}

// -------------------------------------------------------------------

// Subscribe_Developer

// -------------------------------------------------------------------

// Subscribe

// .blickfeld.protocol.stream.Subscribe.PointCloud point_cloud = 11;
inline bool Subscribe::_internal_has_point_cloud() const {
  return data_case() == kPointCloud;
}
inline bool Subscribe::has_point_cloud() const {
  return _internal_has_point_cloud();
}
inline void Subscribe::set_has_point_cloud() {
  _oneof_case_[0] = kPointCloud;
}
inline void Subscribe::clear_point_cloud() {
  if (_internal_has_point_cloud()) {
    if (GetArena() == nullptr) {
      delete data_.point_cloud_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Subscribe::release_point_cloud() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Subscribe.point_cloud)
  if (_internal_has_point_cloud()) {
    clear_has_data();
      ::blickfeld::protocol::stream::Subscribe_PointCloud* temp = data_.point_cloud_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.point_cloud_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::stream::Subscribe_PointCloud& Subscribe::_internal_point_cloud() const {
  return _internal_has_point_cloud()
      ? *data_.point_cloud_
      : reinterpret_cast< ::blickfeld::protocol::stream::Subscribe_PointCloud&>(::blickfeld::protocol::stream::_Subscribe_PointCloud_default_instance_);
}
inline const ::blickfeld::protocol::stream::Subscribe_PointCloud& Subscribe::point_cloud() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Subscribe.point_cloud)
  return _internal_point_cloud();
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Subscribe::unsafe_arena_release_point_cloud() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.stream.Subscribe.point_cloud)
  if (_internal_has_point_cloud()) {
    clear_has_data();
    ::blickfeld::protocol::stream::Subscribe_PointCloud* temp = data_.point_cloud_;
    data_.point_cloud_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Subscribe::unsafe_arena_set_allocated_point_cloud(::blickfeld::protocol::stream::Subscribe_PointCloud* point_cloud) {
  clear_data();
  if (point_cloud) {
    set_has_point_cloud();
    data_.point_cloud_ = point_cloud;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Subscribe.point_cloud)
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Subscribe::_internal_mutable_point_cloud() {
  if (!_internal_has_point_cloud()) {
    clear_data();
    set_has_point_cloud();
    data_.point_cloud_ = CreateMaybeMessage< ::blickfeld::protocol::stream::Subscribe_PointCloud >(GetArena());
  }
  return data_.point_cloud_;
}
inline ::blickfeld::protocol::stream::Subscribe_PointCloud* Subscribe::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Subscribe.point_cloud)
  return _internal_mutable_point_cloud();
}

// .blickfeld.protocol.stream.Subscribe.Status status = 12;
inline bool Subscribe::_internal_has_status() const {
  return data_case() == kStatus;
}
inline bool Subscribe::has_status() const {
  return _internal_has_status();
}
inline void Subscribe::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline void Subscribe::clear_status() {
  if (_internal_has_status()) {
    if (GetArena() == nullptr) {
      delete data_.status_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::stream::Subscribe_Status* Subscribe::release_status() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Subscribe.status)
  if (_internal_has_status()) {
    clear_has_data();
      ::blickfeld::protocol::stream::Subscribe_Status* temp = data_.status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::stream::Subscribe_Status& Subscribe::_internal_status() const {
  return _internal_has_status()
      ? *data_.status_
      : reinterpret_cast< ::blickfeld::protocol::stream::Subscribe_Status&>(::blickfeld::protocol::stream::_Subscribe_Status_default_instance_);
}
inline const ::blickfeld::protocol::stream::Subscribe_Status& Subscribe::status() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Subscribe.status)
  return _internal_status();
}
inline ::blickfeld::protocol::stream::Subscribe_Status* Subscribe::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.stream.Subscribe.status)
  if (_internal_has_status()) {
    clear_has_data();
    ::blickfeld::protocol::stream::Subscribe_Status* temp = data_.status_;
    data_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Subscribe::unsafe_arena_set_allocated_status(::blickfeld::protocol::stream::Subscribe_Status* status) {
  clear_data();
  if (status) {
    set_has_status();
    data_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Subscribe.status)
}
inline ::blickfeld::protocol::stream::Subscribe_Status* Subscribe::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_data();
    set_has_status();
    data_.status_ = CreateMaybeMessage< ::blickfeld::protocol::stream::Subscribe_Status >(GetArena());
  }
  return data_.status_;
}
inline ::blickfeld::protocol::stream::Subscribe_Status* Subscribe::mutable_status() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Subscribe.status)
  return _internal_mutable_status();
}

// .blickfeld.protocol.stream.Subscribe.Developer developer = 13;
inline bool Subscribe::_internal_has_developer() const {
  return data_case() == kDeveloper;
}
inline bool Subscribe::has_developer() const {
  return _internal_has_developer();
}
inline void Subscribe::set_has_developer() {
  _oneof_case_[0] = kDeveloper;
}
inline void Subscribe::clear_developer() {
  if (_internal_has_developer()) {
    if (GetArena() == nullptr) {
      delete data_.developer_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::stream::Subscribe_Developer* Subscribe::release_developer() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Subscribe.developer)
  if (_internal_has_developer()) {
    clear_has_data();
      ::blickfeld::protocol::stream::Subscribe_Developer* temp = data_.developer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.developer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::stream::Subscribe_Developer& Subscribe::_internal_developer() const {
  return _internal_has_developer()
      ? *data_.developer_
      : reinterpret_cast< ::blickfeld::protocol::stream::Subscribe_Developer&>(::blickfeld::protocol::stream::_Subscribe_Developer_default_instance_);
}
inline const ::blickfeld::protocol::stream::Subscribe_Developer& Subscribe::developer() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Subscribe.developer)
  return _internal_developer();
}
inline ::blickfeld::protocol::stream::Subscribe_Developer* Subscribe::unsafe_arena_release_developer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.stream.Subscribe.developer)
  if (_internal_has_developer()) {
    clear_has_data();
    ::blickfeld::protocol::stream::Subscribe_Developer* temp = data_.developer_;
    data_.developer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Subscribe::unsafe_arena_set_allocated_developer(::blickfeld::protocol::stream::Subscribe_Developer* developer) {
  clear_data();
  if (developer) {
    set_has_developer();
    data_.developer_ = developer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Subscribe.developer)
}
inline ::blickfeld::protocol::stream::Subscribe_Developer* Subscribe::_internal_mutable_developer() {
  if (!_internal_has_developer()) {
    clear_data();
    set_has_developer();
    data_.developer_ = CreateMaybeMessage< ::blickfeld::protocol::stream::Subscribe_Developer >(GetArena());
  }
  return data_.developer_;
}
inline ::blickfeld::protocol::stream::Subscribe_Developer* Subscribe::mutable_developer() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Subscribe.developer)
  return _internal_mutable_developer();
}

// .blickfeld.protocol.stream.Subscribe.RawFile raw_file = 14;
inline bool Subscribe::_internal_has_raw_file() const {
  return data_case() == kRawFile;
}
inline bool Subscribe::has_raw_file() const {
  return _internal_has_raw_file();
}
inline void Subscribe::set_has_raw_file() {
  _oneof_case_[0] = kRawFile;
}
inline void Subscribe::clear_raw_file() {
  if (_internal_has_raw_file()) {
    if (GetArena() == nullptr) {
      delete data_.raw_file_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::stream::Subscribe_RawFile* Subscribe::release_raw_file() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Subscribe.raw_file)
  if (_internal_has_raw_file()) {
    clear_has_data();
      ::blickfeld::protocol::stream::Subscribe_RawFile* temp = data_.raw_file_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.raw_file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::stream::Subscribe_RawFile& Subscribe::_internal_raw_file() const {
  return _internal_has_raw_file()
      ? *data_.raw_file_
      : reinterpret_cast< ::blickfeld::protocol::stream::Subscribe_RawFile&>(::blickfeld::protocol::stream::_Subscribe_RawFile_default_instance_);
}
inline const ::blickfeld::protocol::stream::Subscribe_RawFile& Subscribe::raw_file() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Subscribe.raw_file)
  return _internal_raw_file();
}
inline ::blickfeld::protocol::stream::Subscribe_RawFile* Subscribe::unsafe_arena_release_raw_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.stream.Subscribe.raw_file)
  if (_internal_has_raw_file()) {
    clear_has_data();
    ::blickfeld::protocol::stream::Subscribe_RawFile* temp = data_.raw_file_;
    data_.raw_file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Subscribe::unsafe_arena_set_allocated_raw_file(::blickfeld::protocol::stream::Subscribe_RawFile* raw_file) {
  clear_data();
  if (raw_file) {
    set_has_raw_file();
    data_.raw_file_ = raw_file;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Subscribe.raw_file)
}
inline ::blickfeld::protocol::stream::Subscribe_RawFile* Subscribe::_internal_mutable_raw_file() {
  if (!_internal_has_raw_file()) {
    clear_data();
    set_has_raw_file();
    data_.raw_file_ = CreateMaybeMessage< ::blickfeld::protocol::stream::Subscribe_RawFile >(GetArena());
  }
  return data_.raw_file_;
}
inline ::blickfeld::protocol::stream::Subscribe_RawFile* Subscribe::mutable_raw_file() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Subscribe.raw_file)
  return _internal_mutable_raw_file();
}

// .blickfeld.protocol.stream.Subscribe.IMU imu = 16;
inline bool Subscribe::_internal_has_imu() const {
  return data_case() == kImu;
}
inline bool Subscribe::has_imu() const {
  return _internal_has_imu();
}
inline void Subscribe::set_has_imu() {
  _oneof_case_[0] = kImu;
}
inline void Subscribe::clear_imu() {
  if (_internal_has_imu()) {
    if (GetArena() == nullptr) {
      delete data_.imu_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::stream::Subscribe_IMU* Subscribe::release_imu() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.stream.Subscribe.imu)
  if (_internal_has_imu()) {
    clear_has_data();
      ::blickfeld::protocol::stream::Subscribe_IMU* temp = data_.imu_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.imu_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::stream::Subscribe_IMU& Subscribe::_internal_imu() const {
  return _internal_has_imu()
      ? *data_.imu_
      : reinterpret_cast< ::blickfeld::protocol::stream::Subscribe_IMU&>(::blickfeld::protocol::stream::_Subscribe_IMU_default_instance_);
}
inline const ::blickfeld::protocol::stream::Subscribe_IMU& Subscribe::imu() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.stream.Subscribe.imu)
  return _internal_imu();
}
inline ::blickfeld::protocol::stream::Subscribe_IMU* Subscribe::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.stream.Subscribe.imu)
  if (_internal_has_imu()) {
    clear_has_data();
    ::blickfeld::protocol::stream::Subscribe_IMU* temp = data_.imu_;
    data_.imu_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Subscribe::unsafe_arena_set_allocated_imu(::blickfeld::protocol::stream::Subscribe_IMU* imu) {
  clear_data();
  if (imu) {
    set_has_imu();
    data_.imu_ = imu;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.stream.Subscribe.imu)
}
inline ::blickfeld::protocol::stream::Subscribe_IMU* Subscribe::_internal_mutable_imu() {
  if (!_internal_has_imu()) {
    clear_data();
    set_has_imu();
    data_.imu_ = CreateMaybeMessage< ::blickfeld::protocol::stream::Subscribe_IMU >(GetArena());
  }
  return data_.imu_;
}
inline ::blickfeld::protocol::stream::Subscribe_IMU* Subscribe::mutable_imu() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.stream.Subscribe.imu)
  return _internal_mutable_imu();
}

inline bool Subscribe::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Subscribe::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Subscribe::DataCase Subscribe::data_case() const {
  return Subscribe::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream
}  // namespace protocol
}  // namespace blickfeld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fstream_2fconnection_2eproto
