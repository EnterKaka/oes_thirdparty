// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blickfeld/connection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconnection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconnection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "blickfeld/options.pb.h"
#include "blickfeld/error.pb.h"
#include "blickfeld/common.pb.h"
#include "blickfeld/config/advanced.pb.h"
#include "blickfeld/config/product.pb.h"
#include "blickfeld/config/scan_pattern.pb.h"
#include "blickfeld/status/main.pb.h"
#include "blickfeld/stream/connection.pb.h"
#include "blickfeld/stream/event.pb.h"
#include "blickfeld/config/named_scan_pattern.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blickfeld_2fconnection_2eproto BF_DLLEXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct BF_DLLEXPORT TableStruct_blickfeld_2fconnection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[34]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blickfeld_2fconnection_2eproto;
namespace blickfeld {
namespace protocol {
class Request;
struct RequestDefaultTypeInternal;
BF_DLLEXPORT extern RequestDefaultTypeInternal _Request_default_instance_;
class Request_AttemptErrorRecovery;
struct Request_AttemptErrorRecoveryDefaultTypeInternal;
BF_DLLEXPORT extern Request_AttemptErrorRecoveryDefaultTypeInternal _Request_AttemptErrorRecovery_default_instance_;
class Request_DeleteNamedScanPattern;
struct Request_DeleteNamedScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern Request_DeleteNamedScanPatternDefaultTypeInternal _Request_DeleteNamedScanPattern_default_instance_;
class Request_Developer;
struct Request_DeveloperDefaultTypeInternal;
BF_DLLEXPORT extern Request_DeveloperDefaultTypeInternal _Request_Developer_default_instance_;
class Request_FillScanPattern;
struct Request_FillScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern Request_FillScanPatternDefaultTypeInternal _Request_FillScanPattern_default_instance_;
class Request_GetAdvancedConfig;
struct Request_GetAdvancedConfigDefaultTypeInternal;
BF_DLLEXPORT extern Request_GetAdvancedConfigDefaultTypeInternal _Request_GetAdvancedConfig_default_instance_;
class Request_GetNamedScanPatterns;
struct Request_GetNamedScanPatternsDefaultTypeInternal;
BF_DLLEXPORT extern Request_GetNamedScanPatternsDefaultTypeInternal _Request_GetNamedScanPatterns_default_instance_;
class Request_GetScanPattern;
struct Request_GetScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern Request_GetScanPatternDefaultTypeInternal _Request_GetScanPattern_default_instance_;
class Request_GetScanPatternConstraints;
struct Request_GetScanPatternConstraintsDefaultTypeInternal;
BF_DLLEXPORT extern Request_GetScanPatternConstraintsDefaultTypeInternal _Request_GetScanPatternConstraints_default_instance_;
class Request_Hello;
struct Request_HelloDefaultTypeInternal;
BF_DLLEXPORT extern Request_HelloDefaultTypeInternal _Request_Hello_default_instance_;
class Request_ProxyHello;
struct Request_ProxyHelloDefaultTypeInternal;
BF_DLLEXPORT extern Request_ProxyHelloDefaultTypeInternal _Request_ProxyHello_default_instance_;
class Request_RunSelfTest;
struct Request_RunSelfTestDefaultTypeInternal;
BF_DLLEXPORT extern Request_RunSelfTestDefaultTypeInternal _Request_RunSelfTest_default_instance_;
class Request_SetAdvancedConfig;
struct Request_SetAdvancedConfigDefaultTypeInternal;
BF_DLLEXPORT extern Request_SetAdvancedConfigDefaultTypeInternal _Request_SetAdvancedConfig_default_instance_;
class Request_SetScanPattern;
struct Request_SetScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern Request_SetScanPatternDefaultTypeInternal _Request_SetScanPattern_default_instance_;
class Request_Status;
struct Request_StatusDefaultTypeInternal;
BF_DLLEXPORT extern Request_StatusDefaultTypeInternal _Request_Status_default_instance_;
class Request_StoreNamedScanPattern;
struct Request_StoreNamedScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern Request_StoreNamedScanPatternDefaultTypeInternal _Request_StoreNamedScanPattern_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
BF_DLLEXPORT extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_AttemptErrorRecovery;
struct Response_AttemptErrorRecoveryDefaultTypeInternal;
BF_DLLEXPORT extern Response_AttemptErrorRecoveryDefaultTypeInternal _Response_AttemptErrorRecovery_default_instance_;
class Response_DeleteNamedScanPattern;
struct Response_DeleteNamedScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern Response_DeleteNamedScanPatternDefaultTypeInternal _Response_DeleteNamedScanPattern_default_instance_;
class Response_Developer;
struct Response_DeveloperDefaultTypeInternal;
BF_DLLEXPORT extern Response_DeveloperDefaultTypeInternal _Response_Developer_default_instance_;
class Response_FillScanPattern;
struct Response_FillScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern Response_FillScanPatternDefaultTypeInternal _Response_FillScanPattern_default_instance_;
class Response_GetAdvancedConfig;
struct Response_GetAdvancedConfigDefaultTypeInternal;
BF_DLLEXPORT extern Response_GetAdvancedConfigDefaultTypeInternal _Response_GetAdvancedConfig_default_instance_;
class Response_GetNamedScanPatterns;
struct Response_GetNamedScanPatternsDefaultTypeInternal;
BF_DLLEXPORT extern Response_GetNamedScanPatternsDefaultTypeInternal _Response_GetNamedScanPatterns_default_instance_;
class Response_GetScanPattern;
struct Response_GetScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern Response_GetScanPatternDefaultTypeInternal _Response_GetScanPattern_default_instance_;
class Response_GetScanPatternConstraints;
struct Response_GetScanPatternConstraintsDefaultTypeInternal;
BF_DLLEXPORT extern Response_GetScanPatternConstraintsDefaultTypeInternal _Response_GetScanPatternConstraints_default_instance_;
class Response_Hello;
struct Response_HelloDefaultTypeInternal;
BF_DLLEXPORT extern Response_HelloDefaultTypeInternal _Response_Hello_default_instance_;
class Response_Hello_Firmware;
struct Response_Hello_FirmwareDefaultTypeInternal;
BF_DLLEXPORT extern Response_Hello_FirmwareDefaultTypeInternal _Response_Hello_Firmware_default_instance_;
class Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse;
struct Response_Hello_Firmware_ModuleVersionsEntry_DoNotUseDefaultTypeInternal;
BF_DLLEXPORT extern Response_Hello_Firmware_ModuleVersionsEntry_DoNotUseDefaultTypeInternal _Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse_default_instance_;
class Response_Hello_HardwareModulesEntry_DoNotUse;
struct Response_Hello_HardwareModulesEntry_DoNotUseDefaultTypeInternal;
BF_DLLEXPORT extern Response_Hello_HardwareModulesEntry_DoNotUseDefaultTypeInternal _Response_Hello_HardwareModulesEntry_DoNotUse_default_instance_;
class Response_ProxyHello;
struct Response_ProxyHelloDefaultTypeInternal;
BF_DLLEXPORT extern Response_ProxyHelloDefaultTypeInternal _Response_ProxyHello_default_instance_;
class Response_RunSelfTest;
struct Response_RunSelfTestDefaultTypeInternal;
BF_DLLEXPORT extern Response_RunSelfTestDefaultTypeInternal _Response_RunSelfTest_default_instance_;
class Response_SetAdvancedConfig;
struct Response_SetAdvancedConfigDefaultTypeInternal;
BF_DLLEXPORT extern Response_SetAdvancedConfigDefaultTypeInternal _Response_SetAdvancedConfig_default_instance_;
class Response_SetScanPattern;
struct Response_SetScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern Response_SetScanPatternDefaultTypeInternal _Response_SetScanPattern_default_instance_;
class Response_StoreNamedScanPattern;
struct Response_StoreNamedScanPatternDefaultTypeInternal;
BF_DLLEXPORT extern Response_StoreNamedScanPatternDefaultTypeInternal _Response_StoreNamedScanPattern_default_instance_;
}  // namespace protocol
}  // namespace blickfeld
PROTOBUF_NAMESPACE_OPEN
template<> BF_DLLEXPORT ::blickfeld::protocol::Request* Arena::CreateMaybeMessage<::blickfeld::protocol::Request>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_AttemptErrorRecovery* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_AttemptErrorRecovery>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_DeleteNamedScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_DeleteNamedScanPattern>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_Developer* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_Developer>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_FillScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_FillScanPattern>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_GetAdvancedConfig* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_GetAdvancedConfig>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_GetNamedScanPatterns* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_GetNamedScanPatterns>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_GetScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_GetScanPattern>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_GetScanPatternConstraints* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_GetScanPatternConstraints>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_Hello* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_Hello>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_ProxyHello* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_ProxyHello>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_RunSelfTest* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_RunSelfTest>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_SetAdvancedConfig* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_SetAdvancedConfig>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_SetScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_SetScanPattern>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_Status* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_Status>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Request_StoreNamedScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::Request_StoreNamedScanPattern>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response* Arena::CreateMaybeMessage<::blickfeld::protocol::Response>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_AttemptErrorRecovery* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_AttemptErrorRecovery>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_DeleteNamedScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_DeleteNamedScanPattern>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_Developer* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_Developer>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_FillScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_FillScanPattern>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_GetAdvancedConfig* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_GetAdvancedConfig>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_GetNamedScanPatterns* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_GetNamedScanPatterns>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_GetScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_GetScanPattern>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_GetScanPatternConstraints* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_GetScanPatternConstraints>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_Hello* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_Hello>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_Hello_Firmware* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_Hello_Firmware>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_Hello_HardwareModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_Hello_HardwareModulesEntry_DoNotUse>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_ProxyHello* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_ProxyHello>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_RunSelfTest* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_RunSelfTest>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_SetAdvancedConfig* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_SetAdvancedConfig>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_SetScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_SetScanPattern>(Arena*);
template<> BF_DLLEXPORT ::blickfeld::protocol::Response_StoreNamedScanPattern* Arena::CreateMaybeMessage<::blickfeld::protocol::Response_StoreNamedScanPattern>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blickfeld {
namespace protocol {

enum Format : int {
  PROTOBUF = 1,
  JSON = 2
};
BF_DLLEXPORT bool Format_IsValid(int value);
constexpr Format Format_MIN = PROTOBUF;
constexpr Format Format_MAX = JSON;
constexpr int Format_ARRAYSIZE = Format_MAX + 1;

BF_DLLEXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Format_descriptor();
template<typename T>
inline const std::string& Format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Format_descriptor(), enum_t_value);
}
inline bool Format_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Format>(
    Format_descriptor(), name, value);
}
// ===================================================================

class BF_DLLEXPORT Request_Hello PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.Hello) */ {
 public:
  inline Request_Hello() : Request_Hello(nullptr) {}
  ~Request_Hello() override;
  explicit constexpr Request_Hello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_Hello(const Request_Hello& from);
  Request_Hello(Request_Hello&& from) noexcept
    : Request_Hello() {
    *this = ::std::move(from);
  }

  inline Request_Hello& operator=(const Request_Hello& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_Hello& operator=(Request_Hello&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_Hello& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_Hello* internal_default_instance() {
    return reinterpret_cast<const Request_Hello*>(
               &_Request_Hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request_Hello& a, Request_Hello& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_Hello* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_Hello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_Hello* New() const final {
    return CreateMaybeMessage<Request_Hello>(nullptr);
  }

  Request_Hello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_Hello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_Hello& from);
  void MergeFrom(const Request_Hello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_Hello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.Hello";
  }
  protected:
  explicit Request_Hello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLibraryVersionFieldNumber = 2,
    kProtocolVersionFieldNumber = 1,
    kLanguageFieldNumber = 3,
  };
  // optional string library_version = 2 [(.blickfeld.protocol.regex) = "[0-9]+\\.[0-9]+\\.[0-9]+[[:alnum:]\\.\\+\\-]*", (.blickfeld.protocol.optional) = true];
  bool has_library_version() const;
  private:
  bool _internal_has_library_version() const;
  public:
  void clear_library_version();
  const std::string& library_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_library_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_library_version();
  std::string* release_library_version();
  void set_allocated_library_version(std::string* library_version);
  private:
  const std::string& _internal_library_version() const;
  void _internal_set_library_version(const std::string& value);
  std::string* _internal_mutable_library_version();
  public:

  // optional uint32 protocol_version = 1;
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protocol_version() const;
  void _internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .blickfeld.protocol.Language language = 3 [(.blickfeld.protocol.optional) = true];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  ::blickfeld::protocol::Language language() const;
  void set_language(::blickfeld::protocol::Language value);
  private:
  ::blickfeld::protocol::Language _internal_language() const;
  void _internal_set_language(::blickfeld::protocol::Language value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.Hello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr library_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version_;
  int language_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_ProxyHello PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.ProxyHello) */ {
 public:
  inline Request_ProxyHello() : Request_ProxyHello(nullptr) {}
  ~Request_ProxyHello() override;
  explicit constexpr Request_ProxyHello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_ProxyHello(const Request_ProxyHello& from);
  Request_ProxyHello(Request_ProxyHello&& from) noexcept
    : Request_ProxyHello() {
    *this = ::std::move(from);
  }

  inline Request_ProxyHello& operator=(const Request_ProxyHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_ProxyHello& operator=(Request_ProxyHello&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_ProxyHello& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_ProxyHello* internal_default_instance() {
    return reinterpret_cast<const Request_ProxyHello*>(
               &_Request_ProxyHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request_ProxyHello& a, Request_ProxyHello& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_ProxyHello* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_ProxyHello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_ProxyHello* New() const final {
    return CreateMaybeMessage<Request_ProxyHello>(nullptr);
  }

  Request_ProxyHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_ProxyHello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_ProxyHello& from);
  void MergeFrom(const Request_ProxyHello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_ProxyHello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.ProxyHello";
  }
  protected:
  explicit Request_ProxyHello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
  };
  // optional string ip_address = 1 [(.blickfeld.protocol.regex) = "([0-9]{1,3}\\.){3}[0-9]{1,3}"];
  bool has_ip_address() const;
  private:
  bool _internal_has_ip_address() const;
  public:
  void clear_ip_address();
  const std::string& ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.ProxyHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_Developer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.Developer) */ {
 public:
  inline Request_Developer() : Request_Developer(nullptr) {}
  ~Request_Developer() override;
  explicit constexpr Request_Developer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_Developer(const Request_Developer& from);
  Request_Developer(Request_Developer&& from) noexcept
    : Request_Developer() {
    *this = ::std::move(from);
  }

  inline Request_Developer& operator=(const Request_Developer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_Developer& operator=(Request_Developer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_Developer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_Developer* internal_default_instance() {
    return reinterpret_cast<const Request_Developer*>(
               &_Request_Developer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request_Developer& a, Request_Developer& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_Developer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_Developer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_Developer* New() const final {
    return CreateMaybeMessage<Request_Developer>(nullptr);
  }

  Request_Developer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_Developer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_Developer& from);
  void MergeFrom(const Request_Developer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_Developer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.Developer";
  }
  protected:
  explicit Request_Developer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Request_Developer)
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.Developer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_SetScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.SetScanPattern) */ {
 public:
  inline Request_SetScanPattern() : Request_SetScanPattern(nullptr) {}
  ~Request_SetScanPattern() override;
  explicit constexpr Request_SetScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_SetScanPattern(const Request_SetScanPattern& from);
  Request_SetScanPattern(Request_SetScanPattern&& from) noexcept
    : Request_SetScanPattern() {
    *this = ::std::move(from);
  }

  inline Request_SetScanPattern& operator=(const Request_SetScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_SetScanPattern& operator=(Request_SetScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_SetScanPattern& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kConfig = 3,
    kName = 4,
    DATA_NOT_SET = 0,
  };

  static inline const Request_SetScanPattern* internal_default_instance() {
    return reinterpret_cast<const Request_SetScanPattern*>(
               &_Request_SetScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Request_SetScanPattern& a, Request_SetScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_SetScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_SetScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_SetScanPattern* New() const final {
    return CreateMaybeMessage<Request_SetScanPattern>(nullptr);
  }

  Request_SetScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_SetScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_SetScanPattern& from);
  void MergeFrom(const Request_SetScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_SetScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.SetScanPattern";
  }
  protected:
  explicit Request_SetScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersistFieldNumber = 2,
    kConfigFieldNumber = 3,
    kNameFieldNumber = 4,
  };
  // optional bool persist = 2 [default = false];
  bool has_persist() const;
  private:
  bool _internal_has_persist() const;
  public:
  void clear_persist();
  bool persist() const;
  void set_persist(bool value);
  private:
  bool _internal_persist() const;
  void _internal_set_persist(bool value);
  public:

  // .blickfeld.protocol.config.ScanPattern config = 3;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::blickfeld::protocol::config::ScanPattern& config() const;
  ::blickfeld::protocol::config::ScanPattern* release_config();
  ::blickfeld::protocol::config::ScanPattern* mutable_config();
  void set_allocated_config(::blickfeld::protocol::config::ScanPattern* config);
  private:
  const ::blickfeld::protocol::config::ScanPattern& _internal_config() const;
  ::blickfeld::protocol::config::ScanPattern* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::blickfeld::protocol::config::ScanPattern* config);
  ::blickfeld::protocol::config::ScanPattern* unsafe_arena_release_config();

  // string name = 4 [(.blickfeld.protocol.regex) = "[a-zA-Z0-9]([a-zA-Z0-9]|[_ \\-][a-zA-Z0-9])*"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.SetScanPattern)
 private:
  class _Internal;
  void set_has_config();
  void set_has_name();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool persist_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::config::ScanPattern* config_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  } data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_FillScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.FillScanPattern) */ {
 public:
  inline Request_FillScanPattern() : Request_FillScanPattern(nullptr) {}
  ~Request_FillScanPattern() override;
  explicit constexpr Request_FillScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_FillScanPattern(const Request_FillScanPattern& from);
  Request_FillScanPattern(Request_FillScanPattern&& from) noexcept
    : Request_FillScanPattern() {
    *this = ::std::move(from);
  }

  inline Request_FillScanPattern& operator=(const Request_FillScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_FillScanPattern& operator=(Request_FillScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_FillScanPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_FillScanPattern* internal_default_instance() {
    return reinterpret_cast<const Request_FillScanPattern*>(
               &_Request_FillScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Request_FillScanPattern& a, Request_FillScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_FillScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_FillScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_FillScanPattern* New() const final {
    return CreateMaybeMessage<Request_FillScanPattern>(nullptr);
  }

  Request_FillScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_FillScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_FillScanPattern& from);
  void MergeFrom(const Request_FillScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_FillScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.FillScanPattern";
  }
  protected:
  explicit Request_FillScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 2,
  };
  // optional .blickfeld.protocol.config.ScanPattern config = 2 [(.blickfeld.protocol.allow_sparse) = true];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::blickfeld::protocol::config::ScanPattern& config() const;
  ::blickfeld::protocol::config::ScanPattern* release_config();
  ::blickfeld::protocol::config::ScanPattern* mutable_config();
  void set_allocated_config(::blickfeld::protocol::config::ScanPattern* config);
  private:
  const ::blickfeld::protocol::config::ScanPattern& _internal_config() const;
  ::blickfeld::protocol::config::ScanPattern* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::blickfeld::protocol::config::ScanPattern* config);
  ::blickfeld::protocol::config::ScanPattern* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.FillScanPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::config::ScanPattern* config_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_GetScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.GetScanPattern) */ {
 public:
  inline Request_GetScanPattern() : Request_GetScanPattern(nullptr) {}
  ~Request_GetScanPattern() override;
  explicit constexpr Request_GetScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_GetScanPattern(const Request_GetScanPattern& from);
  Request_GetScanPattern(Request_GetScanPattern&& from) noexcept
    : Request_GetScanPattern() {
    *this = ::std::move(from);
  }

  inline Request_GetScanPattern& operator=(const Request_GetScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetScanPattern& operator=(Request_GetScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_GetScanPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_GetScanPattern* internal_default_instance() {
    return reinterpret_cast<const Request_GetScanPattern*>(
               &_Request_GetScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Request_GetScanPattern& a, Request_GetScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetScanPattern* New() const final {
    return CreateMaybeMessage<Request_GetScanPattern>(nullptr);
  }

  Request_GetScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_GetScanPattern& from);
  void MergeFrom(const Request_GetScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_GetScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.GetScanPattern";
  }
  protected:
  explicit Request_GetScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.GetScanPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.Status) */ {
 public:
  inline Request_Status() : Request_Status(nullptr) {}
  ~Request_Status() override;
  explicit constexpr Request_Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_Status(const Request_Status& from);
  Request_Status(Request_Status&& from) noexcept
    : Request_Status() {
    *this = ::std::move(from);
  }

  inline Request_Status& operator=(const Request_Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_Status& operator=(Request_Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_Status* internal_default_instance() {
    return reinterpret_cast<const Request_Status*>(
               &_Request_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Request_Status& a, Request_Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_Status* New() const final {
    return CreateMaybeMessage<Request_Status>(nullptr);
  }

  Request_Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_Status& from);
  void MergeFrom(const Request_Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.Status";
  }
  protected:
  explicit Request_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_RunSelfTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.RunSelfTest) */ {
 public:
  inline Request_RunSelfTest() : Request_RunSelfTest(nullptr) {}
  ~Request_RunSelfTest() override;
  explicit constexpr Request_RunSelfTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_RunSelfTest(const Request_RunSelfTest& from);
  Request_RunSelfTest(Request_RunSelfTest&& from) noexcept
    : Request_RunSelfTest() {
    *this = ::std::move(from);
  }

  inline Request_RunSelfTest& operator=(const Request_RunSelfTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_RunSelfTest& operator=(Request_RunSelfTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_RunSelfTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_RunSelfTest* internal_default_instance() {
    return reinterpret_cast<const Request_RunSelfTest*>(
               &_Request_RunSelfTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Request_RunSelfTest& a, Request_RunSelfTest& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_RunSelfTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_RunSelfTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_RunSelfTest* New() const final {
    return CreateMaybeMessage<Request_RunSelfTest>(nullptr);
  }

  Request_RunSelfTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_RunSelfTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_RunSelfTest& from);
  void MergeFrom(const Request_RunSelfTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_RunSelfTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.RunSelfTest";
  }
  protected:
  explicit Request_RunSelfTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.RunSelfTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_SetAdvancedConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.SetAdvancedConfig) */ {
 public:
  inline Request_SetAdvancedConfig() : Request_SetAdvancedConfig(nullptr) {}
  ~Request_SetAdvancedConfig() override;
  explicit constexpr Request_SetAdvancedConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_SetAdvancedConfig(const Request_SetAdvancedConfig& from);
  Request_SetAdvancedConfig(Request_SetAdvancedConfig&& from) noexcept
    : Request_SetAdvancedConfig() {
    *this = ::std::move(from);
  }

  inline Request_SetAdvancedConfig& operator=(const Request_SetAdvancedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_SetAdvancedConfig& operator=(Request_SetAdvancedConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_SetAdvancedConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_SetAdvancedConfig* internal_default_instance() {
    return reinterpret_cast<const Request_SetAdvancedConfig*>(
               &_Request_SetAdvancedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Request_SetAdvancedConfig& a, Request_SetAdvancedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_SetAdvancedConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_SetAdvancedConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_SetAdvancedConfig* New() const final {
    return CreateMaybeMessage<Request_SetAdvancedConfig>(nullptr);
  }

  Request_SetAdvancedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_SetAdvancedConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_SetAdvancedConfig& from);
  void MergeFrom(const Request_SetAdvancedConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_SetAdvancedConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.SetAdvancedConfig";
  }
  protected:
  explicit Request_SetAdvancedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kPersistFieldNumber = 2,
  };
  // optional .blickfeld.protocol.config.Advanced config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::blickfeld::protocol::config::Advanced& config() const;
  ::blickfeld::protocol::config::Advanced* release_config();
  ::blickfeld::protocol::config::Advanced* mutable_config();
  void set_allocated_config(::blickfeld::protocol::config::Advanced* config);
  private:
  const ::blickfeld::protocol::config::Advanced& _internal_config() const;
  ::blickfeld::protocol::config::Advanced* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::blickfeld::protocol::config::Advanced* config);
  ::blickfeld::protocol::config::Advanced* unsafe_arena_release_config();

  // optional bool persist = 2 [default = true];
  bool has_persist() const;
  private:
  bool _internal_has_persist() const;
  public:
  void clear_persist();
  bool persist() const;
  void set_persist(bool value);
  private:
  bool _internal_persist() const;
  void _internal_set_persist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.SetAdvancedConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::config::Advanced* config_;
  bool persist_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_GetAdvancedConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.GetAdvancedConfig) */ {
 public:
  inline Request_GetAdvancedConfig() : Request_GetAdvancedConfig(nullptr) {}
  ~Request_GetAdvancedConfig() override;
  explicit constexpr Request_GetAdvancedConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_GetAdvancedConfig(const Request_GetAdvancedConfig& from);
  Request_GetAdvancedConfig(Request_GetAdvancedConfig&& from) noexcept
    : Request_GetAdvancedConfig() {
    *this = ::std::move(from);
  }

  inline Request_GetAdvancedConfig& operator=(const Request_GetAdvancedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetAdvancedConfig& operator=(Request_GetAdvancedConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_GetAdvancedConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_GetAdvancedConfig* internal_default_instance() {
    return reinterpret_cast<const Request_GetAdvancedConfig*>(
               &_Request_GetAdvancedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Request_GetAdvancedConfig& a, Request_GetAdvancedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetAdvancedConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetAdvancedConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetAdvancedConfig* New() const final {
    return CreateMaybeMessage<Request_GetAdvancedConfig>(nullptr);
  }

  Request_GetAdvancedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetAdvancedConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_GetAdvancedConfig& from);
  void MergeFrom(const Request_GetAdvancedConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_GetAdvancedConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.GetAdvancedConfig";
  }
  protected:
  explicit Request_GetAdvancedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.GetAdvancedConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_AttemptErrorRecovery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.AttemptErrorRecovery) */ {
 public:
  inline Request_AttemptErrorRecovery() : Request_AttemptErrorRecovery(nullptr) {}
  ~Request_AttemptErrorRecovery() override;
  explicit constexpr Request_AttemptErrorRecovery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_AttemptErrorRecovery(const Request_AttemptErrorRecovery& from);
  Request_AttemptErrorRecovery(Request_AttemptErrorRecovery&& from) noexcept
    : Request_AttemptErrorRecovery() {
    *this = ::std::move(from);
  }

  inline Request_AttemptErrorRecovery& operator=(const Request_AttemptErrorRecovery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_AttemptErrorRecovery& operator=(Request_AttemptErrorRecovery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_AttemptErrorRecovery& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_AttemptErrorRecovery* internal_default_instance() {
    return reinterpret_cast<const Request_AttemptErrorRecovery*>(
               &_Request_AttemptErrorRecovery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Request_AttemptErrorRecovery& a, Request_AttemptErrorRecovery& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_AttemptErrorRecovery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_AttemptErrorRecovery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_AttemptErrorRecovery* New() const final {
    return CreateMaybeMessage<Request_AttemptErrorRecovery>(nullptr);
  }

  Request_AttemptErrorRecovery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_AttemptErrorRecovery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_AttemptErrorRecovery& from);
  void MergeFrom(const Request_AttemptErrorRecovery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_AttemptErrorRecovery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.AttemptErrorRecovery";
  }
  protected:
  explicit Request_AttemptErrorRecovery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.AttemptErrorRecovery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_GetScanPatternConstraints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.GetScanPatternConstraints) */ {
 public:
  inline Request_GetScanPatternConstraints() : Request_GetScanPatternConstraints(nullptr) {}
  ~Request_GetScanPatternConstraints() override;
  explicit constexpr Request_GetScanPatternConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_GetScanPatternConstraints(const Request_GetScanPatternConstraints& from);
  Request_GetScanPatternConstraints(Request_GetScanPatternConstraints&& from) noexcept
    : Request_GetScanPatternConstraints() {
    *this = ::std::move(from);
  }

  inline Request_GetScanPatternConstraints& operator=(const Request_GetScanPatternConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetScanPatternConstraints& operator=(Request_GetScanPatternConstraints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_GetScanPatternConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_GetScanPatternConstraints* internal_default_instance() {
    return reinterpret_cast<const Request_GetScanPatternConstraints*>(
               &_Request_GetScanPatternConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Request_GetScanPatternConstraints& a, Request_GetScanPatternConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetScanPatternConstraints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetScanPatternConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetScanPatternConstraints* New() const final {
    return CreateMaybeMessage<Request_GetScanPatternConstraints>(nullptr);
  }

  Request_GetScanPatternConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetScanPatternConstraints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_GetScanPatternConstraints& from);
  void MergeFrom(const Request_GetScanPatternConstraints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_GetScanPatternConstraints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.GetScanPatternConstraints";
  }
  protected:
  explicit Request_GetScanPatternConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.GetScanPatternConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_GetNamedScanPatterns PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.GetNamedScanPatterns) */ {
 public:
  inline Request_GetNamedScanPatterns() : Request_GetNamedScanPatterns(nullptr) {}
  ~Request_GetNamedScanPatterns() override;
  explicit constexpr Request_GetNamedScanPatterns(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_GetNamedScanPatterns(const Request_GetNamedScanPatterns& from);
  Request_GetNamedScanPatterns(Request_GetNamedScanPatterns&& from) noexcept
    : Request_GetNamedScanPatterns() {
    *this = ::std::move(from);
  }

  inline Request_GetNamedScanPatterns& operator=(const Request_GetNamedScanPatterns& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_GetNamedScanPatterns& operator=(Request_GetNamedScanPatterns&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_GetNamedScanPatterns& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_GetNamedScanPatterns* internal_default_instance() {
    return reinterpret_cast<const Request_GetNamedScanPatterns*>(
               &_Request_GetNamedScanPatterns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Request_GetNamedScanPatterns& a, Request_GetNamedScanPatterns& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_GetNamedScanPatterns* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_GetNamedScanPatterns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_GetNamedScanPatterns* New() const final {
    return CreateMaybeMessage<Request_GetNamedScanPatterns>(nullptr);
  }

  Request_GetNamedScanPatterns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_GetNamedScanPatterns>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_GetNamedScanPatterns& from);
  void MergeFrom(const Request_GetNamedScanPatterns& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_GetNamedScanPatterns* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.GetNamedScanPatterns";
  }
  protected:
  explicit Request_GetNamedScanPatterns(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.GetNamedScanPatterns)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_StoreNamedScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.StoreNamedScanPattern) */ {
 public:
  inline Request_StoreNamedScanPattern() : Request_StoreNamedScanPattern(nullptr) {}
  ~Request_StoreNamedScanPattern() override;
  explicit constexpr Request_StoreNamedScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_StoreNamedScanPattern(const Request_StoreNamedScanPattern& from);
  Request_StoreNamedScanPattern(Request_StoreNamedScanPattern&& from) noexcept
    : Request_StoreNamedScanPattern() {
    *this = ::std::move(from);
  }

  inline Request_StoreNamedScanPattern& operator=(const Request_StoreNamedScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_StoreNamedScanPattern& operator=(Request_StoreNamedScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_StoreNamedScanPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_StoreNamedScanPattern* internal_default_instance() {
    return reinterpret_cast<const Request_StoreNamedScanPattern*>(
               &_Request_StoreNamedScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Request_StoreNamedScanPattern& a, Request_StoreNamedScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_StoreNamedScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_StoreNamedScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_StoreNamedScanPattern* New() const final {
    return CreateMaybeMessage<Request_StoreNamedScanPattern>(nullptr);
  }

  Request_StoreNamedScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_StoreNamedScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_StoreNamedScanPattern& from);
  void MergeFrom(const Request_StoreNamedScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_StoreNamedScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.StoreNamedScanPattern";
  }
  protected:
  explicit Request_StoreNamedScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // optional string name = 1 [(.blickfeld.protocol.regex) = "[a-zA-Z0-9]([a-zA-Z0-9]|[_ \\-][a-zA-Z0-9])*"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .blickfeld.protocol.config.ScanPattern config = 2 [(.blickfeld.protocol.allow_sparse) = true];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::blickfeld::protocol::config::ScanPattern& config() const;
  ::blickfeld::protocol::config::ScanPattern* release_config();
  ::blickfeld::protocol::config::ScanPattern* mutable_config();
  void set_allocated_config(::blickfeld::protocol::config::ScanPattern* config);
  private:
  const ::blickfeld::protocol::config::ScanPattern& _internal_config() const;
  ::blickfeld::protocol::config::ScanPattern* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::blickfeld::protocol::config::ScanPattern* config);
  ::blickfeld::protocol::config::ScanPattern* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.StoreNamedScanPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::blickfeld::protocol::config::ScanPattern* config_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request_DeleteNamedScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request.DeleteNamedScanPattern) */ {
 public:
  inline Request_DeleteNamedScanPattern() : Request_DeleteNamedScanPattern(nullptr) {}
  ~Request_DeleteNamedScanPattern() override;
  explicit constexpr Request_DeleteNamedScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_DeleteNamedScanPattern(const Request_DeleteNamedScanPattern& from);
  Request_DeleteNamedScanPattern(Request_DeleteNamedScanPattern&& from) noexcept
    : Request_DeleteNamedScanPattern() {
    *this = ::std::move(from);
  }

  inline Request_DeleteNamedScanPattern& operator=(const Request_DeleteNamedScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_DeleteNamedScanPattern& operator=(Request_DeleteNamedScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request_DeleteNamedScanPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_DeleteNamedScanPattern* internal_default_instance() {
    return reinterpret_cast<const Request_DeleteNamedScanPattern*>(
               &_Request_DeleteNamedScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Request_DeleteNamedScanPattern& a, Request_DeleteNamedScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_DeleteNamedScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_DeleteNamedScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_DeleteNamedScanPattern* New() const final {
    return CreateMaybeMessage<Request_DeleteNamedScanPattern>(nullptr);
  }

  Request_DeleteNamedScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_DeleteNamedScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_DeleteNamedScanPattern& from);
  void MergeFrom(const Request_DeleteNamedScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_DeleteNamedScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request.DeleteNamedScanPattern";
  }
  protected:
  explicit Request_DeleteNamedScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1 [(.blickfeld.protocol.regex) = "[a-zA-Z0-9]([a-zA-Z0-9]|[_ \\-][a-zA-Z0-9])*"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request.DeleteNamedScanPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kHello = 11,
    kDeveloper = 13,
    kSetScanPattern = 15,
    kFillScanPattern = 16,
    kGetScanPattern = 17,
    kSubscribe = 18,
    kStatus = 19,
    kRunSelfTest = 20,
    kSetAdvancedConfig = 21,
    kGetAdvancedConfig = 22,
    kUnsubscribe = 23,
    kAttemptErrorRecovery = 24,
    kGetScanPatternConstraints = 25,
    kGetNamedScanPatterns = 26,
    kStoreNamedScanPattern = 27,
    kDeleteNamedScanPattern = 28,
    kProxyHello = 29,
    kAsJSON = 100,
    DATA_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Request_Hello Hello;
  typedef Request_ProxyHello ProxyHello;
  typedef Request_Developer Developer;
  typedef Request_SetScanPattern SetScanPattern;
  typedef Request_FillScanPattern FillScanPattern;
  typedef Request_GetScanPattern GetScanPattern;
  typedef Request_Status Status;
  typedef Request_RunSelfTest RunSelfTest;
  typedef Request_SetAdvancedConfig SetAdvancedConfig;
  typedef Request_GetAdvancedConfig GetAdvancedConfig;
  typedef Request_AttemptErrorRecovery AttemptErrorRecovery;
  typedef Request_GetScanPatternConstraints GetScanPatternConstraints;
  typedef Request_GetNamedScanPatterns GetNamedScanPatterns;
  typedef Request_StoreNamedScanPattern StoreNamedScanPattern;
  typedef Request_DeleteNamedScanPattern DeleteNamedScanPattern;

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptFormatFieldNumber = 101,
    kHelloFieldNumber = 11,
    kDeveloperFieldNumber = 13,
    kSetScanPatternFieldNumber = 15,
    kFillScanPatternFieldNumber = 16,
    kGetScanPatternFieldNumber = 17,
    kSubscribeFieldNumber = 18,
    kStatusFieldNumber = 19,
    kRunSelfTestFieldNumber = 20,
    kSetAdvancedConfigFieldNumber = 21,
    kGetAdvancedConfigFieldNumber = 22,
    kUnsubscribeFieldNumber = 23,
    kAttemptErrorRecoveryFieldNumber = 24,
    kGetScanPatternConstraintsFieldNumber = 25,
    kGetNamedScanPatternsFieldNumber = 26,
    kStoreNamedScanPatternFieldNumber = 27,
    kDeleteNamedScanPatternFieldNumber = 28,
    kProxyHelloFieldNumber = 29,
    kAsJSONFieldNumber = 100,
  };
  // optional .blickfeld.protocol.Format accept_format = 101 [default = PROTOBUF];
  bool has_accept_format() const;
  private:
  bool _internal_has_accept_format() const;
  public:
  void clear_accept_format();
  ::blickfeld::protocol::Format accept_format() const;
  void set_accept_format(::blickfeld::protocol::Format value);
  private:
  ::blickfeld::protocol::Format _internal_accept_format() const;
  void _internal_set_accept_format(::blickfeld::protocol::Format value);
  public:

  // .blickfeld.protocol.Request.Hello hello = 11;
  bool has_hello() const;
  private:
  bool _internal_has_hello() const;
  public:
  void clear_hello();
  const ::blickfeld::protocol::Request_Hello& hello() const;
  ::blickfeld::protocol::Request_Hello* release_hello();
  ::blickfeld::protocol::Request_Hello* mutable_hello();
  void set_allocated_hello(::blickfeld::protocol::Request_Hello* hello);
  private:
  const ::blickfeld::protocol::Request_Hello& _internal_hello() const;
  ::blickfeld::protocol::Request_Hello* _internal_mutable_hello();
  public:
  void unsafe_arena_set_allocated_hello(
      ::blickfeld::protocol::Request_Hello* hello);
  ::blickfeld::protocol::Request_Hello* unsafe_arena_release_hello();

  // .blickfeld.protocol.Request.Developer developer = 13;
  bool has_developer() const;
  private:
  bool _internal_has_developer() const;
  public:
  void clear_developer();
  const ::blickfeld::protocol::Request_Developer& developer() const;
  ::blickfeld::protocol::Request_Developer* release_developer();
  ::blickfeld::protocol::Request_Developer* mutable_developer();
  void set_allocated_developer(::blickfeld::protocol::Request_Developer* developer);
  private:
  const ::blickfeld::protocol::Request_Developer& _internal_developer() const;
  ::blickfeld::protocol::Request_Developer* _internal_mutable_developer();
  public:
  void unsafe_arena_set_allocated_developer(
      ::blickfeld::protocol::Request_Developer* developer);
  ::blickfeld::protocol::Request_Developer* unsafe_arena_release_developer();

  // .blickfeld.protocol.Request.SetScanPattern set_scan_pattern = 15;
  bool has_set_scan_pattern() const;
  private:
  bool _internal_has_set_scan_pattern() const;
  public:
  void clear_set_scan_pattern();
  const ::blickfeld::protocol::Request_SetScanPattern& set_scan_pattern() const;
  ::blickfeld::protocol::Request_SetScanPattern* release_set_scan_pattern();
  ::blickfeld::protocol::Request_SetScanPattern* mutable_set_scan_pattern();
  void set_allocated_set_scan_pattern(::blickfeld::protocol::Request_SetScanPattern* set_scan_pattern);
  private:
  const ::blickfeld::protocol::Request_SetScanPattern& _internal_set_scan_pattern() const;
  ::blickfeld::protocol::Request_SetScanPattern* _internal_mutable_set_scan_pattern();
  public:
  void unsafe_arena_set_allocated_set_scan_pattern(
      ::blickfeld::protocol::Request_SetScanPattern* set_scan_pattern);
  ::blickfeld::protocol::Request_SetScanPattern* unsafe_arena_release_set_scan_pattern();

  // .blickfeld.protocol.Request.FillScanPattern fill_scan_pattern = 16;
  bool has_fill_scan_pattern() const;
  private:
  bool _internal_has_fill_scan_pattern() const;
  public:
  void clear_fill_scan_pattern();
  const ::blickfeld::protocol::Request_FillScanPattern& fill_scan_pattern() const;
  ::blickfeld::protocol::Request_FillScanPattern* release_fill_scan_pattern();
  ::blickfeld::protocol::Request_FillScanPattern* mutable_fill_scan_pattern();
  void set_allocated_fill_scan_pattern(::blickfeld::protocol::Request_FillScanPattern* fill_scan_pattern);
  private:
  const ::blickfeld::protocol::Request_FillScanPattern& _internal_fill_scan_pattern() const;
  ::blickfeld::protocol::Request_FillScanPattern* _internal_mutable_fill_scan_pattern();
  public:
  void unsafe_arena_set_allocated_fill_scan_pattern(
      ::blickfeld::protocol::Request_FillScanPattern* fill_scan_pattern);
  ::blickfeld::protocol::Request_FillScanPattern* unsafe_arena_release_fill_scan_pattern();

  // .blickfeld.protocol.Request.GetScanPattern get_scan_pattern = 17;
  bool has_get_scan_pattern() const;
  private:
  bool _internal_has_get_scan_pattern() const;
  public:
  void clear_get_scan_pattern();
  const ::blickfeld::protocol::Request_GetScanPattern& get_scan_pattern() const;
  ::blickfeld::protocol::Request_GetScanPattern* release_get_scan_pattern();
  ::blickfeld::protocol::Request_GetScanPattern* mutable_get_scan_pattern();
  void set_allocated_get_scan_pattern(::blickfeld::protocol::Request_GetScanPattern* get_scan_pattern);
  private:
  const ::blickfeld::protocol::Request_GetScanPattern& _internal_get_scan_pattern() const;
  ::blickfeld::protocol::Request_GetScanPattern* _internal_mutable_get_scan_pattern();
  public:
  void unsafe_arena_set_allocated_get_scan_pattern(
      ::blickfeld::protocol::Request_GetScanPattern* get_scan_pattern);
  ::blickfeld::protocol::Request_GetScanPattern* unsafe_arena_release_get_scan_pattern();

  // .blickfeld.protocol.stream.Subscribe subscribe = 18;
  bool has_subscribe() const;
  private:
  bool _internal_has_subscribe() const;
  public:
  void clear_subscribe();
  const ::blickfeld::protocol::stream::Subscribe& subscribe() const;
  ::blickfeld::protocol::stream::Subscribe* release_subscribe();
  ::blickfeld::protocol::stream::Subscribe* mutable_subscribe();
  void set_allocated_subscribe(::blickfeld::protocol::stream::Subscribe* subscribe);
  private:
  const ::blickfeld::protocol::stream::Subscribe& _internal_subscribe() const;
  ::blickfeld::protocol::stream::Subscribe* _internal_mutable_subscribe();
  public:
  void unsafe_arena_set_allocated_subscribe(
      ::blickfeld::protocol::stream::Subscribe* subscribe);
  ::blickfeld::protocol::stream::Subscribe* unsafe_arena_release_subscribe();

  // .blickfeld.protocol.Request.Status status = 19;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::blickfeld::protocol::Request_Status& status() const;
  ::blickfeld::protocol::Request_Status* release_status();
  ::blickfeld::protocol::Request_Status* mutable_status();
  void set_allocated_status(::blickfeld::protocol::Request_Status* status);
  private:
  const ::blickfeld::protocol::Request_Status& _internal_status() const;
  ::blickfeld::protocol::Request_Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::blickfeld::protocol::Request_Status* status);
  ::blickfeld::protocol::Request_Status* unsafe_arena_release_status();

  // .blickfeld.protocol.Request.RunSelfTest run_self_test = 20;
  bool has_run_self_test() const;
  private:
  bool _internal_has_run_self_test() const;
  public:
  void clear_run_self_test();
  const ::blickfeld::protocol::Request_RunSelfTest& run_self_test() const;
  ::blickfeld::protocol::Request_RunSelfTest* release_run_self_test();
  ::blickfeld::protocol::Request_RunSelfTest* mutable_run_self_test();
  void set_allocated_run_self_test(::blickfeld::protocol::Request_RunSelfTest* run_self_test);
  private:
  const ::blickfeld::protocol::Request_RunSelfTest& _internal_run_self_test() const;
  ::blickfeld::protocol::Request_RunSelfTest* _internal_mutable_run_self_test();
  public:
  void unsafe_arena_set_allocated_run_self_test(
      ::blickfeld::protocol::Request_RunSelfTest* run_self_test);
  ::blickfeld::protocol::Request_RunSelfTest* unsafe_arena_release_run_self_test();

  // .blickfeld.protocol.Request.SetAdvancedConfig set_advanced_config = 21;
  bool has_set_advanced_config() const;
  private:
  bool _internal_has_set_advanced_config() const;
  public:
  void clear_set_advanced_config();
  const ::blickfeld::protocol::Request_SetAdvancedConfig& set_advanced_config() const;
  ::blickfeld::protocol::Request_SetAdvancedConfig* release_set_advanced_config();
  ::blickfeld::protocol::Request_SetAdvancedConfig* mutable_set_advanced_config();
  void set_allocated_set_advanced_config(::blickfeld::protocol::Request_SetAdvancedConfig* set_advanced_config);
  private:
  const ::blickfeld::protocol::Request_SetAdvancedConfig& _internal_set_advanced_config() const;
  ::blickfeld::protocol::Request_SetAdvancedConfig* _internal_mutable_set_advanced_config();
  public:
  void unsafe_arena_set_allocated_set_advanced_config(
      ::blickfeld::protocol::Request_SetAdvancedConfig* set_advanced_config);
  ::blickfeld::protocol::Request_SetAdvancedConfig* unsafe_arena_release_set_advanced_config();

  // .blickfeld.protocol.Request.GetAdvancedConfig get_advanced_config = 22;
  bool has_get_advanced_config() const;
  private:
  bool _internal_has_get_advanced_config() const;
  public:
  void clear_get_advanced_config();
  const ::blickfeld::protocol::Request_GetAdvancedConfig& get_advanced_config() const;
  ::blickfeld::protocol::Request_GetAdvancedConfig* release_get_advanced_config();
  ::blickfeld::protocol::Request_GetAdvancedConfig* mutable_get_advanced_config();
  void set_allocated_get_advanced_config(::blickfeld::protocol::Request_GetAdvancedConfig* get_advanced_config);
  private:
  const ::blickfeld::protocol::Request_GetAdvancedConfig& _internal_get_advanced_config() const;
  ::blickfeld::protocol::Request_GetAdvancedConfig* _internal_mutable_get_advanced_config();
  public:
  void unsafe_arena_set_allocated_get_advanced_config(
      ::blickfeld::protocol::Request_GetAdvancedConfig* get_advanced_config);
  ::blickfeld::protocol::Request_GetAdvancedConfig* unsafe_arena_release_get_advanced_config();

  // .blickfeld.protocol.stream.Subscribe unsubscribe = 23;
  bool has_unsubscribe() const;
  private:
  bool _internal_has_unsubscribe() const;
  public:
  void clear_unsubscribe();
  const ::blickfeld::protocol::stream::Subscribe& unsubscribe() const;
  ::blickfeld::protocol::stream::Subscribe* release_unsubscribe();
  ::blickfeld::protocol::stream::Subscribe* mutable_unsubscribe();
  void set_allocated_unsubscribe(::blickfeld::protocol::stream::Subscribe* unsubscribe);
  private:
  const ::blickfeld::protocol::stream::Subscribe& _internal_unsubscribe() const;
  ::blickfeld::protocol::stream::Subscribe* _internal_mutable_unsubscribe();
  public:
  void unsafe_arena_set_allocated_unsubscribe(
      ::blickfeld::protocol::stream::Subscribe* unsubscribe);
  ::blickfeld::protocol::stream::Subscribe* unsafe_arena_release_unsubscribe();

  // .blickfeld.protocol.Request.AttemptErrorRecovery attempt_error_recovery = 24;
  bool has_attempt_error_recovery() const;
  private:
  bool _internal_has_attempt_error_recovery() const;
  public:
  void clear_attempt_error_recovery();
  const ::blickfeld::protocol::Request_AttemptErrorRecovery& attempt_error_recovery() const;
  ::blickfeld::protocol::Request_AttemptErrorRecovery* release_attempt_error_recovery();
  ::blickfeld::protocol::Request_AttemptErrorRecovery* mutable_attempt_error_recovery();
  void set_allocated_attempt_error_recovery(::blickfeld::protocol::Request_AttemptErrorRecovery* attempt_error_recovery);
  private:
  const ::blickfeld::protocol::Request_AttemptErrorRecovery& _internal_attempt_error_recovery() const;
  ::blickfeld::protocol::Request_AttemptErrorRecovery* _internal_mutable_attempt_error_recovery();
  public:
  void unsafe_arena_set_allocated_attempt_error_recovery(
      ::blickfeld::protocol::Request_AttemptErrorRecovery* attempt_error_recovery);
  ::blickfeld::protocol::Request_AttemptErrorRecovery* unsafe_arena_release_attempt_error_recovery();

  // .blickfeld.protocol.Request.GetScanPatternConstraints get_scan_pattern_constraints = 25;
  bool has_get_scan_pattern_constraints() const;
  private:
  bool _internal_has_get_scan_pattern_constraints() const;
  public:
  void clear_get_scan_pattern_constraints();
  const ::blickfeld::protocol::Request_GetScanPatternConstraints& get_scan_pattern_constraints() const;
  ::blickfeld::protocol::Request_GetScanPatternConstraints* release_get_scan_pattern_constraints();
  ::blickfeld::protocol::Request_GetScanPatternConstraints* mutable_get_scan_pattern_constraints();
  void set_allocated_get_scan_pattern_constraints(::blickfeld::protocol::Request_GetScanPatternConstraints* get_scan_pattern_constraints);
  private:
  const ::blickfeld::protocol::Request_GetScanPatternConstraints& _internal_get_scan_pattern_constraints() const;
  ::blickfeld::protocol::Request_GetScanPatternConstraints* _internal_mutable_get_scan_pattern_constraints();
  public:
  void unsafe_arena_set_allocated_get_scan_pattern_constraints(
      ::blickfeld::protocol::Request_GetScanPatternConstraints* get_scan_pattern_constraints);
  ::blickfeld::protocol::Request_GetScanPatternConstraints* unsafe_arena_release_get_scan_pattern_constraints();

  // .blickfeld.protocol.Request.GetNamedScanPatterns get_named_scan_patterns = 26;
  bool has_get_named_scan_patterns() const;
  private:
  bool _internal_has_get_named_scan_patterns() const;
  public:
  void clear_get_named_scan_patterns();
  const ::blickfeld::protocol::Request_GetNamedScanPatterns& get_named_scan_patterns() const;
  ::blickfeld::protocol::Request_GetNamedScanPatterns* release_get_named_scan_patterns();
  ::blickfeld::protocol::Request_GetNamedScanPatterns* mutable_get_named_scan_patterns();
  void set_allocated_get_named_scan_patterns(::blickfeld::protocol::Request_GetNamedScanPatterns* get_named_scan_patterns);
  private:
  const ::blickfeld::protocol::Request_GetNamedScanPatterns& _internal_get_named_scan_patterns() const;
  ::blickfeld::protocol::Request_GetNamedScanPatterns* _internal_mutable_get_named_scan_patterns();
  public:
  void unsafe_arena_set_allocated_get_named_scan_patterns(
      ::blickfeld::protocol::Request_GetNamedScanPatterns* get_named_scan_patterns);
  ::blickfeld::protocol::Request_GetNamedScanPatterns* unsafe_arena_release_get_named_scan_patterns();

  // .blickfeld.protocol.Request.StoreNamedScanPattern store_named_scan_pattern = 27;
  bool has_store_named_scan_pattern() const;
  private:
  bool _internal_has_store_named_scan_pattern() const;
  public:
  void clear_store_named_scan_pattern();
  const ::blickfeld::protocol::Request_StoreNamedScanPattern& store_named_scan_pattern() const;
  ::blickfeld::protocol::Request_StoreNamedScanPattern* release_store_named_scan_pattern();
  ::blickfeld::protocol::Request_StoreNamedScanPattern* mutable_store_named_scan_pattern();
  void set_allocated_store_named_scan_pattern(::blickfeld::protocol::Request_StoreNamedScanPattern* store_named_scan_pattern);
  private:
  const ::blickfeld::protocol::Request_StoreNamedScanPattern& _internal_store_named_scan_pattern() const;
  ::blickfeld::protocol::Request_StoreNamedScanPattern* _internal_mutable_store_named_scan_pattern();
  public:
  void unsafe_arena_set_allocated_store_named_scan_pattern(
      ::blickfeld::protocol::Request_StoreNamedScanPattern* store_named_scan_pattern);
  ::blickfeld::protocol::Request_StoreNamedScanPattern* unsafe_arena_release_store_named_scan_pattern();

  // .blickfeld.protocol.Request.DeleteNamedScanPattern delete_named_scan_pattern = 28;
  bool has_delete_named_scan_pattern() const;
  private:
  bool _internal_has_delete_named_scan_pattern() const;
  public:
  void clear_delete_named_scan_pattern();
  const ::blickfeld::protocol::Request_DeleteNamedScanPattern& delete_named_scan_pattern() const;
  ::blickfeld::protocol::Request_DeleteNamedScanPattern* release_delete_named_scan_pattern();
  ::blickfeld::protocol::Request_DeleteNamedScanPattern* mutable_delete_named_scan_pattern();
  void set_allocated_delete_named_scan_pattern(::blickfeld::protocol::Request_DeleteNamedScanPattern* delete_named_scan_pattern);
  private:
  const ::blickfeld::protocol::Request_DeleteNamedScanPattern& _internal_delete_named_scan_pattern() const;
  ::blickfeld::protocol::Request_DeleteNamedScanPattern* _internal_mutable_delete_named_scan_pattern();
  public:
  void unsafe_arena_set_allocated_delete_named_scan_pattern(
      ::blickfeld::protocol::Request_DeleteNamedScanPattern* delete_named_scan_pattern);
  ::blickfeld::protocol::Request_DeleteNamedScanPattern* unsafe_arena_release_delete_named_scan_pattern();

  // .blickfeld.protocol.Request.ProxyHello proxy_hello = 29;
  bool has_proxy_hello() const;
  private:
  bool _internal_has_proxy_hello() const;
  public:
  void clear_proxy_hello();
  const ::blickfeld::protocol::Request_ProxyHello& proxy_hello() const;
  ::blickfeld::protocol::Request_ProxyHello* release_proxy_hello();
  ::blickfeld::protocol::Request_ProxyHello* mutable_proxy_hello();
  void set_allocated_proxy_hello(::blickfeld::protocol::Request_ProxyHello* proxy_hello);
  private:
  const ::blickfeld::protocol::Request_ProxyHello& _internal_proxy_hello() const;
  ::blickfeld::protocol::Request_ProxyHello* _internal_mutable_proxy_hello();
  public:
  void unsafe_arena_set_allocated_proxy_hello(
      ::blickfeld::protocol::Request_ProxyHello* proxy_hello);
  ::blickfeld::protocol::Request_ProxyHello* unsafe_arena_release_proxy_hello();

  // string _asJSON = 100;
  bool has__asjson() const;
  private:
  bool _internal_has__asjson() const;
  public:
  void clear__asjson();
  const std::string& _asjson() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__asjson(ArgT0&& arg0, ArgT... args);
  std::string* mutable__asjson();
  std::string* release__asjson();
  void set_allocated__asjson(std::string* _asjson);
  private:
  const std::string& _internal__asjson() const;
  void _internal_set__asjson(const std::string& value);
  std::string* _internal_mutable__asjson();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Request)
 private:
  class _Internal;
  void set_has_hello();
  void set_has_developer();
  void set_has_set_scan_pattern();
  void set_has_fill_scan_pattern();
  void set_has_get_scan_pattern();
  void set_has_subscribe();
  void set_has_status();
  void set_has_run_self_test();
  void set_has_set_advanced_config();
  void set_has_get_advanced_config();
  void set_has_unsubscribe();
  void set_has_attempt_error_recovery();
  void set_has_get_scan_pattern_constraints();
  void set_has_get_named_scan_patterns();
  void set_has_store_named_scan_pattern();
  void set_has_delete_named_scan_pattern();
  void set_has_proxy_hello();
  void set_has__asjson();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int accept_format_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::Request_Hello* hello_;
    ::blickfeld::protocol::Request_Developer* developer_;
    ::blickfeld::protocol::Request_SetScanPattern* set_scan_pattern_;
    ::blickfeld::protocol::Request_FillScanPattern* fill_scan_pattern_;
    ::blickfeld::protocol::Request_GetScanPattern* get_scan_pattern_;
    ::blickfeld::protocol::stream::Subscribe* subscribe_;
    ::blickfeld::protocol::Request_Status* status_;
    ::blickfeld::protocol::Request_RunSelfTest* run_self_test_;
    ::blickfeld::protocol::Request_SetAdvancedConfig* set_advanced_config_;
    ::blickfeld::protocol::Request_GetAdvancedConfig* get_advanced_config_;
    ::blickfeld::protocol::stream::Subscribe* unsubscribe_;
    ::blickfeld::protocol::Request_AttemptErrorRecovery* attempt_error_recovery_;
    ::blickfeld::protocol::Request_GetScanPatternConstraints* get_scan_pattern_constraints_;
    ::blickfeld::protocol::Request_GetNamedScanPatterns* get_named_scan_patterns_;
    ::blickfeld::protocol::Request_StoreNamedScanPattern* store_named_scan_pattern_;
    ::blickfeld::protocol::Request_DeleteNamedScanPattern* delete_named_scan_pattern_;
    ::blickfeld::protocol::Request_ProxyHello* proxy_hello_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _asjson_;
  } data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse, 
    std::string, ::blickfeld::protocol::SoftwareVersion,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse, 
    std::string, ::blickfeld::protocol::SoftwareVersion,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse();
  explicit constexpr Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse& other);
  static const Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse*>(&_Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "blickfeld.protocol.Response.Hello.Firmware.ModuleVersionsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class BF_DLLEXPORT Response_Hello_Firmware PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.Hello.Firmware) */ {
 public:
  inline Response_Hello_Firmware() : Response_Hello_Firmware(nullptr) {}
  ~Response_Hello_Firmware() override;
  explicit constexpr Response_Hello_Firmware(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_Hello_Firmware(const Response_Hello_Firmware& from);
  Response_Hello_Firmware(Response_Hello_Firmware&& from) noexcept
    : Response_Hello_Firmware() {
    *this = ::std::move(from);
  }

  inline Response_Hello_Firmware& operator=(const Response_Hello_Firmware& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_Hello_Firmware& operator=(Response_Hello_Firmware&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_Hello_Firmware& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_Hello_Firmware* internal_default_instance() {
    return reinterpret_cast<const Response_Hello_Firmware*>(
               &_Response_Hello_Firmware_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Response_Hello_Firmware& a, Response_Hello_Firmware& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_Hello_Firmware* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_Hello_Firmware* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_Hello_Firmware* New() const final {
    return CreateMaybeMessage<Response_Hello_Firmware>(nullptr);
  }

  Response_Hello_Firmware* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_Hello_Firmware>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_Hello_Firmware& from);
  void MergeFrom(const Response_Hello_Firmware& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_Hello_Firmware* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.Hello.Firmware";
  }
  protected:
  explicit Response_Hello_Firmware(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kModuleVersionsFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // map<string, .blickfeld.protocol.SoftwareVersion> module_versions = 2;
  int module_versions_size() const;
  private:
  int _internal_module_versions_size() const;
  public:
  void clear_module_versions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::SoftwareVersion >&
      _internal_module_versions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::SoftwareVersion >*
      _internal_mutable_module_versions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::SoftwareVersion >&
      module_versions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::SoftwareVersion >*
      mutable_module_versions();

  // optional .blickfeld.protocol.SoftwareVersion version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::blickfeld::protocol::SoftwareVersion& version() const;
  ::blickfeld::protocol::SoftwareVersion* release_version();
  ::blickfeld::protocol::SoftwareVersion* mutable_version();
  void set_allocated_version(::blickfeld::protocol::SoftwareVersion* version);
  private:
  const ::blickfeld::protocol::SoftwareVersion& _internal_version() const;
  ::blickfeld::protocol::SoftwareVersion* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::blickfeld::protocol::SoftwareVersion* version);
  ::blickfeld::protocol::SoftwareVersion* unsafe_arena_release_version();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.Hello.Firmware)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Response_Hello_Firmware_ModuleVersionsEntry_DoNotUse,
      std::string, ::blickfeld::protocol::SoftwareVersion,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> module_versions_;
  ::blickfeld::protocol::SoftwareVersion* version_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class Response_Hello_HardwareModulesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_Hello_HardwareModulesEntry_DoNotUse, 
    std::string, ::blickfeld::protocol::HardwareModule,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_Hello_HardwareModulesEntry_DoNotUse, 
    std::string, ::blickfeld::protocol::HardwareModule,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Response_Hello_HardwareModulesEntry_DoNotUse();
  explicit constexpr Response_Hello_HardwareModulesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Response_Hello_HardwareModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Response_Hello_HardwareModulesEntry_DoNotUse& other);
  static const Response_Hello_HardwareModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Response_Hello_HardwareModulesEntry_DoNotUse*>(&_Response_Hello_HardwareModulesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "blickfeld.protocol.Response.Hello.HardwareModulesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class BF_DLLEXPORT Response_Hello PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.Hello) */ {
 public:
  inline Response_Hello() : Response_Hello(nullptr) {}
  ~Response_Hello() override;
  explicit constexpr Response_Hello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_Hello(const Response_Hello& from);
  Response_Hello(Response_Hello&& from) noexcept
    : Response_Hello() {
    *this = ::std::move(from);
  }

  inline Response_Hello& operator=(const Response_Hello& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_Hello& operator=(Response_Hello&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_Hello& default_instance() {
    return *internal_default_instance();
  }
  enum OneofSerialNumberCase {
    kSerialNumber = 5,
    kLegacySerialNumber = 6,
    ONEOF_SERIAL_NUMBER_NOT_SET = 0,
  };

  static inline const Response_Hello* internal_default_instance() {
    return reinterpret_cast<const Response_Hello*>(
               &_Response_Hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Response_Hello& a, Response_Hello& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_Hello* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_Hello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_Hello* New() const final {
    return CreateMaybeMessage<Response_Hello>(nullptr);
  }

  Response_Hello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_Hello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_Hello& from);
  void MergeFrom(const Response_Hello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_Hello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.Hello";
  }
  protected:
  explicit Response_Hello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_Hello_Firmware Firmware;

  // accessors -------------------------------------------------------

  enum : int {
    kHardwareModulesFieldNumber = 8,
    kLibraryVersionFieldNumber = 2,
    kFirmwareFieldNumber = 7,
    kProtocolVersionFieldNumber = 1,
    kProductFieldNumber = 4,
    kLanguageFieldNumber = 3,
    kSerialNumberFieldNumber = 5,
    kLegacySerialNumberFieldNumber = 6,
  };
  // map<string, .blickfeld.protocol.HardwareModule> hardware_modules = 8;
  int hardware_modules_size() const;
  private:
  int _internal_hardware_modules_size() const;
  public:
  void clear_hardware_modules();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::HardwareModule >&
      _internal_hardware_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::HardwareModule >*
      _internal_mutable_hardware_modules();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::HardwareModule >&
      hardware_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::HardwareModule >*
      mutable_hardware_modules();

  // optional string library_version = 2 [(.blickfeld.protocol.regex) = "[0-9]+\\.[0-9]+\\.[0-9]+[[:alnum:]\\.\\+\\-]*"];
  bool has_library_version() const;
  private:
  bool _internal_has_library_version() const;
  public:
  void clear_library_version();
  const std::string& library_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_library_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_library_version();
  std::string* release_library_version();
  void set_allocated_library_version(std::string* library_version);
  private:
  const std::string& _internal_library_version() const;
  void _internal_set_library_version(const std::string& value);
  std::string* _internal_mutable_library_version();
  public:

  // optional .blickfeld.protocol.Response.Hello.Firmware firmware = 7;
  bool has_firmware() const;
  private:
  bool _internal_has_firmware() const;
  public:
  void clear_firmware();
  const ::blickfeld::protocol::Response_Hello_Firmware& firmware() const;
  ::blickfeld::protocol::Response_Hello_Firmware* release_firmware();
  ::blickfeld::protocol::Response_Hello_Firmware* mutable_firmware();
  void set_allocated_firmware(::blickfeld::protocol::Response_Hello_Firmware* firmware);
  private:
  const ::blickfeld::protocol::Response_Hello_Firmware& _internal_firmware() const;
  ::blickfeld::protocol::Response_Hello_Firmware* _internal_mutable_firmware();
  public:
  void unsafe_arena_set_allocated_firmware(
      ::blickfeld::protocol::Response_Hello_Firmware* firmware);
  ::blickfeld::protocol::Response_Hello_Firmware* unsafe_arena_release_firmware();

  // optional uint32 protocol_version = 1;
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protocol_version() const;
  void _internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .blickfeld.protocol.config.Product product = 4 [(.blickfeld.protocol.optional) = true];
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  ::blickfeld::protocol::config::Product product() const;
  void set_product(::blickfeld::protocol::config::Product value);
  private:
  ::blickfeld::protocol::config::Product _internal_product() const;
  void _internal_set_product(::blickfeld::protocol::config::Product value);
  public:

  // optional .blickfeld.protocol.Language language = 3;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  ::blickfeld::protocol::Language language() const;
  void set_language(::blickfeld::protocol::Language value);
  private:
  ::blickfeld::protocol::Language _internal_language() const;
  void _internal_set_language(::blickfeld::protocol::Language value);
  public:

  // string serial_number = 5 [(.blickfeld.protocol.regex) = "[A-Z2-7]{9}", (.blickfeld.protocol.legacy_field_id) = 6];
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // string legacy_serial_number = 6 [deprecated = true, (.blickfeld.protocol.regex) = "msb-[0-9]{4}"];
  PROTOBUF_DEPRECATED bool has_legacy_serial_number() const;
  private:
  bool _internal_has_legacy_serial_number() const;
  public:
  PROTOBUF_DEPRECATED void clear_legacy_serial_number();
  PROTOBUF_DEPRECATED const std::string& legacy_serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_legacy_serial_number(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_legacy_serial_number();
  PROTOBUF_DEPRECATED std::string* release_legacy_serial_number();
  PROTOBUF_DEPRECATED void set_allocated_legacy_serial_number(std::string* legacy_serial_number);
  private:
  const std::string& _internal_legacy_serial_number() const;
  void _internal_set_legacy_serial_number(const std::string& value);
  std::string* _internal_mutable_legacy_serial_number();
  public:

  void clear_oneof_serial_number();
  OneofSerialNumberCase oneof_serial_number_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.Hello)
 private:
  class _Internal;
  void set_has_serial_number();
  void set_has_legacy_serial_number();

  inline bool has_oneof_serial_number() const;
  inline void clear_has_oneof_serial_number();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Response_Hello_HardwareModulesEntry_DoNotUse,
      std::string, ::blickfeld::protocol::HardwareModule,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> hardware_modules_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr library_version_;
  ::blickfeld::protocol::Response_Hello_Firmware* firmware_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version_;
  int product_;
  int language_;
  union OneofSerialNumberUnion {
    constexpr OneofSerialNumberUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_serial_number_;
  } oneof_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_ProxyHello PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.ProxyHello) */ {
 public:
  inline Response_ProxyHello() : Response_ProxyHello(nullptr) {}
  ~Response_ProxyHello() override;
  explicit constexpr Response_ProxyHello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_ProxyHello(const Response_ProxyHello& from);
  Response_ProxyHello(Response_ProxyHello&& from) noexcept
    : Response_ProxyHello() {
    *this = ::std::move(from);
  }

  inline Response_ProxyHello& operator=(const Response_ProxyHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_ProxyHello& operator=(Response_ProxyHello&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_ProxyHello& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_ProxyHello* internal_default_instance() {
    return reinterpret_cast<const Response_ProxyHello*>(
               &_Response_ProxyHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Response_ProxyHello& a, Response_ProxyHello& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_ProxyHello* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_ProxyHello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_ProxyHello* New() const final {
    return CreateMaybeMessage<Response_ProxyHello>(nullptr);
  }

  Response_ProxyHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_ProxyHello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_ProxyHello& from);
  void MergeFrom(const Response_ProxyHello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_ProxyHello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.ProxyHello";
  }
  protected:
  explicit Response_ProxyHello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.ProxyHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_Developer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.Developer) */ {
 public:
  inline Response_Developer() : Response_Developer(nullptr) {}
  ~Response_Developer() override;
  explicit constexpr Response_Developer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_Developer(const Response_Developer& from);
  Response_Developer(Response_Developer&& from) noexcept
    : Response_Developer() {
    *this = ::std::move(from);
  }

  inline Response_Developer& operator=(const Response_Developer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_Developer& operator=(Response_Developer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_Developer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_Developer* internal_default_instance() {
    return reinterpret_cast<const Response_Developer*>(
               &_Response_Developer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Response_Developer& a, Response_Developer& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_Developer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_Developer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_Developer* New() const final {
    return CreateMaybeMessage<Response_Developer>(nullptr);
  }

  Response_Developer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_Developer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_Developer& from);
  void MergeFrom(const Response_Developer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_Developer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.Developer";
  }
  protected:
  explicit Response_Developer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Response_Developer)
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.Developer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_SetScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.SetScanPattern) */ {
 public:
  inline Response_SetScanPattern() : Response_SetScanPattern(nullptr) {}
  ~Response_SetScanPattern() override;
  explicit constexpr Response_SetScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_SetScanPattern(const Response_SetScanPattern& from);
  Response_SetScanPattern(Response_SetScanPattern&& from) noexcept
    : Response_SetScanPattern() {
    *this = ::std::move(from);
  }

  inline Response_SetScanPattern& operator=(const Response_SetScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_SetScanPattern& operator=(Response_SetScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_SetScanPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_SetScanPattern* internal_default_instance() {
    return reinterpret_cast<const Response_SetScanPattern*>(
               &_Response_SetScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Response_SetScanPattern& a, Response_SetScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_SetScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_SetScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_SetScanPattern* New() const final {
    return CreateMaybeMessage<Response_SetScanPattern>(nullptr);
  }

  Response_SetScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_SetScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_SetScanPattern& from);
  void MergeFrom(const Response_SetScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_SetScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.SetScanPattern";
  }
  protected:
  explicit Response_SetScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.SetScanPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_FillScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.FillScanPattern) */ {
 public:
  inline Response_FillScanPattern() : Response_FillScanPattern(nullptr) {}
  ~Response_FillScanPattern() override;
  explicit constexpr Response_FillScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_FillScanPattern(const Response_FillScanPattern& from);
  Response_FillScanPattern(Response_FillScanPattern&& from) noexcept
    : Response_FillScanPattern() {
    *this = ::std::move(from);
  }

  inline Response_FillScanPattern& operator=(const Response_FillScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_FillScanPattern& operator=(Response_FillScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_FillScanPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_FillScanPattern* internal_default_instance() {
    return reinterpret_cast<const Response_FillScanPattern*>(
               &_Response_FillScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Response_FillScanPattern& a, Response_FillScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_FillScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_FillScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_FillScanPattern* New() const final {
    return CreateMaybeMessage<Response_FillScanPattern>(nullptr);
  }

  Response_FillScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_FillScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_FillScanPattern& from);
  void MergeFrom(const Response_FillScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_FillScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.FillScanPattern";
  }
  protected:
  explicit Response_FillScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 2,
  };
  // optional .blickfeld.protocol.config.ScanPattern config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::blickfeld::protocol::config::ScanPattern& config() const;
  ::blickfeld::protocol::config::ScanPattern* release_config();
  ::blickfeld::protocol::config::ScanPattern* mutable_config();
  void set_allocated_config(::blickfeld::protocol::config::ScanPattern* config);
  private:
  const ::blickfeld::protocol::config::ScanPattern& _internal_config() const;
  ::blickfeld::protocol::config::ScanPattern* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::blickfeld::protocol::config::ScanPattern* config);
  ::blickfeld::protocol::config::ScanPattern* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.FillScanPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::config::ScanPattern* config_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_GetScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.GetScanPattern) */ {
 public:
  inline Response_GetScanPattern() : Response_GetScanPattern(nullptr) {}
  ~Response_GetScanPattern() override;
  explicit constexpr Response_GetScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_GetScanPattern(const Response_GetScanPattern& from);
  Response_GetScanPattern(Response_GetScanPattern&& from) noexcept
    : Response_GetScanPattern() {
    *this = ::std::move(from);
  }

  inline Response_GetScanPattern& operator=(const Response_GetScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetScanPattern& operator=(Response_GetScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_GetScanPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_GetScanPattern* internal_default_instance() {
    return reinterpret_cast<const Response_GetScanPattern*>(
               &_Response_GetScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Response_GetScanPattern& a, Response_GetScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetScanPattern* New() const final {
    return CreateMaybeMessage<Response_GetScanPattern>(nullptr);
  }

  Response_GetScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_GetScanPattern& from);
  void MergeFrom(const Response_GetScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_GetScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.GetScanPattern";
  }
  protected:
  explicit Response_GetScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 2,
  };
  // optional .blickfeld.protocol.config.ScanPattern config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::blickfeld::protocol::config::ScanPattern& config() const;
  ::blickfeld::protocol::config::ScanPattern* release_config();
  ::blickfeld::protocol::config::ScanPattern* mutable_config();
  void set_allocated_config(::blickfeld::protocol::config::ScanPattern* config);
  private:
  const ::blickfeld::protocol::config::ScanPattern& _internal_config() const;
  ::blickfeld::protocol::config::ScanPattern* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::blickfeld::protocol::config::ScanPattern* config);
  ::blickfeld::protocol::config::ScanPattern* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.GetScanPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::config::ScanPattern* config_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_RunSelfTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.RunSelfTest) */ {
 public:
  inline Response_RunSelfTest() : Response_RunSelfTest(nullptr) {}
  ~Response_RunSelfTest() override;
  explicit constexpr Response_RunSelfTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_RunSelfTest(const Response_RunSelfTest& from);
  Response_RunSelfTest(Response_RunSelfTest&& from) noexcept
    : Response_RunSelfTest() {
    *this = ::std::move(from);
  }

  inline Response_RunSelfTest& operator=(const Response_RunSelfTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_RunSelfTest& operator=(Response_RunSelfTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_RunSelfTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_RunSelfTest* internal_default_instance() {
    return reinterpret_cast<const Response_RunSelfTest*>(
               &_Response_RunSelfTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Response_RunSelfTest& a, Response_RunSelfTest& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_RunSelfTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_RunSelfTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_RunSelfTest* New() const final {
    return CreateMaybeMessage<Response_RunSelfTest>(nullptr);
  }

  Response_RunSelfTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_RunSelfTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_RunSelfTest& from);
  void MergeFrom(const Response_RunSelfTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_RunSelfTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.RunSelfTest";
  }
  protected:
  explicit Response_RunSelfTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // optional bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Response_RunSelfTest)
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.RunSelfTest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_SetAdvancedConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.SetAdvancedConfig) */ {
 public:
  inline Response_SetAdvancedConfig() : Response_SetAdvancedConfig(nullptr) {}
  ~Response_SetAdvancedConfig() override;
  explicit constexpr Response_SetAdvancedConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_SetAdvancedConfig(const Response_SetAdvancedConfig& from);
  Response_SetAdvancedConfig(Response_SetAdvancedConfig&& from) noexcept
    : Response_SetAdvancedConfig() {
    *this = ::std::move(from);
  }

  inline Response_SetAdvancedConfig& operator=(const Response_SetAdvancedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_SetAdvancedConfig& operator=(Response_SetAdvancedConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_SetAdvancedConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_SetAdvancedConfig* internal_default_instance() {
    return reinterpret_cast<const Response_SetAdvancedConfig*>(
               &_Response_SetAdvancedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Response_SetAdvancedConfig& a, Response_SetAdvancedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_SetAdvancedConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_SetAdvancedConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_SetAdvancedConfig* New() const final {
    return CreateMaybeMessage<Response_SetAdvancedConfig>(nullptr);
  }

  Response_SetAdvancedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_SetAdvancedConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_SetAdvancedConfig& from);
  void MergeFrom(const Response_SetAdvancedConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_SetAdvancedConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.SetAdvancedConfig";
  }
  protected:
  explicit Response_SetAdvancedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.SetAdvancedConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_GetAdvancedConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.GetAdvancedConfig) */ {
 public:
  inline Response_GetAdvancedConfig() : Response_GetAdvancedConfig(nullptr) {}
  ~Response_GetAdvancedConfig() override;
  explicit constexpr Response_GetAdvancedConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_GetAdvancedConfig(const Response_GetAdvancedConfig& from);
  Response_GetAdvancedConfig(Response_GetAdvancedConfig&& from) noexcept
    : Response_GetAdvancedConfig() {
    *this = ::std::move(from);
  }

  inline Response_GetAdvancedConfig& operator=(const Response_GetAdvancedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetAdvancedConfig& operator=(Response_GetAdvancedConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_GetAdvancedConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_GetAdvancedConfig* internal_default_instance() {
    return reinterpret_cast<const Response_GetAdvancedConfig*>(
               &_Response_GetAdvancedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Response_GetAdvancedConfig& a, Response_GetAdvancedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetAdvancedConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetAdvancedConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetAdvancedConfig* New() const final {
    return CreateMaybeMessage<Response_GetAdvancedConfig>(nullptr);
  }

  Response_GetAdvancedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetAdvancedConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_GetAdvancedConfig& from);
  void MergeFrom(const Response_GetAdvancedConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_GetAdvancedConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.GetAdvancedConfig";
  }
  protected:
  explicit Response_GetAdvancedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // optional .blickfeld.protocol.config.Advanced config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::blickfeld::protocol::config::Advanced& config() const;
  ::blickfeld::protocol::config::Advanced* release_config();
  ::blickfeld::protocol::config::Advanced* mutable_config();
  void set_allocated_config(::blickfeld::protocol::config::Advanced* config);
  private:
  const ::blickfeld::protocol::config::Advanced& _internal_config() const;
  ::blickfeld::protocol::config::Advanced* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::blickfeld::protocol::config::Advanced* config);
  ::blickfeld::protocol::config::Advanced* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.GetAdvancedConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::blickfeld::protocol::config::Advanced* config_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_AttemptErrorRecovery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.AttemptErrorRecovery) */ {
 public:
  inline Response_AttemptErrorRecovery() : Response_AttemptErrorRecovery(nullptr) {}
  ~Response_AttemptErrorRecovery() override;
  explicit constexpr Response_AttemptErrorRecovery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_AttemptErrorRecovery(const Response_AttemptErrorRecovery& from);
  Response_AttemptErrorRecovery(Response_AttemptErrorRecovery&& from) noexcept
    : Response_AttemptErrorRecovery() {
    *this = ::std::move(from);
  }

  inline Response_AttemptErrorRecovery& operator=(const Response_AttemptErrorRecovery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_AttemptErrorRecovery& operator=(Response_AttemptErrorRecovery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_AttemptErrorRecovery& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_AttemptErrorRecovery* internal_default_instance() {
    return reinterpret_cast<const Response_AttemptErrorRecovery*>(
               &_Response_AttemptErrorRecovery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Response_AttemptErrorRecovery& a, Response_AttemptErrorRecovery& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_AttemptErrorRecovery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_AttemptErrorRecovery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_AttemptErrorRecovery* New() const final {
    return CreateMaybeMessage<Response_AttemptErrorRecovery>(nullptr);
  }

  Response_AttemptErrorRecovery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_AttemptErrorRecovery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_AttemptErrorRecovery& from);
  void MergeFrom(const Response_AttemptErrorRecovery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_AttemptErrorRecovery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.AttemptErrorRecovery";
  }
  protected:
  explicit Response_AttemptErrorRecovery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.AttemptErrorRecovery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_GetScanPatternConstraints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.GetScanPatternConstraints) */ {
 public:
  inline Response_GetScanPatternConstraints() : Response_GetScanPatternConstraints(nullptr) {}
  ~Response_GetScanPatternConstraints() override;
  explicit constexpr Response_GetScanPatternConstraints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_GetScanPatternConstraints(const Response_GetScanPatternConstraints& from);
  Response_GetScanPatternConstraints(Response_GetScanPatternConstraints&& from) noexcept
    : Response_GetScanPatternConstraints() {
    *this = ::std::move(from);
  }

  inline Response_GetScanPatternConstraints& operator=(const Response_GetScanPatternConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetScanPatternConstraints& operator=(Response_GetScanPatternConstraints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_GetScanPatternConstraints& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_GetScanPatternConstraints* internal_default_instance() {
    return reinterpret_cast<const Response_GetScanPatternConstraints*>(
               &_Response_GetScanPatternConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Response_GetScanPatternConstraints& a, Response_GetScanPatternConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetScanPatternConstraints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetScanPatternConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetScanPatternConstraints* New() const final {
    return CreateMaybeMessage<Response_GetScanPatternConstraints>(nullptr);
  }

  Response_GetScanPatternConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetScanPatternConstraints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_GetScanPatternConstraints& from);
  void MergeFrom(const Response_GetScanPatternConstraints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_GetScanPatternConstraints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.GetScanPatternConstraints";
  }
  protected:
  explicit Response_GetScanPatternConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 1,
  };
  // repeated .blickfeld.protocol.Constraint constraints = 1;
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::blickfeld::protocol::Constraint* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >*
      mutable_constraints();
  private:
  const ::blickfeld::protocol::Constraint& _internal_constraints(int index) const;
  ::blickfeld::protocol::Constraint* _internal_add_constraints();
  public:
  const ::blickfeld::protocol::Constraint& constraints(int index) const;
  ::blickfeld::protocol::Constraint* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >&
      constraints() const;

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.GetScanPatternConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint > constraints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_GetNamedScanPatterns PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.GetNamedScanPatterns) */ {
 public:
  inline Response_GetNamedScanPatterns() : Response_GetNamedScanPatterns(nullptr) {}
  ~Response_GetNamedScanPatterns() override;
  explicit constexpr Response_GetNamedScanPatterns(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_GetNamedScanPatterns(const Response_GetNamedScanPatterns& from);
  Response_GetNamedScanPatterns(Response_GetNamedScanPatterns&& from) noexcept
    : Response_GetNamedScanPatterns() {
    *this = ::std::move(from);
  }

  inline Response_GetNamedScanPatterns& operator=(const Response_GetNamedScanPatterns& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_GetNamedScanPatterns& operator=(Response_GetNamedScanPatterns&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_GetNamedScanPatterns& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_GetNamedScanPatterns* internal_default_instance() {
    return reinterpret_cast<const Response_GetNamedScanPatterns*>(
               &_Response_GetNamedScanPatterns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Response_GetNamedScanPatterns& a, Response_GetNamedScanPatterns& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_GetNamedScanPatterns* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_GetNamedScanPatterns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_GetNamedScanPatterns* New() const final {
    return CreateMaybeMessage<Response_GetNamedScanPatterns>(nullptr);
  }

  Response_GetNamedScanPatterns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_GetNamedScanPatterns>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_GetNamedScanPatterns& from);
  void MergeFrom(const Response_GetNamedScanPatterns& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_GetNamedScanPatterns* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.GetNamedScanPatterns";
  }
  protected:
  explicit Response_GetNamedScanPatterns(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigsFieldNumber = 1,
  };
  // repeated .blickfeld.protocol.config.NamedScanPattern configs = 1;
  int configs_size() const;
  private:
  int _internal_configs_size() const;
  public:
  void clear_configs();
  ::blickfeld::protocol::config::NamedScanPattern* mutable_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::NamedScanPattern >*
      mutable_configs();
  private:
  const ::blickfeld::protocol::config::NamedScanPattern& _internal_configs(int index) const;
  ::blickfeld::protocol::config::NamedScanPattern* _internal_add_configs();
  public:
  const ::blickfeld::protocol::config::NamedScanPattern& configs(int index) const;
  ::blickfeld::protocol::config::NamedScanPattern* add_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::NamedScanPattern >&
      configs() const;

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.GetNamedScanPatterns)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::NamedScanPattern > configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_StoreNamedScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.StoreNamedScanPattern) */ {
 public:
  inline Response_StoreNamedScanPattern() : Response_StoreNamedScanPattern(nullptr) {}
  ~Response_StoreNamedScanPattern() override;
  explicit constexpr Response_StoreNamedScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_StoreNamedScanPattern(const Response_StoreNamedScanPattern& from);
  Response_StoreNamedScanPattern(Response_StoreNamedScanPattern&& from) noexcept
    : Response_StoreNamedScanPattern() {
    *this = ::std::move(from);
  }

  inline Response_StoreNamedScanPattern& operator=(const Response_StoreNamedScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_StoreNamedScanPattern& operator=(Response_StoreNamedScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_StoreNamedScanPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_StoreNamedScanPattern* internal_default_instance() {
    return reinterpret_cast<const Response_StoreNamedScanPattern*>(
               &_Response_StoreNamedScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Response_StoreNamedScanPattern& a, Response_StoreNamedScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_StoreNamedScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_StoreNamedScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_StoreNamedScanPattern* New() const final {
    return CreateMaybeMessage<Response_StoreNamedScanPattern>(nullptr);
  }

  Response_StoreNamedScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_StoreNamedScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_StoreNamedScanPattern& from);
  void MergeFrom(const Response_StoreNamedScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_StoreNamedScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.StoreNamedScanPattern";
  }
  protected:
  explicit Response_StoreNamedScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.StoreNamedScanPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response_DeleteNamedScanPattern PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response.DeleteNamedScanPattern) */ {
 public:
  inline Response_DeleteNamedScanPattern() : Response_DeleteNamedScanPattern(nullptr) {}
  ~Response_DeleteNamedScanPattern() override;
  explicit constexpr Response_DeleteNamedScanPattern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response_DeleteNamedScanPattern(const Response_DeleteNamedScanPattern& from);
  Response_DeleteNamedScanPattern(Response_DeleteNamedScanPattern&& from) noexcept
    : Response_DeleteNamedScanPattern() {
    *this = ::std::move(from);
  }

  inline Response_DeleteNamedScanPattern& operator=(const Response_DeleteNamedScanPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response_DeleteNamedScanPattern& operator=(Response_DeleteNamedScanPattern&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response_DeleteNamedScanPattern& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response_DeleteNamedScanPattern* internal_default_instance() {
    return reinterpret_cast<const Response_DeleteNamedScanPattern*>(
               &_Response_DeleteNamedScanPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Response_DeleteNamedScanPattern& a, Response_DeleteNamedScanPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(Response_DeleteNamedScanPattern* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response_DeleteNamedScanPattern* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response_DeleteNamedScanPattern* New() const final {
    return CreateMaybeMessage<Response_DeleteNamedScanPattern>(nullptr);
  }

  Response_DeleteNamedScanPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response_DeleteNamedScanPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response_DeleteNamedScanPattern& from);
  void MergeFrom(const Response_DeleteNamedScanPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_DeleteNamedScanPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response.DeleteNamedScanPattern";
  }
  protected:
  explicit Response_DeleteNamedScanPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response.DeleteNamedScanPattern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class BF_DLLEXPORT Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:blickfeld.protocol.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kError = 10,
    kHello = 11,
    kDeveloper = 13,
    kSetScanPattern = 15,
    kFillScanPattern = 16,
    kGetScanPattern = 17,
    kEvent = 18,
    kStatus = 19,
    kRunSelfTest = 20,
    kSetAdvancedConfig = 21,
    kGetAdvancedConfig = 22,
    kAttemptErrorRecovery = 24,
    kGetScanPatternConstraints = 25,
    kGetNamedScanPatterns = 26,
    kStoreNamedScanPattern = 27,
    kDeleteNamedScanPattern = 28,
    kProxyHello = 29,
    kAsJSON = 100,
    DATA_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blickfeld.protocol.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_Hello Hello;
  typedef Response_ProxyHello ProxyHello;
  typedef Response_Developer Developer;
  typedef Response_SetScanPattern SetScanPattern;
  typedef Response_FillScanPattern FillScanPattern;
  typedef Response_GetScanPattern GetScanPattern;
  typedef Response_RunSelfTest RunSelfTest;
  typedef Response_SetAdvancedConfig SetAdvancedConfig;
  typedef Response_GetAdvancedConfig GetAdvancedConfig;
  typedef Response_AttemptErrorRecovery AttemptErrorRecovery;
  typedef Response_GetScanPatternConstraints GetScanPatternConstraints;
  typedef Response_GetNamedScanPatterns GetNamedScanPatterns;
  typedef Response_StoreNamedScanPattern StoreNamedScanPattern;
  typedef Response_DeleteNamedScanPattern DeleteNamedScanPattern;

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampNsFieldNumber = 1,
    kErrorFieldNumber = 10,
    kHelloFieldNumber = 11,
    kDeveloperFieldNumber = 13,
    kSetScanPatternFieldNumber = 15,
    kFillScanPatternFieldNumber = 16,
    kGetScanPatternFieldNumber = 17,
    kEventFieldNumber = 18,
    kStatusFieldNumber = 19,
    kRunSelfTestFieldNumber = 20,
    kSetAdvancedConfigFieldNumber = 21,
    kGetAdvancedConfigFieldNumber = 22,
    kAttemptErrorRecoveryFieldNumber = 24,
    kGetScanPatternConstraintsFieldNumber = 25,
    kGetNamedScanPatternsFieldNumber = 26,
    kStoreNamedScanPatternFieldNumber = 27,
    kDeleteNamedScanPatternFieldNumber = 28,
    kProxyHelloFieldNumber = 29,
    kAsJSONFieldNumber = 100,
  };
  // optional uint64 timestamp_ns = 1;
  bool has_timestamp_ns() const;
  private:
  bool _internal_has_timestamp_ns() const;
  public:
  void clear_timestamp_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ns() const;
  void set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_ns() const;
  void _internal_set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .blickfeld.protocol.Error error = 10;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::blickfeld::protocol::Error& error() const;
  ::blickfeld::protocol::Error* release_error();
  ::blickfeld::protocol::Error* mutable_error();
  void set_allocated_error(::blickfeld::protocol::Error* error);
  private:
  const ::blickfeld::protocol::Error& _internal_error() const;
  ::blickfeld::protocol::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::blickfeld::protocol::Error* error);
  ::blickfeld::protocol::Error* unsafe_arena_release_error();

  // .blickfeld.protocol.Response.Hello hello = 11;
  bool has_hello() const;
  private:
  bool _internal_has_hello() const;
  public:
  void clear_hello();
  const ::blickfeld::protocol::Response_Hello& hello() const;
  ::blickfeld::protocol::Response_Hello* release_hello();
  ::blickfeld::protocol::Response_Hello* mutable_hello();
  void set_allocated_hello(::blickfeld::protocol::Response_Hello* hello);
  private:
  const ::blickfeld::protocol::Response_Hello& _internal_hello() const;
  ::blickfeld::protocol::Response_Hello* _internal_mutable_hello();
  public:
  void unsafe_arena_set_allocated_hello(
      ::blickfeld::protocol::Response_Hello* hello);
  ::blickfeld::protocol::Response_Hello* unsafe_arena_release_hello();

  // .blickfeld.protocol.Response.Developer developer = 13;
  bool has_developer() const;
  private:
  bool _internal_has_developer() const;
  public:
  void clear_developer();
  const ::blickfeld::protocol::Response_Developer& developer() const;
  ::blickfeld::protocol::Response_Developer* release_developer();
  ::blickfeld::protocol::Response_Developer* mutable_developer();
  void set_allocated_developer(::blickfeld::protocol::Response_Developer* developer);
  private:
  const ::blickfeld::protocol::Response_Developer& _internal_developer() const;
  ::blickfeld::protocol::Response_Developer* _internal_mutable_developer();
  public:
  void unsafe_arena_set_allocated_developer(
      ::blickfeld::protocol::Response_Developer* developer);
  ::blickfeld::protocol::Response_Developer* unsafe_arena_release_developer();

  // .blickfeld.protocol.Response.SetScanPattern set_scan_pattern = 15;
  bool has_set_scan_pattern() const;
  private:
  bool _internal_has_set_scan_pattern() const;
  public:
  void clear_set_scan_pattern();
  const ::blickfeld::protocol::Response_SetScanPattern& set_scan_pattern() const;
  ::blickfeld::protocol::Response_SetScanPattern* release_set_scan_pattern();
  ::blickfeld::protocol::Response_SetScanPattern* mutable_set_scan_pattern();
  void set_allocated_set_scan_pattern(::blickfeld::protocol::Response_SetScanPattern* set_scan_pattern);
  private:
  const ::blickfeld::protocol::Response_SetScanPattern& _internal_set_scan_pattern() const;
  ::blickfeld::protocol::Response_SetScanPattern* _internal_mutable_set_scan_pattern();
  public:
  void unsafe_arena_set_allocated_set_scan_pattern(
      ::blickfeld::protocol::Response_SetScanPattern* set_scan_pattern);
  ::blickfeld::protocol::Response_SetScanPattern* unsafe_arena_release_set_scan_pattern();

  // .blickfeld.protocol.Response.FillScanPattern fill_scan_pattern = 16;
  bool has_fill_scan_pattern() const;
  private:
  bool _internal_has_fill_scan_pattern() const;
  public:
  void clear_fill_scan_pattern();
  const ::blickfeld::protocol::Response_FillScanPattern& fill_scan_pattern() const;
  ::blickfeld::protocol::Response_FillScanPattern* release_fill_scan_pattern();
  ::blickfeld::protocol::Response_FillScanPattern* mutable_fill_scan_pattern();
  void set_allocated_fill_scan_pattern(::blickfeld::protocol::Response_FillScanPattern* fill_scan_pattern);
  private:
  const ::blickfeld::protocol::Response_FillScanPattern& _internal_fill_scan_pattern() const;
  ::blickfeld::protocol::Response_FillScanPattern* _internal_mutable_fill_scan_pattern();
  public:
  void unsafe_arena_set_allocated_fill_scan_pattern(
      ::blickfeld::protocol::Response_FillScanPattern* fill_scan_pattern);
  ::blickfeld::protocol::Response_FillScanPattern* unsafe_arena_release_fill_scan_pattern();

  // .blickfeld.protocol.Response.GetScanPattern get_scan_pattern = 17;
  bool has_get_scan_pattern() const;
  private:
  bool _internal_has_get_scan_pattern() const;
  public:
  void clear_get_scan_pattern();
  const ::blickfeld::protocol::Response_GetScanPattern& get_scan_pattern() const;
  ::blickfeld::protocol::Response_GetScanPattern* release_get_scan_pattern();
  ::blickfeld::protocol::Response_GetScanPattern* mutable_get_scan_pattern();
  void set_allocated_get_scan_pattern(::blickfeld::protocol::Response_GetScanPattern* get_scan_pattern);
  private:
  const ::blickfeld::protocol::Response_GetScanPattern& _internal_get_scan_pattern() const;
  ::blickfeld::protocol::Response_GetScanPattern* _internal_mutable_get_scan_pattern();
  public:
  void unsafe_arena_set_allocated_get_scan_pattern(
      ::blickfeld::protocol::Response_GetScanPattern* get_scan_pattern);
  ::blickfeld::protocol::Response_GetScanPattern* unsafe_arena_release_get_scan_pattern();

  // .blickfeld.protocol.stream.Event event = 18;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::blickfeld::protocol::stream::Event& event() const;
  ::blickfeld::protocol::stream::Event* release_event();
  ::blickfeld::protocol::stream::Event* mutable_event();
  void set_allocated_event(::blickfeld::protocol::stream::Event* event);
  private:
  const ::blickfeld::protocol::stream::Event& _internal_event() const;
  ::blickfeld::protocol::stream::Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::blickfeld::protocol::stream::Event* event);
  ::blickfeld::protocol::stream::Event* unsafe_arena_release_event();

  // .blickfeld.protocol.Status status = 19;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::blickfeld::protocol::Status& status() const;
  ::blickfeld::protocol::Status* release_status();
  ::blickfeld::protocol::Status* mutable_status();
  void set_allocated_status(::blickfeld::protocol::Status* status);
  private:
  const ::blickfeld::protocol::Status& _internal_status() const;
  ::blickfeld::protocol::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::blickfeld::protocol::Status* status);
  ::blickfeld::protocol::Status* unsafe_arena_release_status();

  // .blickfeld.protocol.Response.RunSelfTest run_self_test = 20;
  bool has_run_self_test() const;
  private:
  bool _internal_has_run_self_test() const;
  public:
  void clear_run_self_test();
  const ::blickfeld::protocol::Response_RunSelfTest& run_self_test() const;
  ::blickfeld::protocol::Response_RunSelfTest* release_run_self_test();
  ::blickfeld::protocol::Response_RunSelfTest* mutable_run_self_test();
  void set_allocated_run_self_test(::blickfeld::protocol::Response_RunSelfTest* run_self_test);
  private:
  const ::blickfeld::protocol::Response_RunSelfTest& _internal_run_self_test() const;
  ::blickfeld::protocol::Response_RunSelfTest* _internal_mutable_run_self_test();
  public:
  void unsafe_arena_set_allocated_run_self_test(
      ::blickfeld::protocol::Response_RunSelfTest* run_self_test);
  ::blickfeld::protocol::Response_RunSelfTest* unsafe_arena_release_run_self_test();

  // .blickfeld.protocol.Response.SetAdvancedConfig set_advanced_config = 21;
  bool has_set_advanced_config() const;
  private:
  bool _internal_has_set_advanced_config() const;
  public:
  void clear_set_advanced_config();
  const ::blickfeld::protocol::Response_SetAdvancedConfig& set_advanced_config() const;
  ::blickfeld::protocol::Response_SetAdvancedConfig* release_set_advanced_config();
  ::blickfeld::protocol::Response_SetAdvancedConfig* mutable_set_advanced_config();
  void set_allocated_set_advanced_config(::blickfeld::protocol::Response_SetAdvancedConfig* set_advanced_config);
  private:
  const ::blickfeld::protocol::Response_SetAdvancedConfig& _internal_set_advanced_config() const;
  ::blickfeld::protocol::Response_SetAdvancedConfig* _internal_mutable_set_advanced_config();
  public:
  void unsafe_arena_set_allocated_set_advanced_config(
      ::blickfeld::protocol::Response_SetAdvancedConfig* set_advanced_config);
  ::blickfeld::protocol::Response_SetAdvancedConfig* unsafe_arena_release_set_advanced_config();

  // .blickfeld.protocol.Response.GetAdvancedConfig get_advanced_config = 22;
  bool has_get_advanced_config() const;
  private:
  bool _internal_has_get_advanced_config() const;
  public:
  void clear_get_advanced_config();
  const ::blickfeld::protocol::Response_GetAdvancedConfig& get_advanced_config() const;
  ::blickfeld::protocol::Response_GetAdvancedConfig* release_get_advanced_config();
  ::blickfeld::protocol::Response_GetAdvancedConfig* mutable_get_advanced_config();
  void set_allocated_get_advanced_config(::blickfeld::protocol::Response_GetAdvancedConfig* get_advanced_config);
  private:
  const ::blickfeld::protocol::Response_GetAdvancedConfig& _internal_get_advanced_config() const;
  ::blickfeld::protocol::Response_GetAdvancedConfig* _internal_mutable_get_advanced_config();
  public:
  void unsafe_arena_set_allocated_get_advanced_config(
      ::blickfeld::protocol::Response_GetAdvancedConfig* get_advanced_config);
  ::blickfeld::protocol::Response_GetAdvancedConfig* unsafe_arena_release_get_advanced_config();

  // .blickfeld.protocol.Response.AttemptErrorRecovery attempt_error_recovery = 24;
  bool has_attempt_error_recovery() const;
  private:
  bool _internal_has_attempt_error_recovery() const;
  public:
  void clear_attempt_error_recovery();
  const ::blickfeld::protocol::Response_AttemptErrorRecovery& attempt_error_recovery() const;
  ::blickfeld::protocol::Response_AttemptErrorRecovery* release_attempt_error_recovery();
  ::blickfeld::protocol::Response_AttemptErrorRecovery* mutable_attempt_error_recovery();
  void set_allocated_attempt_error_recovery(::blickfeld::protocol::Response_AttemptErrorRecovery* attempt_error_recovery);
  private:
  const ::blickfeld::protocol::Response_AttemptErrorRecovery& _internal_attempt_error_recovery() const;
  ::blickfeld::protocol::Response_AttemptErrorRecovery* _internal_mutable_attempt_error_recovery();
  public:
  void unsafe_arena_set_allocated_attempt_error_recovery(
      ::blickfeld::protocol::Response_AttemptErrorRecovery* attempt_error_recovery);
  ::blickfeld::protocol::Response_AttemptErrorRecovery* unsafe_arena_release_attempt_error_recovery();

  // .blickfeld.protocol.Response.GetScanPatternConstraints get_scan_pattern_constraints = 25;
  bool has_get_scan_pattern_constraints() const;
  private:
  bool _internal_has_get_scan_pattern_constraints() const;
  public:
  void clear_get_scan_pattern_constraints();
  const ::blickfeld::protocol::Response_GetScanPatternConstraints& get_scan_pattern_constraints() const;
  ::blickfeld::protocol::Response_GetScanPatternConstraints* release_get_scan_pattern_constraints();
  ::blickfeld::protocol::Response_GetScanPatternConstraints* mutable_get_scan_pattern_constraints();
  void set_allocated_get_scan_pattern_constraints(::blickfeld::protocol::Response_GetScanPatternConstraints* get_scan_pattern_constraints);
  private:
  const ::blickfeld::protocol::Response_GetScanPatternConstraints& _internal_get_scan_pattern_constraints() const;
  ::blickfeld::protocol::Response_GetScanPatternConstraints* _internal_mutable_get_scan_pattern_constraints();
  public:
  void unsafe_arena_set_allocated_get_scan_pattern_constraints(
      ::blickfeld::protocol::Response_GetScanPatternConstraints* get_scan_pattern_constraints);
  ::blickfeld::protocol::Response_GetScanPatternConstraints* unsafe_arena_release_get_scan_pattern_constraints();

  // .blickfeld.protocol.Response.GetNamedScanPatterns get_named_scan_patterns = 26;
  bool has_get_named_scan_patterns() const;
  private:
  bool _internal_has_get_named_scan_patterns() const;
  public:
  void clear_get_named_scan_patterns();
  const ::blickfeld::protocol::Response_GetNamedScanPatterns& get_named_scan_patterns() const;
  ::blickfeld::protocol::Response_GetNamedScanPatterns* release_get_named_scan_patterns();
  ::blickfeld::protocol::Response_GetNamedScanPatterns* mutable_get_named_scan_patterns();
  void set_allocated_get_named_scan_patterns(::blickfeld::protocol::Response_GetNamedScanPatterns* get_named_scan_patterns);
  private:
  const ::blickfeld::protocol::Response_GetNamedScanPatterns& _internal_get_named_scan_patterns() const;
  ::blickfeld::protocol::Response_GetNamedScanPatterns* _internal_mutable_get_named_scan_patterns();
  public:
  void unsafe_arena_set_allocated_get_named_scan_patterns(
      ::blickfeld::protocol::Response_GetNamedScanPatterns* get_named_scan_patterns);
  ::blickfeld::protocol::Response_GetNamedScanPatterns* unsafe_arena_release_get_named_scan_patterns();

  // .blickfeld.protocol.Response.StoreNamedScanPattern store_named_scan_pattern = 27;
  bool has_store_named_scan_pattern() const;
  private:
  bool _internal_has_store_named_scan_pattern() const;
  public:
  void clear_store_named_scan_pattern();
  const ::blickfeld::protocol::Response_StoreNamedScanPattern& store_named_scan_pattern() const;
  ::blickfeld::protocol::Response_StoreNamedScanPattern* release_store_named_scan_pattern();
  ::blickfeld::protocol::Response_StoreNamedScanPattern* mutable_store_named_scan_pattern();
  void set_allocated_store_named_scan_pattern(::blickfeld::protocol::Response_StoreNamedScanPattern* store_named_scan_pattern);
  private:
  const ::blickfeld::protocol::Response_StoreNamedScanPattern& _internal_store_named_scan_pattern() const;
  ::blickfeld::protocol::Response_StoreNamedScanPattern* _internal_mutable_store_named_scan_pattern();
  public:
  void unsafe_arena_set_allocated_store_named_scan_pattern(
      ::blickfeld::protocol::Response_StoreNamedScanPattern* store_named_scan_pattern);
  ::blickfeld::protocol::Response_StoreNamedScanPattern* unsafe_arena_release_store_named_scan_pattern();

  // .blickfeld.protocol.Response.DeleteNamedScanPattern delete_named_scan_pattern = 28;
  bool has_delete_named_scan_pattern() const;
  private:
  bool _internal_has_delete_named_scan_pattern() const;
  public:
  void clear_delete_named_scan_pattern();
  const ::blickfeld::protocol::Response_DeleteNamedScanPattern& delete_named_scan_pattern() const;
  ::blickfeld::protocol::Response_DeleteNamedScanPattern* release_delete_named_scan_pattern();
  ::blickfeld::protocol::Response_DeleteNamedScanPattern* mutable_delete_named_scan_pattern();
  void set_allocated_delete_named_scan_pattern(::blickfeld::protocol::Response_DeleteNamedScanPattern* delete_named_scan_pattern);
  private:
  const ::blickfeld::protocol::Response_DeleteNamedScanPattern& _internal_delete_named_scan_pattern() const;
  ::blickfeld::protocol::Response_DeleteNamedScanPattern* _internal_mutable_delete_named_scan_pattern();
  public:
  void unsafe_arena_set_allocated_delete_named_scan_pattern(
      ::blickfeld::protocol::Response_DeleteNamedScanPattern* delete_named_scan_pattern);
  ::blickfeld::protocol::Response_DeleteNamedScanPattern* unsafe_arena_release_delete_named_scan_pattern();

  // .blickfeld.protocol.Response.ProxyHello proxy_hello = 29;
  bool has_proxy_hello() const;
  private:
  bool _internal_has_proxy_hello() const;
  public:
  void clear_proxy_hello();
  const ::blickfeld::protocol::Response_ProxyHello& proxy_hello() const;
  ::blickfeld::protocol::Response_ProxyHello* release_proxy_hello();
  ::blickfeld::protocol::Response_ProxyHello* mutable_proxy_hello();
  void set_allocated_proxy_hello(::blickfeld::protocol::Response_ProxyHello* proxy_hello);
  private:
  const ::blickfeld::protocol::Response_ProxyHello& _internal_proxy_hello() const;
  ::blickfeld::protocol::Response_ProxyHello* _internal_mutable_proxy_hello();
  public:
  void unsafe_arena_set_allocated_proxy_hello(
      ::blickfeld::protocol::Response_ProxyHello* proxy_hello);
  ::blickfeld::protocol::Response_ProxyHello* unsafe_arena_release_proxy_hello();

  // string _asJSON = 100;
  bool has__asjson() const;
  private:
  bool _internal_has__asjson() const;
  public:
  void clear__asjson();
  const std::string& _asjson() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__asjson(ArgT0&& arg0, ArgT... args);
  std::string* mutable__asjson();
  std::string* release__asjson();
  void set_allocated__asjson(std::string* _asjson);
  private:
  const std::string& _internal__asjson() const;
  void _internal_set__asjson(const std::string& value);
  std::string* _internal_mutable__asjson();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:blickfeld.protocol.Response)
 private:
  class _Internal;
  void set_has_error();
  void set_has_hello();
  void set_has_developer();
  void set_has_set_scan_pattern();
  void set_has_fill_scan_pattern();
  void set_has_get_scan_pattern();
  void set_has_event();
  void set_has_status();
  void set_has_run_self_test();
  void set_has_set_advanced_config();
  void set_has_get_advanced_config();
  void set_has_attempt_error_recovery();
  void set_has_get_scan_pattern_constraints();
  void set_has_get_named_scan_patterns();
  void set_has_store_named_scan_pattern();
  void set_has_delete_named_scan_pattern();
  void set_has_proxy_hello();
  void set_has__asjson();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ns_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::blickfeld::protocol::Error* error_;
    ::blickfeld::protocol::Response_Hello* hello_;
    ::blickfeld::protocol::Response_Developer* developer_;
    ::blickfeld::protocol::Response_SetScanPattern* set_scan_pattern_;
    ::blickfeld::protocol::Response_FillScanPattern* fill_scan_pattern_;
    ::blickfeld::protocol::Response_GetScanPattern* get_scan_pattern_;
    ::blickfeld::protocol::stream::Event* event_;
    ::blickfeld::protocol::Status* status_;
    ::blickfeld::protocol::Response_RunSelfTest* run_self_test_;
    ::blickfeld::protocol::Response_SetAdvancedConfig* set_advanced_config_;
    ::blickfeld::protocol::Response_GetAdvancedConfig* get_advanced_config_;
    ::blickfeld::protocol::Response_AttemptErrorRecovery* attempt_error_recovery_;
    ::blickfeld::protocol::Response_GetScanPatternConstraints* get_scan_pattern_constraints_;
    ::blickfeld::protocol::Response_GetNamedScanPatterns* get_named_scan_patterns_;
    ::blickfeld::protocol::Response_StoreNamedScanPattern* store_named_scan_pattern_;
    ::blickfeld::protocol::Response_DeleteNamedScanPattern* delete_named_scan_pattern_;
    ::blickfeld::protocol::Response_ProxyHello* proxy_hello_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _asjson_;
  } data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blickfeld_2fconnection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request_Hello

// optional uint32 protocol_version = 1;
inline bool Request_Hello::_internal_has_protocol_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_Hello::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void Request_Hello::clear_protocol_version() {
  protocol_version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_Hello::_internal_protocol_version() const {
  return protocol_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Request_Hello::protocol_version() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.Hello.protocol_version)
  return _internal_protocol_version();
}
inline void Request_Hello::_internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  protocol_version_ = value;
}
inline void Request_Hello::set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Request.Hello.protocol_version)
}

// optional string library_version = 2 [(.blickfeld.protocol.regex) = "[0-9]+\\.[0-9]+\\.[0-9]+[[:alnum:]\\.\\+\\-]*", (.blickfeld.protocol.optional) = true];
inline bool Request_Hello::_internal_has_library_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_Hello::has_library_version() const {
  return _internal_has_library_version();
}
inline void Request_Hello::clear_library_version() {
  library_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_Hello::library_version() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.Hello.library_version)
  return _internal_library_version();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Request_Hello::set_library_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 library_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Request.Hello.library_version)
}
inline std::string* Request_Hello::mutable_library_version() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.Hello.library_version)
  return _internal_mutable_library_version();
}
inline const std::string& Request_Hello::_internal_library_version() const {
  return library_version_.Get();
}
inline void Request_Hello::_internal_set_library_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  library_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Request_Hello::_internal_mutable_library_version() {
  _has_bits_[0] |= 0x00000001u;
  return library_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request_Hello::release_library_version() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.Hello.library_version)
  if (!_internal_has_library_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return library_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_Hello::set_allocated_library_version(std::string* library_version) {
  if (library_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  library_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), library_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Request.Hello.library_version)
}

// optional .blickfeld.protocol.Language language = 3 [(.blickfeld.protocol.optional) = true];
inline bool Request_Hello::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request_Hello::has_language() const {
  return _internal_has_language();
}
inline void Request_Hello::clear_language() {
  language_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::blickfeld::protocol::Language Request_Hello::_internal_language() const {
  return static_cast< ::blickfeld::protocol::Language >(language_);
}
inline ::blickfeld::protocol::Language Request_Hello::language() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.Hello.language)
  return _internal_language();
}
inline void Request_Hello::_internal_set_language(::blickfeld::protocol::Language value) {
  assert(::blickfeld::protocol::Language_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  language_ = value;
}
inline void Request_Hello::set_language(::blickfeld::protocol::Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Request.Hello.language)
}

// -------------------------------------------------------------------

// Request_ProxyHello

// optional string ip_address = 1 [(.blickfeld.protocol.regex) = "([0-9]{1,3}\\.){3}[0-9]{1,3}"];
inline bool Request_ProxyHello::_internal_has_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_ProxyHello::has_ip_address() const {
  return _internal_has_ip_address();
}
inline void Request_ProxyHello::clear_ip_address() {
  ip_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_ProxyHello::ip_address() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.ProxyHello.ip_address)
  return _internal_ip_address();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Request_ProxyHello::set_ip_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Request.ProxyHello.ip_address)
}
inline std::string* Request_ProxyHello::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.ProxyHello.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& Request_ProxyHello::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void Request_ProxyHello::_internal_set_ip_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Request_ProxyHello::_internal_mutable_ip_address() {
  _has_bits_[0] |= 0x00000001u;
  return ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request_ProxyHello::release_ip_address() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.ProxyHello.ip_address)
  if (!_internal_has_ip_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_ProxyHello::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Request.ProxyHello.ip_address)
}

// -------------------------------------------------------------------

// Request_Developer

// -------------------------------------------------------------------

// Request_SetScanPattern

// .blickfeld.protocol.config.ScanPattern config = 3;
inline bool Request_SetScanPattern::_internal_has_config() const {
  return data_case() == kConfig;
}
inline bool Request_SetScanPattern::has_config() const {
  return _internal_has_config();
}
inline void Request_SetScanPattern::set_has_config() {
  _oneof_case_[0] = kConfig;
}
inline ::blickfeld::protocol::config::ScanPattern* Request_SetScanPattern::release_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.SetScanPattern.config)
  if (_internal_has_config()) {
    clear_has_data();
      ::blickfeld::protocol::config::ScanPattern* temp = data_.config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::config::ScanPattern& Request_SetScanPattern::_internal_config() const {
  return _internal_has_config()
      ? *data_.config_
      : reinterpret_cast< ::blickfeld::protocol::config::ScanPattern&>(::blickfeld::protocol::config::_ScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern& Request_SetScanPattern::config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.SetScanPattern.config)
  return _internal_config();
}
inline ::blickfeld::protocol::config::ScanPattern* Request_SetScanPattern::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.SetScanPattern.config)
  if (_internal_has_config()) {
    clear_has_data();
    ::blickfeld::protocol::config::ScanPattern* temp = data_.config_;
    data_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request_SetScanPattern::unsafe_arena_set_allocated_config(::blickfeld::protocol::config::ScanPattern* config) {
  clear_data();
  if (config) {
    set_has_config();
    data_.config_ = config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.SetScanPattern.config)
}
inline ::blickfeld::protocol::config::ScanPattern* Request_SetScanPattern::_internal_mutable_config() {
  if (!_internal_has_config()) {
    clear_data();
    set_has_config();
    data_.config_ = CreateMaybeMessage< ::blickfeld::protocol::config::ScanPattern >(GetArena());
  }
  return data_.config_;
}
inline ::blickfeld::protocol::config::ScanPattern* Request_SetScanPattern::mutable_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.SetScanPattern.config)
  return _internal_mutable_config();
}

// string name = 4 [(.blickfeld.protocol.regex) = "[a-zA-Z0-9]([a-zA-Z0-9]|[_ \\-][a-zA-Z0-9])*"];
inline bool Request_SetScanPattern::_internal_has_name() const {
  return data_case() == kName;
}
inline bool Request_SetScanPattern::has_name() const {
  return _internal_has_name();
}
inline void Request_SetScanPattern::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void Request_SetScanPattern::clear_name() {
  if (_internal_has_name()) {
    data_.name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& Request_SetScanPattern::name() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.SetScanPattern.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void Request_SetScanPattern::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_data();
    set_has_name();
    data_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Request.SetScanPattern.name)
}
inline std::string* Request_SetScanPattern::mutable_name() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.SetScanPattern.name)
  return _internal_mutable_name();
}
inline const std::string& Request_SetScanPattern::_internal_name() const {
  if (_internal_has_name()) {
    return data_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Request_SetScanPattern::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_data();
    set_has_name();
    data_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Request_SetScanPattern::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_data();
    set_has_name();
    data_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.name_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request_SetScanPattern::release_name() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.SetScanPattern.name)
  if (_internal_has_name()) {
    clear_has_data();
    return data_.name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Request_SetScanPattern::set_allocated_name(std::string* name) {
  if (has_data()) {
    clear_data();
  }
  if (name != nullptr) {
    set_has_name();
    data_.name_.UnsafeSetDefault(name);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(name);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Request.SetScanPattern.name)
}

// optional bool persist = 2 [default = false];
inline bool Request_SetScanPattern::_internal_has_persist() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_SetScanPattern::has_persist() const {
  return _internal_has_persist();
}
inline void Request_SetScanPattern::clear_persist() {
  persist_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Request_SetScanPattern::_internal_persist() const {
  return persist_;
}
inline bool Request_SetScanPattern::persist() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.SetScanPattern.persist)
  return _internal_persist();
}
inline void Request_SetScanPattern::_internal_set_persist(bool value) {
  _has_bits_[0] |= 0x00000001u;
  persist_ = value;
}
inline void Request_SetScanPattern::set_persist(bool value) {
  _internal_set_persist(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Request.SetScanPattern.persist)
}

inline bool Request_SetScanPattern::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Request_SetScanPattern::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Request_SetScanPattern::DataCase Request_SetScanPattern::data_case() const {
  return Request_SetScanPattern::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Request_FillScanPattern

// optional .blickfeld.protocol.config.ScanPattern config = 2 [(.blickfeld.protocol.allow_sparse) = true];
inline bool Request_FillScanPattern::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || config_ != nullptr);
  return value;
}
inline bool Request_FillScanPattern::has_config() const {
  return _internal_has_config();
}
inline const ::blickfeld::protocol::config::ScanPattern& Request_FillScanPattern::_internal_config() const {
  const ::blickfeld::protocol::config::ScanPattern* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern&>(
      ::blickfeld::protocol::config::_ScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern& Request_FillScanPattern::config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.FillScanPattern.config)
  return _internal_config();
}
inline void Request_FillScanPattern::unsafe_arena_set_allocated_config(
    ::blickfeld::protocol::config::ScanPattern* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.FillScanPattern.config)
}
inline ::blickfeld::protocol::config::ScanPattern* Request_FillScanPattern::release_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Request_FillScanPattern::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.FillScanPattern.config)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Request_FillScanPattern::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::blickfeld::protocol::config::ScanPattern* Request_FillScanPattern::mutable_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.FillScanPattern.config)
  return _internal_mutable_config();
}
inline void Request_FillScanPattern::set_allocated_config(::blickfeld::protocol::config::ScanPattern* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Request.FillScanPattern.config)
}

// -------------------------------------------------------------------

// Request_GetScanPattern

// -------------------------------------------------------------------

// Request_Status

// -------------------------------------------------------------------

// Request_RunSelfTest

// -------------------------------------------------------------------

// Request_SetAdvancedConfig

// optional .blickfeld.protocol.config.Advanced config = 1;
inline bool Request_SetAdvancedConfig::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || config_ != nullptr);
  return value;
}
inline bool Request_SetAdvancedConfig::has_config() const {
  return _internal_has_config();
}
inline const ::blickfeld::protocol::config::Advanced& Request_SetAdvancedConfig::_internal_config() const {
  const ::blickfeld::protocol::config::Advanced* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::Advanced&>(
      ::blickfeld::protocol::config::_Advanced_default_instance_);
}
inline const ::blickfeld::protocol::config::Advanced& Request_SetAdvancedConfig::config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.SetAdvancedConfig.config)
  return _internal_config();
}
inline void Request_SetAdvancedConfig::unsafe_arena_set_allocated_config(
    ::blickfeld::protocol::config::Advanced* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.SetAdvancedConfig.config)
}
inline ::blickfeld::protocol::config::Advanced* Request_SetAdvancedConfig::release_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::Advanced* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::Advanced* Request_SetAdvancedConfig::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.SetAdvancedConfig.config)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::Advanced* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::Advanced* Request_SetAdvancedConfig::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::Advanced>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::blickfeld::protocol::config::Advanced* Request_SetAdvancedConfig::mutable_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.SetAdvancedConfig.config)
  return _internal_mutable_config();
}
inline void Request_SetAdvancedConfig::set_allocated_config(::blickfeld::protocol::config::Advanced* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Request.SetAdvancedConfig.config)
}

// optional bool persist = 2 [default = true];
inline bool Request_SetAdvancedConfig::_internal_has_persist() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_SetAdvancedConfig::has_persist() const {
  return _internal_has_persist();
}
inline void Request_SetAdvancedConfig::clear_persist() {
  persist_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Request_SetAdvancedConfig::_internal_persist() const {
  return persist_;
}
inline bool Request_SetAdvancedConfig::persist() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.SetAdvancedConfig.persist)
  return _internal_persist();
}
inline void Request_SetAdvancedConfig::_internal_set_persist(bool value) {
  _has_bits_[0] |= 0x00000002u;
  persist_ = value;
}
inline void Request_SetAdvancedConfig::set_persist(bool value) {
  _internal_set_persist(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Request.SetAdvancedConfig.persist)
}

// -------------------------------------------------------------------

// Request_GetAdvancedConfig

// -------------------------------------------------------------------

// Request_AttemptErrorRecovery

// -------------------------------------------------------------------

// Request_GetScanPatternConstraints

// -------------------------------------------------------------------

// Request_GetNamedScanPatterns

// -------------------------------------------------------------------

// Request_StoreNamedScanPattern

// optional string name = 1 [(.blickfeld.protocol.regex) = "[a-zA-Z0-9]([a-zA-Z0-9]|[_ \\-][a-zA-Z0-9])*"];
inline bool Request_StoreNamedScanPattern::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_StoreNamedScanPattern::has_name() const {
  return _internal_has_name();
}
inline void Request_StoreNamedScanPattern::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_StoreNamedScanPattern::name() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.StoreNamedScanPattern.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Request_StoreNamedScanPattern::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Request.StoreNamedScanPattern.name)
}
inline std::string* Request_StoreNamedScanPattern::mutable_name() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.StoreNamedScanPattern.name)
  return _internal_mutable_name();
}
inline const std::string& Request_StoreNamedScanPattern::_internal_name() const {
  return name_.Get();
}
inline void Request_StoreNamedScanPattern::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Request_StoreNamedScanPattern::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request_StoreNamedScanPattern::release_name() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.StoreNamedScanPattern.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_StoreNamedScanPattern::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Request.StoreNamedScanPattern.name)
}

// optional .blickfeld.protocol.config.ScanPattern config = 2 [(.blickfeld.protocol.allow_sparse) = true];
inline bool Request_StoreNamedScanPattern::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || config_ != nullptr);
  return value;
}
inline bool Request_StoreNamedScanPattern::has_config() const {
  return _internal_has_config();
}
inline const ::blickfeld::protocol::config::ScanPattern& Request_StoreNamedScanPattern::_internal_config() const {
  const ::blickfeld::protocol::config::ScanPattern* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern&>(
      ::blickfeld::protocol::config::_ScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern& Request_StoreNamedScanPattern::config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.StoreNamedScanPattern.config)
  return _internal_config();
}
inline void Request_StoreNamedScanPattern::unsafe_arena_set_allocated_config(
    ::blickfeld::protocol::config::ScanPattern* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.StoreNamedScanPattern.config)
}
inline ::blickfeld::protocol::config::ScanPattern* Request_StoreNamedScanPattern::release_config() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::ScanPattern* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Request_StoreNamedScanPattern::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.StoreNamedScanPattern.config)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::config::ScanPattern* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Request_StoreNamedScanPattern::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000002u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::blickfeld::protocol::config::ScanPattern* Request_StoreNamedScanPattern::mutable_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.StoreNamedScanPattern.config)
  return _internal_mutable_config();
}
inline void Request_StoreNamedScanPattern::set_allocated_config(::blickfeld::protocol::config::ScanPattern* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Request.StoreNamedScanPattern.config)
}

// -------------------------------------------------------------------

// Request_DeleteNamedScanPattern

// optional string name = 1 [(.blickfeld.protocol.regex) = "[a-zA-Z0-9]([a-zA-Z0-9]|[_ \\-][a-zA-Z0-9])*"];
inline bool Request_DeleteNamedScanPattern::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_DeleteNamedScanPattern::has_name() const {
  return _internal_has_name();
}
inline void Request_DeleteNamedScanPattern::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_DeleteNamedScanPattern::name() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.DeleteNamedScanPattern.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Request_DeleteNamedScanPattern::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Request.DeleteNamedScanPattern.name)
}
inline std::string* Request_DeleteNamedScanPattern::mutable_name() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.DeleteNamedScanPattern.name)
  return _internal_mutable_name();
}
inline const std::string& Request_DeleteNamedScanPattern::_internal_name() const {
  return name_.Get();
}
inline void Request_DeleteNamedScanPattern::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Request_DeleteNamedScanPattern::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request_DeleteNamedScanPattern::release_name() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.DeleteNamedScanPattern.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_DeleteNamedScanPattern::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Request.DeleteNamedScanPattern.name)
}

// -------------------------------------------------------------------

// Request

// .blickfeld.protocol.Request.Hello hello = 11;
inline bool Request::_internal_has_hello() const {
  return data_case() == kHello;
}
inline bool Request::has_hello() const {
  return _internal_has_hello();
}
inline void Request::set_has_hello() {
  _oneof_case_[0] = kHello;
}
inline void Request::clear_hello() {
  if (_internal_has_hello()) {
    if (GetArena() == nullptr) {
      delete data_.hello_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_Hello* Request::release_hello() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.hello)
  if (_internal_has_hello()) {
    clear_has_data();
      ::blickfeld::protocol::Request_Hello* temp = data_.hello_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.hello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_Hello& Request::_internal_hello() const {
  return _internal_has_hello()
      ? *data_.hello_
      : reinterpret_cast< ::blickfeld::protocol::Request_Hello&>(::blickfeld::protocol::_Request_Hello_default_instance_);
}
inline const ::blickfeld::protocol::Request_Hello& Request::hello() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.hello)
  return _internal_hello();
}
inline ::blickfeld::protocol::Request_Hello* Request::unsafe_arena_release_hello() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.hello)
  if (_internal_has_hello()) {
    clear_has_data();
    ::blickfeld::protocol::Request_Hello* temp = data_.hello_;
    data_.hello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_hello(::blickfeld::protocol::Request_Hello* hello) {
  clear_data();
  if (hello) {
    set_has_hello();
    data_.hello_ = hello;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.hello)
}
inline ::blickfeld::protocol::Request_Hello* Request::_internal_mutable_hello() {
  if (!_internal_has_hello()) {
    clear_data();
    set_has_hello();
    data_.hello_ = CreateMaybeMessage< ::blickfeld::protocol::Request_Hello >(GetArena());
  }
  return data_.hello_;
}
inline ::blickfeld::protocol::Request_Hello* Request::mutable_hello() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.hello)
  return _internal_mutable_hello();
}

// .blickfeld.protocol.Request.Developer developer = 13;
inline bool Request::_internal_has_developer() const {
  return data_case() == kDeveloper;
}
inline bool Request::has_developer() const {
  return _internal_has_developer();
}
inline void Request::set_has_developer() {
  _oneof_case_[0] = kDeveloper;
}
inline void Request::clear_developer() {
  if (_internal_has_developer()) {
    if (GetArena() == nullptr) {
      delete data_.developer_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_Developer* Request::release_developer() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.developer)
  if (_internal_has_developer()) {
    clear_has_data();
      ::blickfeld::protocol::Request_Developer* temp = data_.developer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.developer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_Developer& Request::_internal_developer() const {
  return _internal_has_developer()
      ? *data_.developer_
      : reinterpret_cast< ::blickfeld::protocol::Request_Developer&>(::blickfeld::protocol::_Request_Developer_default_instance_);
}
inline const ::blickfeld::protocol::Request_Developer& Request::developer() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.developer)
  return _internal_developer();
}
inline ::blickfeld::protocol::Request_Developer* Request::unsafe_arena_release_developer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.developer)
  if (_internal_has_developer()) {
    clear_has_data();
    ::blickfeld::protocol::Request_Developer* temp = data_.developer_;
    data_.developer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_developer(::blickfeld::protocol::Request_Developer* developer) {
  clear_data();
  if (developer) {
    set_has_developer();
    data_.developer_ = developer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.developer)
}
inline ::blickfeld::protocol::Request_Developer* Request::_internal_mutable_developer() {
  if (!_internal_has_developer()) {
    clear_data();
    set_has_developer();
    data_.developer_ = CreateMaybeMessage< ::blickfeld::protocol::Request_Developer >(GetArena());
  }
  return data_.developer_;
}
inline ::blickfeld::protocol::Request_Developer* Request::mutable_developer() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.developer)
  return _internal_mutable_developer();
}

// .blickfeld.protocol.Request.SetScanPattern set_scan_pattern = 15;
inline bool Request::_internal_has_set_scan_pattern() const {
  return data_case() == kSetScanPattern;
}
inline bool Request::has_set_scan_pattern() const {
  return _internal_has_set_scan_pattern();
}
inline void Request::set_has_set_scan_pattern() {
  _oneof_case_[0] = kSetScanPattern;
}
inline void Request::clear_set_scan_pattern() {
  if (_internal_has_set_scan_pattern()) {
    if (GetArena() == nullptr) {
      delete data_.set_scan_pattern_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_SetScanPattern* Request::release_set_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.set_scan_pattern)
  if (_internal_has_set_scan_pattern()) {
    clear_has_data();
      ::blickfeld::protocol::Request_SetScanPattern* temp = data_.set_scan_pattern_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.set_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_SetScanPattern& Request::_internal_set_scan_pattern() const {
  return _internal_has_set_scan_pattern()
      ? *data_.set_scan_pattern_
      : reinterpret_cast< ::blickfeld::protocol::Request_SetScanPattern&>(::blickfeld::protocol::_Request_SetScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::Request_SetScanPattern& Request::set_scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.set_scan_pattern)
  return _internal_set_scan_pattern();
}
inline ::blickfeld::protocol::Request_SetScanPattern* Request::unsafe_arena_release_set_scan_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.set_scan_pattern)
  if (_internal_has_set_scan_pattern()) {
    clear_has_data();
    ::blickfeld::protocol::Request_SetScanPattern* temp = data_.set_scan_pattern_;
    data_.set_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_set_scan_pattern(::blickfeld::protocol::Request_SetScanPattern* set_scan_pattern) {
  clear_data();
  if (set_scan_pattern) {
    set_has_set_scan_pattern();
    data_.set_scan_pattern_ = set_scan_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.set_scan_pattern)
}
inline ::blickfeld::protocol::Request_SetScanPattern* Request::_internal_mutable_set_scan_pattern() {
  if (!_internal_has_set_scan_pattern()) {
    clear_data();
    set_has_set_scan_pattern();
    data_.set_scan_pattern_ = CreateMaybeMessage< ::blickfeld::protocol::Request_SetScanPattern >(GetArena());
  }
  return data_.set_scan_pattern_;
}
inline ::blickfeld::protocol::Request_SetScanPattern* Request::mutable_set_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.set_scan_pattern)
  return _internal_mutable_set_scan_pattern();
}

// .blickfeld.protocol.Request.FillScanPattern fill_scan_pattern = 16;
inline bool Request::_internal_has_fill_scan_pattern() const {
  return data_case() == kFillScanPattern;
}
inline bool Request::has_fill_scan_pattern() const {
  return _internal_has_fill_scan_pattern();
}
inline void Request::set_has_fill_scan_pattern() {
  _oneof_case_[0] = kFillScanPattern;
}
inline void Request::clear_fill_scan_pattern() {
  if (_internal_has_fill_scan_pattern()) {
    if (GetArena() == nullptr) {
      delete data_.fill_scan_pattern_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_FillScanPattern* Request::release_fill_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.fill_scan_pattern)
  if (_internal_has_fill_scan_pattern()) {
    clear_has_data();
      ::blickfeld::protocol::Request_FillScanPattern* temp = data_.fill_scan_pattern_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.fill_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_FillScanPattern& Request::_internal_fill_scan_pattern() const {
  return _internal_has_fill_scan_pattern()
      ? *data_.fill_scan_pattern_
      : reinterpret_cast< ::blickfeld::protocol::Request_FillScanPattern&>(::blickfeld::protocol::_Request_FillScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::Request_FillScanPattern& Request::fill_scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.fill_scan_pattern)
  return _internal_fill_scan_pattern();
}
inline ::blickfeld::protocol::Request_FillScanPattern* Request::unsafe_arena_release_fill_scan_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.fill_scan_pattern)
  if (_internal_has_fill_scan_pattern()) {
    clear_has_data();
    ::blickfeld::protocol::Request_FillScanPattern* temp = data_.fill_scan_pattern_;
    data_.fill_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_fill_scan_pattern(::blickfeld::protocol::Request_FillScanPattern* fill_scan_pattern) {
  clear_data();
  if (fill_scan_pattern) {
    set_has_fill_scan_pattern();
    data_.fill_scan_pattern_ = fill_scan_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.fill_scan_pattern)
}
inline ::blickfeld::protocol::Request_FillScanPattern* Request::_internal_mutable_fill_scan_pattern() {
  if (!_internal_has_fill_scan_pattern()) {
    clear_data();
    set_has_fill_scan_pattern();
    data_.fill_scan_pattern_ = CreateMaybeMessage< ::blickfeld::protocol::Request_FillScanPattern >(GetArena());
  }
  return data_.fill_scan_pattern_;
}
inline ::blickfeld::protocol::Request_FillScanPattern* Request::mutable_fill_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.fill_scan_pattern)
  return _internal_mutable_fill_scan_pattern();
}

// .blickfeld.protocol.Request.GetScanPattern get_scan_pattern = 17;
inline bool Request::_internal_has_get_scan_pattern() const {
  return data_case() == kGetScanPattern;
}
inline bool Request::has_get_scan_pattern() const {
  return _internal_has_get_scan_pattern();
}
inline void Request::set_has_get_scan_pattern() {
  _oneof_case_[0] = kGetScanPattern;
}
inline void Request::clear_get_scan_pattern() {
  if (_internal_has_get_scan_pattern()) {
    if (GetArena() == nullptr) {
      delete data_.get_scan_pattern_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_GetScanPattern* Request::release_get_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.get_scan_pattern)
  if (_internal_has_get_scan_pattern()) {
    clear_has_data();
      ::blickfeld::protocol::Request_GetScanPattern* temp = data_.get_scan_pattern_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.get_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_GetScanPattern& Request::_internal_get_scan_pattern() const {
  return _internal_has_get_scan_pattern()
      ? *data_.get_scan_pattern_
      : reinterpret_cast< ::blickfeld::protocol::Request_GetScanPattern&>(::blickfeld::protocol::_Request_GetScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::Request_GetScanPattern& Request::get_scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.get_scan_pattern)
  return _internal_get_scan_pattern();
}
inline ::blickfeld::protocol::Request_GetScanPattern* Request::unsafe_arena_release_get_scan_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.get_scan_pattern)
  if (_internal_has_get_scan_pattern()) {
    clear_has_data();
    ::blickfeld::protocol::Request_GetScanPattern* temp = data_.get_scan_pattern_;
    data_.get_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_scan_pattern(::blickfeld::protocol::Request_GetScanPattern* get_scan_pattern) {
  clear_data();
  if (get_scan_pattern) {
    set_has_get_scan_pattern();
    data_.get_scan_pattern_ = get_scan_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.get_scan_pattern)
}
inline ::blickfeld::protocol::Request_GetScanPattern* Request::_internal_mutable_get_scan_pattern() {
  if (!_internal_has_get_scan_pattern()) {
    clear_data();
    set_has_get_scan_pattern();
    data_.get_scan_pattern_ = CreateMaybeMessage< ::blickfeld::protocol::Request_GetScanPattern >(GetArena());
  }
  return data_.get_scan_pattern_;
}
inline ::blickfeld::protocol::Request_GetScanPattern* Request::mutable_get_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.get_scan_pattern)
  return _internal_mutable_get_scan_pattern();
}

// .blickfeld.protocol.stream.Subscribe subscribe = 18;
inline bool Request::_internal_has_subscribe() const {
  return data_case() == kSubscribe;
}
inline bool Request::has_subscribe() const {
  return _internal_has_subscribe();
}
inline void Request::set_has_subscribe() {
  _oneof_case_[0] = kSubscribe;
}
inline ::blickfeld::protocol::stream::Subscribe* Request::release_subscribe() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.subscribe)
  if (_internal_has_subscribe()) {
    clear_has_data();
      ::blickfeld::protocol::stream::Subscribe* temp = data_.subscribe_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.subscribe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::stream::Subscribe& Request::_internal_subscribe() const {
  return _internal_has_subscribe()
      ? *data_.subscribe_
      : reinterpret_cast< ::blickfeld::protocol::stream::Subscribe&>(::blickfeld::protocol::stream::_Subscribe_default_instance_);
}
inline const ::blickfeld::protocol::stream::Subscribe& Request::subscribe() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.subscribe)
  return _internal_subscribe();
}
inline ::blickfeld::protocol::stream::Subscribe* Request::unsafe_arena_release_subscribe() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.subscribe)
  if (_internal_has_subscribe()) {
    clear_has_data();
    ::blickfeld::protocol::stream::Subscribe* temp = data_.subscribe_;
    data_.subscribe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_subscribe(::blickfeld::protocol::stream::Subscribe* subscribe) {
  clear_data();
  if (subscribe) {
    set_has_subscribe();
    data_.subscribe_ = subscribe;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.subscribe)
}
inline ::blickfeld::protocol::stream::Subscribe* Request::_internal_mutable_subscribe() {
  if (!_internal_has_subscribe()) {
    clear_data();
    set_has_subscribe();
    data_.subscribe_ = CreateMaybeMessage< ::blickfeld::protocol::stream::Subscribe >(GetArena());
  }
  return data_.subscribe_;
}
inline ::blickfeld::protocol::stream::Subscribe* Request::mutable_subscribe() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.subscribe)
  return _internal_mutable_subscribe();
}

// .blickfeld.protocol.Request.Status status = 19;
inline bool Request::_internal_has_status() const {
  return data_case() == kStatus;
}
inline bool Request::has_status() const {
  return _internal_has_status();
}
inline void Request::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline void Request::clear_status() {
  if (_internal_has_status()) {
    if (GetArena() == nullptr) {
      delete data_.status_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_Status* Request::release_status() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.status)
  if (_internal_has_status()) {
    clear_has_data();
      ::blickfeld::protocol::Request_Status* temp = data_.status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_Status& Request::_internal_status() const {
  return _internal_has_status()
      ? *data_.status_
      : reinterpret_cast< ::blickfeld::protocol::Request_Status&>(::blickfeld::protocol::_Request_Status_default_instance_);
}
inline const ::blickfeld::protocol::Request_Status& Request::status() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.status)
  return _internal_status();
}
inline ::blickfeld::protocol::Request_Status* Request::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.status)
  if (_internal_has_status()) {
    clear_has_data();
    ::blickfeld::protocol::Request_Status* temp = data_.status_;
    data_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_status(::blickfeld::protocol::Request_Status* status) {
  clear_data();
  if (status) {
    set_has_status();
    data_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.status)
}
inline ::blickfeld::protocol::Request_Status* Request::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_data();
    set_has_status();
    data_.status_ = CreateMaybeMessage< ::blickfeld::protocol::Request_Status >(GetArena());
  }
  return data_.status_;
}
inline ::blickfeld::protocol::Request_Status* Request::mutable_status() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.status)
  return _internal_mutable_status();
}

// .blickfeld.protocol.Request.RunSelfTest run_self_test = 20;
inline bool Request::_internal_has_run_self_test() const {
  return data_case() == kRunSelfTest;
}
inline bool Request::has_run_self_test() const {
  return _internal_has_run_self_test();
}
inline void Request::set_has_run_self_test() {
  _oneof_case_[0] = kRunSelfTest;
}
inline void Request::clear_run_self_test() {
  if (_internal_has_run_self_test()) {
    if (GetArena() == nullptr) {
      delete data_.run_self_test_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_RunSelfTest* Request::release_run_self_test() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.run_self_test)
  if (_internal_has_run_self_test()) {
    clear_has_data();
      ::blickfeld::protocol::Request_RunSelfTest* temp = data_.run_self_test_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.run_self_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_RunSelfTest& Request::_internal_run_self_test() const {
  return _internal_has_run_self_test()
      ? *data_.run_self_test_
      : reinterpret_cast< ::blickfeld::protocol::Request_RunSelfTest&>(::blickfeld::protocol::_Request_RunSelfTest_default_instance_);
}
inline const ::blickfeld::protocol::Request_RunSelfTest& Request::run_self_test() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.run_self_test)
  return _internal_run_self_test();
}
inline ::blickfeld::protocol::Request_RunSelfTest* Request::unsafe_arena_release_run_self_test() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.run_self_test)
  if (_internal_has_run_self_test()) {
    clear_has_data();
    ::blickfeld::protocol::Request_RunSelfTest* temp = data_.run_self_test_;
    data_.run_self_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_run_self_test(::blickfeld::protocol::Request_RunSelfTest* run_self_test) {
  clear_data();
  if (run_self_test) {
    set_has_run_self_test();
    data_.run_self_test_ = run_self_test;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.run_self_test)
}
inline ::blickfeld::protocol::Request_RunSelfTest* Request::_internal_mutable_run_self_test() {
  if (!_internal_has_run_self_test()) {
    clear_data();
    set_has_run_self_test();
    data_.run_self_test_ = CreateMaybeMessage< ::blickfeld::protocol::Request_RunSelfTest >(GetArena());
  }
  return data_.run_self_test_;
}
inline ::blickfeld::protocol::Request_RunSelfTest* Request::mutable_run_self_test() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.run_self_test)
  return _internal_mutable_run_self_test();
}

// .blickfeld.protocol.Request.SetAdvancedConfig set_advanced_config = 21;
inline bool Request::_internal_has_set_advanced_config() const {
  return data_case() == kSetAdvancedConfig;
}
inline bool Request::has_set_advanced_config() const {
  return _internal_has_set_advanced_config();
}
inline void Request::set_has_set_advanced_config() {
  _oneof_case_[0] = kSetAdvancedConfig;
}
inline void Request::clear_set_advanced_config() {
  if (_internal_has_set_advanced_config()) {
    if (GetArena() == nullptr) {
      delete data_.set_advanced_config_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_SetAdvancedConfig* Request::release_set_advanced_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.set_advanced_config)
  if (_internal_has_set_advanced_config()) {
    clear_has_data();
      ::blickfeld::protocol::Request_SetAdvancedConfig* temp = data_.set_advanced_config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.set_advanced_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_SetAdvancedConfig& Request::_internal_set_advanced_config() const {
  return _internal_has_set_advanced_config()
      ? *data_.set_advanced_config_
      : reinterpret_cast< ::blickfeld::protocol::Request_SetAdvancedConfig&>(::blickfeld::protocol::_Request_SetAdvancedConfig_default_instance_);
}
inline const ::blickfeld::protocol::Request_SetAdvancedConfig& Request::set_advanced_config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.set_advanced_config)
  return _internal_set_advanced_config();
}
inline ::blickfeld::protocol::Request_SetAdvancedConfig* Request::unsafe_arena_release_set_advanced_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.set_advanced_config)
  if (_internal_has_set_advanced_config()) {
    clear_has_data();
    ::blickfeld::protocol::Request_SetAdvancedConfig* temp = data_.set_advanced_config_;
    data_.set_advanced_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_set_advanced_config(::blickfeld::protocol::Request_SetAdvancedConfig* set_advanced_config) {
  clear_data();
  if (set_advanced_config) {
    set_has_set_advanced_config();
    data_.set_advanced_config_ = set_advanced_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.set_advanced_config)
}
inline ::blickfeld::protocol::Request_SetAdvancedConfig* Request::_internal_mutable_set_advanced_config() {
  if (!_internal_has_set_advanced_config()) {
    clear_data();
    set_has_set_advanced_config();
    data_.set_advanced_config_ = CreateMaybeMessage< ::blickfeld::protocol::Request_SetAdvancedConfig >(GetArena());
  }
  return data_.set_advanced_config_;
}
inline ::blickfeld::protocol::Request_SetAdvancedConfig* Request::mutable_set_advanced_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.set_advanced_config)
  return _internal_mutable_set_advanced_config();
}

// .blickfeld.protocol.Request.GetAdvancedConfig get_advanced_config = 22;
inline bool Request::_internal_has_get_advanced_config() const {
  return data_case() == kGetAdvancedConfig;
}
inline bool Request::has_get_advanced_config() const {
  return _internal_has_get_advanced_config();
}
inline void Request::set_has_get_advanced_config() {
  _oneof_case_[0] = kGetAdvancedConfig;
}
inline void Request::clear_get_advanced_config() {
  if (_internal_has_get_advanced_config()) {
    if (GetArena() == nullptr) {
      delete data_.get_advanced_config_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_GetAdvancedConfig* Request::release_get_advanced_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.get_advanced_config)
  if (_internal_has_get_advanced_config()) {
    clear_has_data();
      ::blickfeld::protocol::Request_GetAdvancedConfig* temp = data_.get_advanced_config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.get_advanced_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_GetAdvancedConfig& Request::_internal_get_advanced_config() const {
  return _internal_has_get_advanced_config()
      ? *data_.get_advanced_config_
      : reinterpret_cast< ::blickfeld::protocol::Request_GetAdvancedConfig&>(::blickfeld::protocol::_Request_GetAdvancedConfig_default_instance_);
}
inline const ::blickfeld::protocol::Request_GetAdvancedConfig& Request::get_advanced_config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.get_advanced_config)
  return _internal_get_advanced_config();
}
inline ::blickfeld::protocol::Request_GetAdvancedConfig* Request::unsafe_arena_release_get_advanced_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.get_advanced_config)
  if (_internal_has_get_advanced_config()) {
    clear_has_data();
    ::blickfeld::protocol::Request_GetAdvancedConfig* temp = data_.get_advanced_config_;
    data_.get_advanced_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_advanced_config(::blickfeld::protocol::Request_GetAdvancedConfig* get_advanced_config) {
  clear_data();
  if (get_advanced_config) {
    set_has_get_advanced_config();
    data_.get_advanced_config_ = get_advanced_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.get_advanced_config)
}
inline ::blickfeld::protocol::Request_GetAdvancedConfig* Request::_internal_mutable_get_advanced_config() {
  if (!_internal_has_get_advanced_config()) {
    clear_data();
    set_has_get_advanced_config();
    data_.get_advanced_config_ = CreateMaybeMessage< ::blickfeld::protocol::Request_GetAdvancedConfig >(GetArena());
  }
  return data_.get_advanced_config_;
}
inline ::blickfeld::protocol::Request_GetAdvancedConfig* Request::mutable_get_advanced_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.get_advanced_config)
  return _internal_mutable_get_advanced_config();
}

// .blickfeld.protocol.stream.Subscribe unsubscribe = 23;
inline bool Request::_internal_has_unsubscribe() const {
  return data_case() == kUnsubscribe;
}
inline bool Request::has_unsubscribe() const {
  return _internal_has_unsubscribe();
}
inline void Request::set_has_unsubscribe() {
  _oneof_case_[0] = kUnsubscribe;
}
inline ::blickfeld::protocol::stream::Subscribe* Request::release_unsubscribe() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.unsubscribe)
  if (_internal_has_unsubscribe()) {
    clear_has_data();
      ::blickfeld::protocol::stream::Subscribe* temp = data_.unsubscribe_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.unsubscribe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::stream::Subscribe& Request::_internal_unsubscribe() const {
  return _internal_has_unsubscribe()
      ? *data_.unsubscribe_
      : reinterpret_cast< ::blickfeld::protocol::stream::Subscribe&>(::blickfeld::protocol::stream::_Subscribe_default_instance_);
}
inline const ::blickfeld::protocol::stream::Subscribe& Request::unsubscribe() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.unsubscribe)
  return _internal_unsubscribe();
}
inline ::blickfeld::protocol::stream::Subscribe* Request::unsafe_arena_release_unsubscribe() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.unsubscribe)
  if (_internal_has_unsubscribe()) {
    clear_has_data();
    ::blickfeld::protocol::stream::Subscribe* temp = data_.unsubscribe_;
    data_.unsubscribe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_unsubscribe(::blickfeld::protocol::stream::Subscribe* unsubscribe) {
  clear_data();
  if (unsubscribe) {
    set_has_unsubscribe();
    data_.unsubscribe_ = unsubscribe;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.unsubscribe)
}
inline ::blickfeld::protocol::stream::Subscribe* Request::_internal_mutable_unsubscribe() {
  if (!_internal_has_unsubscribe()) {
    clear_data();
    set_has_unsubscribe();
    data_.unsubscribe_ = CreateMaybeMessage< ::blickfeld::protocol::stream::Subscribe >(GetArena());
  }
  return data_.unsubscribe_;
}
inline ::blickfeld::protocol::stream::Subscribe* Request::mutable_unsubscribe() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.unsubscribe)
  return _internal_mutable_unsubscribe();
}

// .blickfeld.protocol.Request.AttemptErrorRecovery attempt_error_recovery = 24;
inline bool Request::_internal_has_attempt_error_recovery() const {
  return data_case() == kAttemptErrorRecovery;
}
inline bool Request::has_attempt_error_recovery() const {
  return _internal_has_attempt_error_recovery();
}
inline void Request::set_has_attempt_error_recovery() {
  _oneof_case_[0] = kAttemptErrorRecovery;
}
inline void Request::clear_attempt_error_recovery() {
  if (_internal_has_attempt_error_recovery()) {
    if (GetArena() == nullptr) {
      delete data_.attempt_error_recovery_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_AttemptErrorRecovery* Request::release_attempt_error_recovery() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.attempt_error_recovery)
  if (_internal_has_attempt_error_recovery()) {
    clear_has_data();
      ::blickfeld::protocol::Request_AttemptErrorRecovery* temp = data_.attempt_error_recovery_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.attempt_error_recovery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_AttemptErrorRecovery& Request::_internal_attempt_error_recovery() const {
  return _internal_has_attempt_error_recovery()
      ? *data_.attempt_error_recovery_
      : reinterpret_cast< ::blickfeld::protocol::Request_AttemptErrorRecovery&>(::blickfeld::protocol::_Request_AttemptErrorRecovery_default_instance_);
}
inline const ::blickfeld::protocol::Request_AttemptErrorRecovery& Request::attempt_error_recovery() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.attempt_error_recovery)
  return _internal_attempt_error_recovery();
}
inline ::blickfeld::protocol::Request_AttemptErrorRecovery* Request::unsafe_arena_release_attempt_error_recovery() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.attempt_error_recovery)
  if (_internal_has_attempt_error_recovery()) {
    clear_has_data();
    ::blickfeld::protocol::Request_AttemptErrorRecovery* temp = data_.attempt_error_recovery_;
    data_.attempt_error_recovery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_attempt_error_recovery(::blickfeld::protocol::Request_AttemptErrorRecovery* attempt_error_recovery) {
  clear_data();
  if (attempt_error_recovery) {
    set_has_attempt_error_recovery();
    data_.attempt_error_recovery_ = attempt_error_recovery;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.attempt_error_recovery)
}
inline ::blickfeld::protocol::Request_AttemptErrorRecovery* Request::_internal_mutable_attempt_error_recovery() {
  if (!_internal_has_attempt_error_recovery()) {
    clear_data();
    set_has_attempt_error_recovery();
    data_.attempt_error_recovery_ = CreateMaybeMessage< ::blickfeld::protocol::Request_AttemptErrorRecovery >(GetArena());
  }
  return data_.attempt_error_recovery_;
}
inline ::blickfeld::protocol::Request_AttemptErrorRecovery* Request::mutable_attempt_error_recovery() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.attempt_error_recovery)
  return _internal_mutable_attempt_error_recovery();
}

// .blickfeld.protocol.Request.GetScanPatternConstraints get_scan_pattern_constraints = 25;
inline bool Request::_internal_has_get_scan_pattern_constraints() const {
  return data_case() == kGetScanPatternConstraints;
}
inline bool Request::has_get_scan_pattern_constraints() const {
  return _internal_has_get_scan_pattern_constraints();
}
inline void Request::set_has_get_scan_pattern_constraints() {
  _oneof_case_[0] = kGetScanPatternConstraints;
}
inline void Request::clear_get_scan_pattern_constraints() {
  if (_internal_has_get_scan_pattern_constraints()) {
    if (GetArena() == nullptr) {
      delete data_.get_scan_pattern_constraints_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_GetScanPatternConstraints* Request::release_get_scan_pattern_constraints() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.get_scan_pattern_constraints)
  if (_internal_has_get_scan_pattern_constraints()) {
    clear_has_data();
      ::blickfeld::protocol::Request_GetScanPatternConstraints* temp = data_.get_scan_pattern_constraints_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.get_scan_pattern_constraints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_GetScanPatternConstraints& Request::_internal_get_scan_pattern_constraints() const {
  return _internal_has_get_scan_pattern_constraints()
      ? *data_.get_scan_pattern_constraints_
      : reinterpret_cast< ::blickfeld::protocol::Request_GetScanPatternConstraints&>(::blickfeld::protocol::_Request_GetScanPatternConstraints_default_instance_);
}
inline const ::blickfeld::protocol::Request_GetScanPatternConstraints& Request::get_scan_pattern_constraints() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.get_scan_pattern_constraints)
  return _internal_get_scan_pattern_constraints();
}
inline ::blickfeld::protocol::Request_GetScanPatternConstraints* Request::unsafe_arena_release_get_scan_pattern_constraints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.get_scan_pattern_constraints)
  if (_internal_has_get_scan_pattern_constraints()) {
    clear_has_data();
    ::blickfeld::protocol::Request_GetScanPatternConstraints* temp = data_.get_scan_pattern_constraints_;
    data_.get_scan_pattern_constraints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_scan_pattern_constraints(::blickfeld::protocol::Request_GetScanPatternConstraints* get_scan_pattern_constraints) {
  clear_data();
  if (get_scan_pattern_constraints) {
    set_has_get_scan_pattern_constraints();
    data_.get_scan_pattern_constraints_ = get_scan_pattern_constraints;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.get_scan_pattern_constraints)
}
inline ::blickfeld::protocol::Request_GetScanPatternConstraints* Request::_internal_mutable_get_scan_pattern_constraints() {
  if (!_internal_has_get_scan_pattern_constraints()) {
    clear_data();
    set_has_get_scan_pattern_constraints();
    data_.get_scan_pattern_constraints_ = CreateMaybeMessage< ::blickfeld::protocol::Request_GetScanPatternConstraints >(GetArena());
  }
  return data_.get_scan_pattern_constraints_;
}
inline ::blickfeld::protocol::Request_GetScanPatternConstraints* Request::mutable_get_scan_pattern_constraints() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.get_scan_pattern_constraints)
  return _internal_mutable_get_scan_pattern_constraints();
}

// .blickfeld.protocol.Request.GetNamedScanPatterns get_named_scan_patterns = 26;
inline bool Request::_internal_has_get_named_scan_patterns() const {
  return data_case() == kGetNamedScanPatterns;
}
inline bool Request::has_get_named_scan_patterns() const {
  return _internal_has_get_named_scan_patterns();
}
inline void Request::set_has_get_named_scan_patterns() {
  _oneof_case_[0] = kGetNamedScanPatterns;
}
inline void Request::clear_get_named_scan_patterns() {
  if (_internal_has_get_named_scan_patterns()) {
    if (GetArena() == nullptr) {
      delete data_.get_named_scan_patterns_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_GetNamedScanPatterns* Request::release_get_named_scan_patterns() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.get_named_scan_patterns)
  if (_internal_has_get_named_scan_patterns()) {
    clear_has_data();
      ::blickfeld::protocol::Request_GetNamedScanPatterns* temp = data_.get_named_scan_patterns_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.get_named_scan_patterns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_GetNamedScanPatterns& Request::_internal_get_named_scan_patterns() const {
  return _internal_has_get_named_scan_patterns()
      ? *data_.get_named_scan_patterns_
      : reinterpret_cast< ::blickfeld::protocol::Request_GetNamedScanPatterns&>(::blickfeld::protocol::_Request_GetNamedScanPatterns_default_instance_);
}
inline const ::blickfeld::protocol::Request_GetNamedScanPatterns& Request::get_named_scan_patterns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.get_named_scan_patterns)
  return _internal_get_named_scan_patterns();
}
inline ::blickfeld::protocol::Request_GetNamedScanPatterns* Request::unsafe_arena_release_get_named_scan_patterns() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.get_named_scan_patterns)
  if (_internal_has_get_named_scan_patterns()) {
    clear_has_data();
    ::blickfeld::protocol::Request_GetNamedScanPatterns* temp = data_.get_named_scan_patterns_;
    data_.get_named_scan_patterns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_named_scan_patterns(::blickfeld::protocol::Request_GetNamedScanPatterns* get_named_scan_patterns) {
  clear_data();
  if (get_named_scan_patterns) {
    set_has_get_named_scan_patterns();
    data_.get_named_scan_patterns_ = get_named_scan_patterns;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.get_named_scan_patterns)
}
inline ::blickfeld::protocol::Request_GetNamedScanPatterns* Request::_internal_mutable_get_named_scan_patterns() {
  if (!_internal_has_get_named_scan_patterns()) {
    clear_data();
    set_has_get_named_scan_patterns();
    data_.get_named_scan_patterns_ = CreateMaybeMessage< ::blickfeld::protocol::Request_GetNamedScanPatterns >(GetArena());
  }
  return data_.get_named_scan_patterns_;
}
inline ::blickfeld::protocol::Request_GetNamedScanPatterns* Request::mutable_get_named_scan_patterns() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.get_named_scan_patterns)
  return _internal_mutable_get_named_scan_patterns();
}

// .blickfeld.protocol.Request.StoreNamedScanPattern store_named_scan_pattern = 27;
inline bool Request::_internal_has_store_named_scan_pattern() const {
  return data_case() == kStoreNamedScanPattern;
}
inline bool Request::has_store_named_scan_pattern() const {
  return _internal_has_store_named_scan_pattern();
}
inline void Request::set_has_store_named_scan_pattern() {
  _oneof_case_[0] = kStoreNamedScanPattern;
}
inline void Request::clear_store_named_scan_pattern() {
  if (_internal_has_store_named_scan_pattern()) {
    if (GetArena() == nullptr) {
      delete data_.store_named_scan_pattern_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_StoreNamedScanPattern* Request::release_store_named_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.store_named_scan_pattern)
  if (_internal_has_store_named_scan_pattern()) {
    clear_has_data();
      ::blickfeld::protocol::Request_StoreNamedScanPattern* temp = data_.store_named_scan_pattern_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.store_named_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_StoreNamedScanPattern& Request::_internal_store_named_scan_pattern() const {
  return _internal_has_store_named_scan_pattern()
      ? *data_.store_named_scan_pattern_
      : reinterpret_cast< ::blickfeld::protocol::Request_StoreNamedScanPattern&>(::blickfeld::protocol::_Request_StoreNamedScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::Request_StoreNamedScanPattern& Request::store_named_scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.store_named_scan_pattern)
  return _internal_store_named_scan_pattern();
}
inline ::blickfeld::protocol::Request_StoreNamedScanPattern* Request::unsafe_arena_release_store_named_scan_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.store_named_scan_pattern)
  if (_internal_has_store_named_scan_pattern()) {
    clear_has_data();
    ::blickfeld::protocol::Request_StoreNamedScanPattern* temp = data_.store_named_scan_pattern_;
    data_.store_named_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_store_named_scan_pattern(::blickfeld::protocol::Request_StoreNamedScanPattern* store_named_scan_pattern) {
  clear_data();
  if (store_named_scan_pattern) {
    set_has_store_named_scan_pattern();
    data_.store_named_scan_pattern_ = store_named_scan_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.store_named_scan_pattern)
}
inline ::blickfeld::protocol::Request_StoreNamedScanPattern* Request::_internal_mutable_store_named_scan_pattern() {
  if (!_internal_has_store_named_scan_pattern()) {
    clear_data();
    set_has_store_named_scan_pattern();
    data_.store_named_scan_pattern_ = CreateMaybeMessage< ::blickfeld::protocol::Request_StoreNamedScanPattern >(GetArena());
  }
  return data_.store_named_scan_pattern_;
}
inline ::blickfeld::protocol::Request_StoreNamedScanPattern* Request::mutable_store_named_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.store_named_scan_pattern)
  return _internal_mutable_store_named_scan_pattern();
}

// .blickfeld.protocol.Request.DeleteNamedScanPattern delete_named_scan_pattern = 28;
inline bool Request::_internal_has_delete_named_scan_pattern() const {
  return data_case() == kDeleteNamedScanPattern;
}
inline bool Request::has_delete_named_scan_pattern() const {
  return _internal_has_delete_named_scan_pattern();
}
inline void Request::set_has_delete_named_scan_pattern() {
  _oneof_case_[0] = kDeleteNamedScanPattern;
}
inline void Request::clear_delete_named_scan_pattern() {
  if (_internal_has_delete_named_scan_pattern()) {
    if (GetArena() == nullptr) {
      delete data_.delete_named_scan_pattern_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_DeleteNamedScanPattern* Request::release_delete_named_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.delete_named_scan_pattern)
  if (_internal_has_delete_named_scan_pattern()) {
    clear_has_data();
      ::blickfeld::protocol::Request_DeleteNamedScanPattern* temp = data_.delete_named_scan_pattern_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.delete_named_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_DeleteNamedScanPattern& Request::_internal_delete_named_scan_pattern() const {
  return _internal_has_delete_named_scan_pattern()
      ? *data_.delete_named_scan_pattern_
      : reinterpret_cast< ::blickfeld::protocol::Request_DeleteNamedScanPattern&>(::blickfeld::protocol::_Request_DeleteNamedScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::Request_DeleteNamedScanPattern& Request::delete_named_scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.delete_named_scan_pattern)
  return _internal_delete_named_scan_pattern();
}
inline ::blickfeld::protocol::Request_DeleteNamedScanPattern* Request::unsafe_arena_release_delete_named_scan_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.delete_named_scan_pattern)
  if (_internal_has_delete_named_scan_pattern()) {
    clear_has_data();
    ::blickfeld::protocol::Request_DeleteNamedScanPattern* temp = data_.delete_named_scan_pattern_;
    data_.delete_named_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_delete_named_scan_pattern(::blickfeld::protocol::Request_DeleteNamedScanPattern* delete_named_scan_pattern) {
  clear_data();
  if (delete_named_scan_pattern) {
    set_has_delete_named_scan_pattern();
    data_.delete_named_scan_pattern_ = delete_named_scan_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.delete_named_scan_pattern)
}
inline ::blickfeld::protocol::Request_DeleteNamedScanPattern* Request::_internal_mutable_delete_named_scan_pattern() {
  if (!_internal_has_delete_named_scan_pattern()) {
    clear_data();
    set_has_delete_named_scan_pattern();
    data_.delete_named_scan_pattern_ = CreateMaybeMessage< ::blickfeld::protocol::Request_DeleteNamedScanPattern >(GetArena());
  }
  return data_.delete_named_scan_pattern_;
}
inline ::blickfeld::protocol::Request_DeleteNamedScanPattern* Request::mutable_delete_named_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.delete_named_scan_pattern)
  return _internal_mutable_delete_named_scan_pattern();
}

// .blickfeld.protocol.Request.ProxyHello proxy_hello = 29;
inline bool Request::_internal_has_proxy_hello() const {
  return data_case() == kProxyHello;
}
inline bool Request::has_proxy_hello() const {
  return _internal_has_proxy_hello();
}
inline void Request::set_has_proxy_hello() {
  _oneof_case_[0] = kProxyHello;
}
inline void Request::clear_proxy_hello() {
  if (_internal_has_proxy_hello()) {
    if (GetArena() == nullptr) {
      delete data_.proxy_hello_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Request_ProxyHello* Request::release_proxy_hello() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request.proxy_hello)
  if (_internal_has_proxy_hello()) {
    clear_has_data();
      ::blickfeld::protocol::Request_ProxyHello* temp = data_.proxy_hello_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.proxy_hello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Request_ProxyHello& Request::_internal_proxy_hello() const {
  return _internal_has_proxy_hello()
      ? *data_.proxy_hello_
      : reinterpret_cast< ::blickfeld::protocol::Request_ProxyHello&>(::blickfeld::protocol::_Request_ProxyHello_default_instance_);
}
inline const ::blickfeld::protocol::Request_ProxyHello& Request::proxy_hello() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.proxy_hello)
  return _internal_proxy_hello();
}
inline ::blickfeld::protocol::Request_ProxyHello* Request::unsafe_arena_release_proxy_hello() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Request.proxy_hello)
  if (_internal_has_proxy_hello()) {
    clear_has_data();
    ::blickfeld::protocol::Request_ProxyHello* temp = data_.proxy_hello_;
    data_.proxy_hello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_proxy_hello(::blickfeld::protocol::Request_ProxyHello* proxy_hello) {
  clear_data();
  if (proxy_hello) {
    set_has_proxy_hello();
    data_.proxy_hello_ = proxy_hello;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Request.proxy_hello)
}
inline ::blickfeld::protocol::Request_ProxyHello* Request::_internal_mutable_proxy_hello() {
  if (!_internal_has_proxy_hello()) {
    clear_data();
    set_has_proxy_hello();
    data_.proxy_hello_ = CreateMaybeMessage< ::blickfeld::protocol::Request_ProxyHello >(GetArena());
  }
  return data_.proxy_hello_;
}
inline ::blickfeld::protocol::Request_ProxyHello* Request::mutable_proxy_hello() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request.proxy_hello)
  return _internal_mutable_proxy_hello();
}

// string _asJSON = 100;
inline bool Request::_internal_has__asjson() const {
  return data_case() == kAsJSON;
}
inline bool Request::has__asjson() const {
  return _internal_has__asjson();
}
inline void Request::set_has__asjson() {
  _oneof_case_[0] = kAsJSON;
}
inline void Request::clear__asjson() {
  if (_internal_has__asjson()) {
    data_._asjson_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& Request::_asjson() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request._asJSON)
  return _internal__asjson();
}
template <typename ArgT0, typename... ArgT>
inline void Request::set__asjson(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has__asjson()) {
    clear_data();
    set_has__asjson();
    data_._asjson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_._asjson_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Request._asJSON)
}
inline std::string* Request::mutable__asjson() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Request._asJSON)
  return _internal_mutable__asjson();
}
inline const std::string& Request::_internal__asjson() const {
  if (_internal_has__asjson()) {
    return data_._asjson_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Request::_internal_set__asjson(const std::string& value) {
  if (!_internal_has__asjson()) {
    clear_data();
    set_has__asjson();
    data_._asjson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_._asjson_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Request::_internal_mutable__asjson() {
  if (!_internal_has__asjson()) {
    clear_data();
    set_has__asjson();
    data_._asjson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_._asjson_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release__asjson() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Request._asJSON)
  if (_internal_has__asjson()) {
    clear_has_data();
    return data_._asjson_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Request::set_allocated__asjson(std::string* _asjson) {
  if (has_data()) {
    clear_data();
  }
  if (_asjson != nullptr) {
    set_has__asjson();
    data_._asjson_.UnsafeSetDefault(_asjson);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(_asjson);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Request._asJSON)
}

// optional .blickfeld.protocol.Format accept_format = 101 [default = PROTOBUF];
inline bool Request::_internal_has_accept_format() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request::has_accept_format() const {
  return _internal_has_accept_format();
}
inline void Request::clear_accept_format() {
  accept_format_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::blickfeld::protocol::Format Request::_internal_accept_format() const {
  return static_cast< ::blickfeld::protocol::Format >(accept_format_);
}
inline ::blickfeld::protocol::Format Request::accept_format() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Request.accept_format)
  return _internal_accept_format();
}
inline void Request::_internal_set_accept_format(::blickfeld::protocol::Format value) {
  assert(::blickfeld::protocol::Format_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  accept_format_ = value;
}
inline void Request::set_accept_format(::blickfeld::protocol::Format value) {
  _internal_set_accept_format(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Request.accept_format)
}

inline bool Request::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Request::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Request::DataCase Request::data_case() const {
  return Request::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Response_Hello_Firmware

// optional .blickfeld.protocol.SoftwareVersion version = 1;
inline bool Response_Hello_Firmware::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || version_ != nullptr);
  return value;
}
inline bool Response_Hello_Firmware::has_version() const {
  return _internal_has_version();
}
inline const ::blickfeld::protocol::SoftwareVersion& Response_Hello_Firmware::_internal_version() const {
  const ::blickfeld::protocol::SoftwareVersion* p = version_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::SoftwareVersion&>(
      ::blickfeld::protocol::_SoftwareVersion_default_instance_);
}
inline const ::blickfeld::protocol::SoftwareVersion& Response_Hello_Firmware::version() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.Hello.Firmware.version)
  return _internal_version();
}
inline void Response_Hello_Firmware::unsafe_arena_set_allocated_version(
    ::blickfeld::protocol::SoftwareVersion* version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.Hello.Firmware.version)
}
inline ::blickfeld::protocol::SoftwareVersion* Response_Hello_Firmware::release_version() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::SoftwareVersion* temp = version_;
  version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::SoftwareVersion* Response_Hello_Firmware::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.Hello.Firmware.version)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::SoftwareVersion* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::SoftwareVersion* Response_Hello_Firmware::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::SoftwareVersion>(GetArena());
    version_ = p;
  }
  return version_;
}
inline ::blickfeld::protocol::SoftwareVersion* Response_Hello_Firmware::mutable_version() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.Hello.Firmware.version)
  return _internal_mutable_version();
}
inline void Response_Hello_Firmware::set_allocated_version(::blickfeld::protocol::SoftwareVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version)->GetArena();
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Response.Hello.Firmware.version)
}

// map<string, .blickfeld.protocol.SoftwareVersion> module_versions = 2;
inline int Response_Hello_Firmware::_internal_module_versions_size() const {
  return module_versions_.size();
}
inline int Response_Hello_Firmware::module_versions_size() const {
  return _internal_module_versions_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::SoftwareVersion >&
Response_Hello_Firmware::_internal_module_versions() const {
  return module_versions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::SoftwareVersion >&
Response_Hello_Firmware::module_versions() const {
  // @@protoc_insertion_point(field_map:blickfeld.protocol.Response.Hello.Firmware.module_versions)
  return _internal_module_versions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::SoftwareVersion >*
Response_Hello_Firmware::_internal_mutable_module_versions() {
  return module_versions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::SoftwareVersion >*
Response_Hello_Firmware::mutable_module_versions() {
  // @@protoc_insertion_point(field_mutable_map:blickfeld.protocol.Response.Hello.Firmware.module_versions)
  return _internal_mutable_module_versions();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Response_Hello

// optional uint32 protocol_version = 1;
inline bool Response_Hello::_internal_has_protocol_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Response_Hello::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void Response_Hello::clear_protocol_version() {
  protocol_version_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_Hello::_internal_protocol_version() const {
  return protocol_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response_Hello::protocol_version() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.Hello.protocol_version)
  return _internal_protocol_version();
}
inline void Response_Hello::_internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  protocol_version_ = value;
}
inline void Response_Hello::set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Response.Hello.protocol_version)
}

// optional string library_version = 2 [(.blickfeld.protocol.regex) = "[0-9]+\\.[0-9]+\\.[0-9]+[[:alnum:]\\.\\+\\-]*"];
inline bool Response_Hello::_internal_has_library_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_Hello::has_library_version() const {
  return _internal_has_library_version();
}
inline void Response_Hello::clear_library_version() {
  library_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response_Hello::library_version() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.Hello.library_version)
  return _internal_library_version();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Response_Hello::set_library_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 library_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Response.Hello.library_version)
}
inline std::string* Response_Hello::mutable_library_version() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.Hello.library_version)
  return _internal_mutable_library_version();
}
inline const std::string& Response_Hello::_internal_library_version() const {
  return library_version_.Get();
}
inline void Response_Hello::_internal_set_library_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  library_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Response_Hello::_internal_mutable_library_version() {
  _has_bits_[0] |= 0x00000001u;
  return library_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response_Hello::release_library_version() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.Hello.library_version)
  if (!_internal_has_library_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return library_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response_Hello::set_allocated_library_version(std::string* library_version) {
  if (library_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  library_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), library_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Response.Hello.library_version)
}

// optional .blickfeld.protocol.Language language = 3;
inline bool Response_Hello::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Response_Hello::has_language() const {
  return _internal_has_language();
}
inline void Response_Hello::clear_language() {
  language_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::blickfeld::protocol::Language Response_Hello::_internal_language() const {
  return static_cast< ::blickfeld::protocol::Language >(language_);
}
inline ::blickfeld::protocol::Language Response_Hello::language() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.Hello.language)
  return _internal_language();
}
inline void Response_Hello::_internal_set_language(::blickfeld::protocol::Language value) {
  assert(::blickfeld::protocol::Language_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  language_ = value;
}
inline void Response_Hello::set_language(::blickfeld::protocol::Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Response.Hello.language)
}

// optional .blickfeld.protocol.config.Product product = 4 [(.blickfeld.protocol.optional) = true];
inline bool Response_Hello::_internal_has_product() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Response_Hello::has_product() const {
  return _internal_has_product();
}
inline void Response_Hello::clear_product() {
  product_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::blickfeld::protocol::config::Product Response_Hello::_internal_product() const {
  return static_cast< ::blickfeld::protocol::config::Product >(product_);
}
inline ::blickfeld::protocol::config::Product Response_Hello::product() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.Hello.product)
  return _internal_product();
}
inline void Response_Hello::_internal_set_product(::blickfeld::protocol::config::Product value) {
  assert(::blickfeld::protocol::config::Product_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  product_ = value;
}
inline void Response_Hello::set_product(::blickfeld::protocol::config::Product value) {
  _internal_set_product(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Response.Hello.product)
}

// string serial_number = 5 [(.blickfeld.protocol.regex) = "[A-Z2-7]{9}", (.blickfeld.protocol.legacy_field_id) = 6];
inline bool Response_Hello::_internal_has_serial_number() const {
  return oneof_serial_number_case() == kSerialNumber;
}
inline bool Response_Hello::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void Response_Hello::set_has_serial_number() {
  _oneof_case_[0] = kSerialNumber;
}
inline void Response_Hello::clear_serial_number() {
  if (_internal_has_serial_number()) {
    oneof_serial_number_.serial_number_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_oneof_serial_number();
  }
}
inline const std::string& Response_Hello::serial_number() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.Hello.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline void Response_Hello::set_serial_number(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_serial_number()) {
    clear_oneof_serial_number();
    set_has_serial_number();
    oneof_serial_number_.serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_serial_number_.serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Response.Hello.serial_number)
}
inline std::string* Response_Hello::mutable_serial_number() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.Hello.serial_number)
  return _internal_mutable_serial_number();
}
inline const std::string& Response_Hello::_internal_serial_number() const {
  if (_internal_has_serial_number()) {
    return oneof_serial_number_.serial_number_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Response_Hello::_internal_set_serial_number(const std::string& value) {
  if (!_internal_has_serial_number()) {
    clear_oneof_serial_number();
    set_has_serial_number();
    oneof_serial_number_.serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_serial_number_.serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Response_Hello::_internal_mutable_serial_number() {
  if (!_internal_has_serial_number()) {
    clear_oneof_serial_number();
    set_has_serial_number();
    oneof_serial_number_.serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return oneof_serial_number_.serial_number_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response_Hello::release_serial_number() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.Hello.serial_number)
  if (_internal_has_serial_number()) {
    clear_has_oneof_serial_number();
    return oneof_serial_number_.serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Response_Hello::set_allocated_serial_number(std::string* serial_number) {
  if (has_oneof_serial_number()) {
    clear_oneof_serial_number();
  }
  if (serial_number != nullptr) {
    set_has_serial_number();
    oneof_serial_number_.serial_number_.UnsafeSetDefault(serial_number);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(serial_number);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Response.Hello.serial_number)
}

// string legacy_serial_number = 6 [deprecated = true, (.blickfeld.protocol.regex) = "msb-[0-9]{4}"];
inline bool Response_Hello::_internal_has_legacy_serial_number() const {
  return oneof_serial_number_case() == kLegacySerialNumber;
}
inline bool Response_Hello::has_legacy_serial_number() const {
  return _internal_has_legacy_serial_number();
}
inline void Response_Hello::set_has_legacy_serial_number() {
  _oneof_case_[0] = kLegacySerialNumber;
}
inline void Response_Hello::clear_legacy_serial_number() {
  if (_internal_has_legacy_serial_number()) {
    oneof_serial_number_.legacy_serial_number_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_oneof_serial_number();
  }
}
inline const std::string& Response_Hello::legacy_serial_number() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.Hello.legacy_serial_number)
  return _internal_legacy_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline void Response_Hello::set_legacy_serial_number(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_legacy_serial_number()) {
    clear_oneof_serial_number();
    set_has_legacy_serial_number();
    oneof_serial_number_.legacy_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_serial_number_.legacy_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Response.Hello.legacy_serial_number)
}
inline std::string* Response_Hello::mutable_legacy_serial_number() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.Hello.legacy_serial_number)
  return _internal_mutable_legacy_serial_number();
}
inline const std::string& Response_Hello::_internal_legacy_serial_number() const {
  if (_internal_has_legacy_serial_number()) {
    return oneof_serial_number_.legacy_serial_number_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Response_Hello::_internal_set_legacy_serial_number(const std::string& value) {
  if (!_internal_has_legacy_serial_number()) {
    clear_oneof_serial_number();
    set_has_legacy_serial_number();
    oneof_serial_number_.legacy_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_serial_number_.legacy_serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Response_Hello::_internal_mutable_legacy_serial_number() {
  if (!_internal_has_legacy_serial_number()) {
    clear_oneof_serial_number();
    set_has_legacy_serial_number();
    oneof_serial_number_.legacy_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return oneof_serial_number_.legacy_serial_number_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response_Hello::release_legacy_serial_number() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.Hello.legacy_serial_number)
  if (_internal_has_legacy_serial_number()) {
    clear_has_oneof_serial_number();
    return oneof_serial_number_.legacy_serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Response_Hello::set_allocated_legacy_serial_number(std::string* legacy_serial_number) {
  if (has_oneof_serial_number()) {
    clear_oneof_serial_number();
  }
  if (legacy_serial_number != nullptr) {
    set_has_legacy_serial_number();
    oneof_serial_number_.legacy_serial_number_.UnsafeSetDefault(legacy_serial_number);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(legacy_serial_number);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Response.Hello.legacy_serial_number)
}

// optional .blickfeld.protocol.Response.Hello.Firmware firmware = 7;
inline bool Response_Hello::_internal_has_firmware() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || firmware_ != nullptr);
  return value;
}
inline bool Response_Hello::has_firmware() const {
  return _internal_has_firmware();
}
inline void Response_Hello::clear_firmware() {
  if (firmware_ != nullptr) firmware_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::blickfeld::protocol::Response_Hello_Firmware& Response_Hello::_internal_firmware() const {
  const ::blickfeld::protocol::Response_Hello_Firmware* p = firmware_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::Response_Hello_Firmware&>(
      ::blickfeld::protocol::_Response_Hello_Firmware_default_instance_);
}
inline const ::blickfeld::protocol::Response_Hello_Firmware& Response_Hello::firmware() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.Hello.firmware)
  return _internal_firmware();
}
inline void Response_Hello::unsafe_arena_set_allocated_firmware(
    ::blickfeld::protocol::Response_Hello_Firmware* firmware) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(firmware_);
  }
  firmware_ = firmware;
  if (firmware) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.Hello.firmware)
}
inline ::blickfeld::protocol::Response_Hello_Firmware* Response_Hello::release_firmware() {
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::Response_Hello_Firmware* temp = firmware_;
  firmware_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::Response_Hello_Firmware* Response_Hello::unsafe_arena_release_firmware() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.Hello.firmware)
  _has_bits_[0] &= ~0x00000002u;
  ::blickfeld::protocol::Response_Hello_Firmware* temp = firmware_;
  firmware_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::Response_Hello_Firmware* Response_Hello::_internal_mutable_firmware() {
  _has_bits_[0] |= 0x00000002u;
  if (firmware_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::Response_Hello_Firmware>(GetArena());
    firmware_ = p;
  }
  return firmware_;
}
inline ::blickfeld::protocol::Response_Hello_Firmware* Response_Hello::mutable_firmware() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.Hello.firmware)
  return _internal_mutable_firmware();
}
inline void Response_Hello::set_allocated_firmware(::blickfeld::protocol::Response_Hello_Firmware* firmware) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete firmware_;
  }
  if (firmware) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(firmware);
    if (message_arena != submessage_arena) {
      firmware = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, firmware, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  firmware_ = firmware;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Response.Hello.firmware)
}

// map<string, .blickfeld.protocol.HardwareModule> hardware_modules = 8;
inline int Response_Hello::_internal_hardware_modules_size() const {
  return hardware_modules_.size();
}
inline int Response_Hello::hardware_modules_size() const {
  return _internal_hardware_modules_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::HardwareModule >&
Response_Hello::_internal_hardware_modules() const {
  return hardware_modules_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::HardwareModule >&
Response_Hello::hardware_modules() const {
  // @@protoc_insertion_point(field_map:blickfeld.protocol.Response.Hello.hardware_modules)
  return _internal_hardware_modules();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::HardwareModule >*
Response_Hello::_internal_mutable_hardware_modules() {
  return hardware_modules_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::blickfeld::protocol::HardwareModule >*
Response_Hello::mutable_hardware_modules() {
  // @@protoc_insertion_point(field_mutable_map:blickfeld.protocol.Response.Hello.hardware_modules)
  return _internal_mutable_hardware_modules();
}

inline bool Response_Hello::has_oneof_serial_number() const {
  return oneof_serial_number_case() != ONEOF_SERIAL_NUMBER_NOT_SET;
}
inline void Response_Hello::clear_has_oneof_serial_number() {
  _oneof_case_[0] = ONEOF_SERIAL_NUMBER_NOT_SET;
}
inline Response_Hello::OneofSerialNumberCase Response_Hello::oneof_serial_number_case() const {
  return Response_Hello::OneofSerialNumberCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response_ProxyHello

// -------------------------------------------------------------------

// Response_Developer

// -------------------------------------------------------------------

// Response_SetScanPattern

// -------------------------------------------------------------------

// Response_FillScanPattern

// optional .blickfeld.protocol.config.ScanPattern config = 2;
inline bool Response_FillScanPattern::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || config_ != nullptr);
  return value;
}
inline bool Response_FillScanPattern::has_config() const {
  return _internal_has_config();
}
inline const ::blickfeld::protocol::config::ScanPattern& Response_FillScanPattern::_internal_config() const {
  const ::blickfeld::protocol::config::ScanPattern* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern&>(
      ::blickfeld::protocol::config::_ScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern& Response_FillScanPattern::config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.FillScanPattern.config)
  return _internal_config();
}
inline void Response_FillScanPattern::unsafe_arena_set_allocated_config(
    ::blickfeld::protocol::config::ScanPattern* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.FillScanPattern.config)
}
inline ::blickfeld::protocol::config::ScanPattern* Response_FillScanPattern::release_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Response_FillScanPattern::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.FillScanPattern.config)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Response_FillScanPattern::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::blickfeld::protocol::config::ScanPattern* Response_FillScanPattern::mutable_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.FillScanPattern.config)
  return _internal_mutable_config();
}
inline void Response_FillScanPattern::set_allocated_config(::blickfeld::protocol::config::ScanPattern* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Response.FillScanPattern.config)
}

// -------------------------------------------------------------------

// Response_GetScanPattern

// optional .blickfeld.protocol.config.ScanPattern config = 2;
inline bool Response_GetScanPattern::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || config_ != nullptr);
  return value;
}
inline bool Response_GetScanPattern::has_config() const {
  return _internal_has_config();
}
inline const ::blickfeld::protocol::config::ScanPattern& Response_GetScanPattern::_internal_config() const {
  const ::blickfeld::protocol::config::ScanPattern* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::ScanPattern&>(
      ::blickfeld::protocol::config::_ScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::config::ScanPattern& Response_GetScanPattern::config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.GetScanPattern.config)
  return _internal_config();
}
inline void Response_GetScanPattern::unsafe_arena_set_allocated_config(
    ::blickfeld::protocol::config::ScanPattern* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.GetScanPattern.config)
}
inline ::blickfeld::protocol::config::ScanPattern* Response_GetScanPattern::release_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Response_GetScanPattern::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.GetScanPattern.config)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::ScanPattern* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::ScanPattern* Response_GetScanPattern::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::ScanPattern>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::blickfeld::protocol::config::ScanPattern* Response_GetScanPattern::mutable_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.GetScanPattern.config)
  return _internal_mutable_config();
}
inline void Response_GetScanPattern::set_allocated_config(::blickfeld::protocol::config::ScanPattern* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Response.GetScanPattern.config)
}

// -------------------------------------------------------------------

// Response_RunSelfTest

// optional bool success = 1;
inline bool Response_RunSelfTest::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response_RunSelfTest::has_success() const {
  return _internal_has_success();
}
inline void Response_RunSelfTest::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Response_RunSelfTest::_internal_success() const {
  return success_;
}
inline bool Response_RunSelfTest::success() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.RunSelfTest.success)
  return _internal_success();
}
inline void Response_RunSelfTest::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void Response_RunSelfTest::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Response.RunSelfTest.success)
}

// -------------------------------------------------------------------

// Response_SetAdvancedConfig

// -------------------------------------------------------------------

// Response_GetAdvancedConfig

// optional .blickfeld.protocol.config.Advanced config = 1;
inline bool Response_GetAdvancedConfig::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || config_ != nullptr);
  return value;
}
inline bool Response_GetAdvancedConfig::has_config() const {
  return _internal_has_config();
}
inline const ::blickfeld::protocol::config::Advanced& Response_GetAdvancedConfig::_internal_config() const {
  const ::blickfeld::protocol::config::Advanced* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::blickfeld::protocol::config::Advanced&>(
      ::blickfeld::protocol::config::_Advanced_default_instance_);
}
inline const ::blickfeld::protocol::config::Advanced& Response_GetAdvancedConfig::config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.GetAdvancedConfig.config)
  return _internal_config();
}
inline void Response_GetAdvancedConfig::unsafe_arena_set_allocated_config(
    ::blickfeld::protocol::config::Advanced* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.GetAdvancedConfig.config)
}
inline ::blickfeld::protocol::config::Advanced* Response_GetAdvancedConfig::release_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::Advanced* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::blickfeld::protocol::config::Advanced* Response_GetAdvancedConfig::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.GetAdvancedConfig.config)
  _has_bits_[0] &= ~0x00000001u;
  ::blickfeld::protocol::config::Advanced* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::blickfeld::protocol::config::Advanced* Response_GetAdvancedConfig::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::blickfeld::protocol::config::Advanced>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::blickfeld::protocol::config::Advanced* Response_GetAdvancedConfig::mutable_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.GetAdvancedConfig.config)
  return _internal_mutable_config();
}
inline void Response_GetAdvancedConfig::set_allocated_config(::blickfeld::protocol::config::Advanced* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config)->GetArena();
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Response.GetAdvancedConfig.config)
}

// -------------------------------------------------------------------

// Response_AttemptErrorRecovery

// -------------------------------------------------------------------

// Response_GetScanPatternConstraints

// repeated .blickfeld.protocol.Constraint constraints = 1;
inline int Response_GetScanPatternConstraints::_internal_constraints_size() const {
  return constraints_.size();
}
inline int Response_GetScanPatternConstraints::constraints_size() const {
  return _internal_constraints_size();
}
inline ::blickfeld::protocol::Constraint* Response_GetScanPatternConstraints::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.GetScanPatternConstraints.constraints)
  return constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >*
Response_GetScanPatternConstraints::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.Response.GetScanPatternConstraints.constraints)
  return &constraints_;
}
inline const ::blickfeld::protocol::Constraint& Response_GetScanPatternConstraints::_internal_constraints(int index) const {
  return constraints_.Get(index);
}
inline const ::blickfeld::protocol::Constraint& Response_GetScanPatternConstraints::constraints(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.GetScanPatternConstraints.constraints)
  return _internal_constraints(index);
}
inline ::blickfeld::protocol::Constraint* Response_GetScanPatternConstraints::_internal_add_constraints() {
  return constraints_.Add();
}
inline ::blickfeld::protocol::Constraint* Response_GetScanPatternConstraints::add_constraints() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.Response.GetScanPatternConstraints.constraints)
  return _internal_add_constraints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::Constraint >&
Response_GetScanPatternConstraints::constraints() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.Response.GetScanPatternConstraints.constraints)
  return constraints_;
}

// -------------------------------------------------------------------

// Response_GetNamedScanPatterns

// repeated .blickfeld.protocol.config.NamedScanPattern configs = 1;
inline int Response_GetNamedScanPatterns::_internal_configs_size() const {
  return configs_.size();
}
inline int Response_GetNamedScanPatterns::configs_size() const {
  return _internal_configs_size();
}
inline ::blickfeld::protocol::config::NamedScanPattern* Response_GetNamedScanPatterns::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.GetNamedScanPatterns.configs)
  return configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::NamedScanPattern >*
Response_GetNamedScanPatterns::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:blickfeld.protocol.Response.GetNamedScanPatterns.configs)
  return &configs_;
}
inline const ::blickfeld::protocol::config::NamedScanPattern& Response_GetNamedScanPatterns::_internal_configs(int index) const {
  return configs_.Get(index);
}
inline const ::blickfeld::protocol::config::NamedScanPattern& Response_GetNamedScanPatterns::configs(int index) const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.GetNamedScanPatterns.configs)
  return _internal_configs(index);
}
inline ::blickfeld::protocol::config::NamedScanPattern* Response_GetNamedScanPatterns::_internal_add_configs() {
  return configs_.Add();
}
inline ::blickfeld::protocol::config::NamedScanPattern* Response_GetNamedScanPatterns::add_configs() {
  // @@protoc_insertion_point(field_add:blickfeld.protocol.Response.GetNamedScanPatterns.configs)
  return _internal_add_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blickfeld::protocol::config::NamedScanPattern >&
Response_GetNamedScanPatterns::configs() const {
  // @@protoc_insertion_point(field_list:blickfeld.protocol.Response.GetNamedScanPatterns.configs)
  return configs_;
}

// -------------------------------------------------------------------

// Response_StoreNamedScanPattern

// -------------------------------------------------------------------

// Response_DeleteNamedScanPattern

// -------------------------------------------------------------------

// Response

// optional uint64 timestamp_ns = 1;
inline bool Response::_internal_has_timestamp_ns() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_timestamp_ns() const {
  return _internal_has_timestamp_ns();
}
inline void Response::clear_timestamp_ns() {
  timestamp_ns_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Response::_internal_timestamp_ns() const {
  return timestamp_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Response::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.timestamp_ns)
  return _internal_timestamp_ns();
}
inline void Response::_internal_set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ns_ = value;
}
inline void Response::set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_ns(value);
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Response.timestamp_ns)
}

// .blickfeld.protocol.Error error = 10;
inline bool Response::_internal_has_error() const {
  return data_case() == kError;
}
inline bool Response::has_error() const {
  return _internal_has_error();
}
inline void Response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::blickfeld::protocol::Error* Response::release_error() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.error)
  if (_internal_has_error()) {
    clear_has_data();
      ::blickfeld::protocol::Error* temp = data_.error_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Error& Response::_internal_error() const {
  return _internal_has_error()
      ? *data_.error_
      : reinterpret_cast< ::blickfeld::protocol::Error&>(::blickfeld::protocol::_Error_default_instance_);
}
inline const ::blickfeld::protocol::Error& Response::error() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.error)
  return _internal_error();
}
inline ::blickfeld::protocol::Error* Response::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.error)
  if (_internal_has_error()) {
    clear_has_data();
    ::blickfeld::protocol::Error* temp = data_.error_;
    data_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_error(::blickfeld::protocol::Error* error) {
  clear_data();
  if (error) {
    set_has_error();
    data_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.error)
}
inline ::blickfeld::protocol::Error* Response::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_data();
    set_has_error();
    data_.error_ = CreateMaybeMessage< ::blickfeld::protocol::Error >(GetArena());
  }
  return data_.error_;
}
inline ::blickfeld::protocol::Error* Response::mutable_error() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.error)
  return _internal_mutable_error();
}

// .blickfeld.protocol.Response.Hello hello = 11;
inline bool Response::_internal_has_hello() const {
  return data_case() == kHello;
}
inline bool Response::has_hello() const {
  return _internal_has_hello();
}
inline void Response::set_has_hello() {
  _oneof_case_[0] = kHello;
}
inline void Response::clear_hello() {
  if (_internal_has_hello()) {
    if (GetArena() == nullptr) {
      delete data_.hello_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_Hello* Response::release_hello() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.hello)
  if (_internal_has_hello()) {
    clear_has_data();
      ::blickfeld::protocol::Response_Hello* temp = data_.hello_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.hello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_Hello& Response::_internal_hello() const {
  return _internal_has_hello()
      ? *data_.hello_
      : reinterpret_cast< ::blickfeld::protocol::Response_Hello&>(::blickfeld::protocol::_Response_Hello_default_instance_);
}
inline const ::blickfeld::protocol::Response_Hello& Response::hello() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.hello)
  return _internal_hello();
}
inline ::blickfeld::protocol::Response_Hello* Response::unsafe_arena_release_hello() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.hello)
  if (_internal_has_hello()) {
    clear_has_data();
    ::blickfeld::protocol::Response_Hello* temp = data_.hello_;
    data_.hello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_hello(::blickfeld::protocol::Response_Hello* hello) {
  clear_data();
  if (hello) {
    set_has_hello();
    data_.hello_ = hello;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.hello)
}
inline ::blickfeld::protocol::Response_Hello* Response::_internal_mutable_hello() {
  if (!_internal_has_hello()) {
    clear_data();
    set_has_hello();
    data_.hello_ = CreateMaybeMessage< ::blickfeld::protocol::Response_Hello >(GetArena());
  }
  return data_.hello_;
}
inline ::blickfeld::protocol::Response_Hello* Response::mutable_hello() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.hello)
  return _internal_mutable_hello();
}

// .blickfeld.protocol.Response.Developer developer = 13;
inline bool Response::_internal_has_developer() const {
  return data_case() == kDeveloper;
}
inline bool Response::has_developer() const {
  return _internal_has_developer();
}
inline void Response::set_has_developer() {
  _oneof_case_[0] = kDeveloper;
}
inline void Response::clear_developer() {
  if (_internal_has_developer()) {
    if (GetArena() == nullptr) {
      delete data_.developer_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_Developer* Response::release_developer() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.developer)
  if (_internal_has_developer()) {
    clear_has_data();
      ::blickfeld::protocol::Response_Developer* temp = data_.developer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.developer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_Developer& Response::_internal_developer() const {
  return _internal_has_developer()
      ? *data_.developer_
      : reinterpret_cast< ::blickfeld::protocol::Response_Developer&>(::blickfeld::protocol::_Response_Developer_default_instance_);
}
inline const ::blickfeld::protocol::Response_Developer& Response::developer() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.developer)
  return _internal_developer();
}
inline ::blickfeld::protocol::Response_Developer* Response::unsafe_arena_release_developer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.developer)
  if (_internal_has_developer()) {
    clear_has_data();
    ::blickfeld::protocol::Response_Developer* temp = data_.developer_;
    data_.developer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_developer(::blickfeld::protocol::Response_Developer* developer) {
  clear_data();
  if (developer) {
    set_has_developer();
    data_.developer_ = developer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.developer)
}
inline ::blickfeld::protocol::Response_Developer* Response::_internal_mutable_developer() {
  if (!_internal_has_developer()) {
    clear_data();
    set_has_developer();
    data_.developer_ = CreateMaybeMessage< ::blickfeld::protocol::Response_Developer >(GetArena());
  }
  return data_.developer_;
}
inline ::blickfeld::protocol::Response_Developer* Response::mutable_developer() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.developer)
  return _internal_mutable_developer();
}

// .blickfeld.protocol.Response.SetScanPattern set_scan_pattern = 15;
inline bool Response::_internal_has_set_scan_pattern() const {
  return data_case() == kSetScanPattern;
}
inline bool Response::has_set_scan_pattern() const {
  return _internal_has_set_scan_pattern();
}
inline void Response::set_has_set_scan_pattern() {
  _oneof_case_[0] = kSetScanPattern;
}
inline void Response::clear_set_scan_pattern() {
  if (_internal_has_set_scan_pattern()) {
    if (GetArena() == nullptr) {
      delete data_.set_scan_pattern_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_SetScanPattern* Response::release_set_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.set_scan_pattern)
  if (_internal_has_set_scan_pattern()) {
    clear_has_data();
      ::blickfeld::protocol::Response_SetScanPattern* temp = data_.set_scan_pattern_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.set_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_SetScanPattern& Response::_internal_set_scan_pattern() const {
  return _internal_has_set_scan_pattern()
      ? *data_.set_scan_pattern_
      : reinterpret_cast< ::blickfeld::protocol::Response_SetScanPattern&>(::blickfeld::protocol::_Response_SetScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::Response_SetScanPattern& Response::set_scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.set_scan_pattern)
  return _internal_set_scan_pattern();
}
inline ::blickfeld::protocol::Response_SetScanPattern* Response::unsafe_arena_release_set_scan_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.set_scan_pattern)
  if (_internal_has_set_scan_pattern()) {
    clear_has_data();
    ::blickfeld::protocol::Response_SetScanPattern* temp = data_.set_scan_pattern_;
    data_.set_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_set_scan_pattern(::blickfeld::protocol::Response_SetScanPattern* set_scan_pattern) {
  clear_data();
  if (set_scan_pattern) {
    set_has_set_scan_pattern();
    data_.set_scan_pattern_ = set_scan_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.set_scan_pattern)
}
inline ::blickfeld::protocol::Response_SetScanPattern* Response::_internal_mutable_set_scan_pattern() {
  if (!_internal_has_set_scan_pattern()) {
    clear_data();
    set_has_set_scan_pattern();
    data_.set_scan_pattern_ = CreateMaybeMessage< ::blickfeld::protocol::Response_SetScanPattern >(GetArena());
  }
  return data_.set_scan_pattern_;
}
inline ::blickfeld::protocol::Response_SetScanPattern* Response::mutable_set_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.set_scan_pattern)
  return _internal_mutable_set_scan_pattern();
}

// .blickfeld.protocol.Response.FillScanPattern fill_scan_pattern = 16;
inline bool Response::_internal_has_fill_scan_pattern() const {
  return data_case() == kFillScanPattern;
}
inline bool Response::has_fill_scan_pattern() const {
  return _internal_has_fill_scan_pattern();
}
inline void Response::set_has_fill_scan_pattern() {
  _oneof_case_[0] = kFillScanPattern;
}
inline void Response::clear_fill_scan_pattern() {
  if (_internal_has_fill_scan_pattern()) {
    if (GetArena() == nullptr) {
      delete data_.fill_scan_pattern_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_FillScanPattern* Response::release_fill_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.fill_scan_pattern)
  if (_internal_has_fill_scan_pattern()) {
    clear_has_data();
      ::blickfeld::protocol::Response_FillScanPattern* temp = data_.fill_scan_pattern_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.fill_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_FillScanPattern& Response::_internal_fill_scan_pattern() const {
  return _internal_has_fill_scan_pattern()
      ? *data_.fill_scan_pattern_
      : reinterpret_cast< ::blickfeld::protocol::Response_FillScanPattern&>(::blickfeld::protocol::_Response_FillScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::Response_FillScanPattern& Response::fill_scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.fill_scan_pattern)
  return _internal_fill_scan_pattern();
}
inline ::blickfeld::protocol::Response_FillScanPattern* Response::unsafe_arena_release_fill_scan_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.fill_scan_pattern)
  if (_internal_has_fill_scan_pattern()) {
    clear_has_data();
    ::blickfeld::protocol::Response_FillScanPattern* temp = data_.fill_scan_pattern_;
    data_.fill_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_fill_scan_pattern(::blickfeld::protocol::Response_FillScanPattern* fill_scan_pattern) {
  clear_data();
  if (fill_scan_pattern) {
    set_has_fill_scan_pattern();
    data_.fill_scan_pattern_ = fill_scan_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.fill_scan_pattern)
}
inline ::blickfeld::protocol::Response_FillScanPattern* Response::_internal_mutable_fill_scan_pattern() {
  if (!_internal_has_fill_scan_pattern()) {
    clear_data();
    set_has_fill_scan_pattern();
    data_.fill_scan_pattern_ = CreateMaybeMessage< ::blickfeld::protocol::Response_FillScanPattern >(GetArena());
  }
  return data_.fill_scan_pattern_;
}
inline ::blickfeld::protocol::Response_FillScanPattern* Response::mutable_fill_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.fill_scan_pattern)
  return _internal_mutable_fill_scan_pattern();
}

// .blickfeld.protocol.Response.GetScanPattern get_scan_pattern = 17;
inline bool Response::_internal_has_get_scan_pattern() const {
  return data_case() == kGetScanPattern;
}
inline bool Response::has_get_scan_pattern() const {
  return _internal_has_get_scan_pattern();
}
inline void Response::set_has_get_scan_pattern() {
  _oneof_case_[0] = kGetScanPattern;
}
inline void Response::clear_get_scan_pattern() {
  if (_internal_has_get_scan_pattern()) {
    if (GetArena() == nullptr) {
      delete data_.get_scan_pattern_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_GetScanPattern* Response::release_get_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.get_scan_pattern)
  if (_internal_has_get_scan_pattern()) {
    clear_has_data();
      ::blickfeld::protocol::Response_GetScanPattern* temp = data_.get_scan_pattern_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.get_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_GetScanPattern& Response::_internal_get_scan_pattern() const {
  return _internal_has_get_scan_pattern()
      ? *data_.get_scan_pattern_
      : reinterpret_cast< ::blickfeld::protocol::Response_GetScanPattern&>(::blickfeld::protocol::_Response_GetScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::Response_GetScanPattern& Response::get_scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.get_scan_pattern)
  return _internal_get_scan_pattern();
}
inline ::blickfeld::protocol::Response_GetScanPattern* Response::unsafe_arena_release_get_scan_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.get_scan_pattern)
  if (_internal_has_get_scan_pattern()) {
    clear_has_data();
    ::blickfeld::protocol::Response_GetScanPattern* temp = data_.get_scan_pattern_;
    data_.get_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_scan_pattern(::blickfeld::protocol::Response_GetScanPattern* get_scan_pattern) {
  clear_data();
  if (get_scan_pattern) {
    set_has_get_scan_pattern();
    data_.get_scan_pattern_ = get_scan_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.get_scan_pattern)
}
inline ::blickfeld::protocol::Response_GetScanPattern* Response::_internal_mutable_get_scan_pattern() {
  if (!_internal_has_get_scan_pattern()) {
    clear_data();
    set_has_get_scan_pattern();
    data_.get_scan_pattern_ = CreateMaybeMessage< ::blickfeld::protocol::Response_GetScanPattern >(GetArena());
  }
  return data_.get_scan_pattern_;
}
inline ::blickfeld::protocol::Response_GetScanPattern* Response::mutable_get_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.get_scan_pattern)
  return _internal_mutable_get_scan_pattern();
}

// .blickfeld.protocol.stream.Event event = 18;
inline bool Response::_internal_has_event() const {
  return data_case() == kEvent;
}
inline bool Response::has_event() const {
  return _internal_has_event();
}
inline void Response::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline ::blickfeld::protocol::stream::Event* Response::release_event() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.event)
  if (_internal_has_event()) {
    clear_has_data();
      ::blickfeld::protocol::stream::Event* temp = data_.event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::stream::Event& Response::_internal_event() const {
  return _internal_has_event()
      ? *data_.event_
      : reinterpret_cast< ::blickfeld::protocol::stream::Event&>(::blickfeld::protocol::stream::_Event_default_instance_);
}
inline const ::blickfeld::protocol::stream::Event& Response::event() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.event)
  return _internal_event();
}
inline ::blickfeld::protocol::stream::Event* Response::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.event)
  if (_internal_has_event()) {
    clear_has_data();
    ::blickfeld::protocol::stream::Event* temp = data_.event_;
    data_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_event(::blickfeld::protocol::stream::Event* event) {
  clear_data();
  if (event) {
    set_has_event();
    data_.event_ = event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.event)
}
inline ::blickfeld::protocol::stream::Event* Response::_internal_mutable_event() {
  if (!_internal_has_event()) {
    clear_data();
    set_has_event();
    data_.event_ = CreateMaybeMessage< ::blickfeld::protocol::stream::Event >(GetArena());
  }
  return data_.event_;
}
inline ::blickfeld::protocol::stream::Event* Response::mutable_event() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.event)
  return _internal_mutable_event();
}

// .blickfeld.protocol.Status status = 19;
inline bool Response::_internal_has_status() const {
  return data_case() == kStatus;
}
inline bool Response::has_status() const {
  return _internal_has_status();
}
inline void Response::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline ::blickfeld::protocol::Status* Response::release_status() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.status)
  if (_internal_has_status()) {
    clear_has_data();
      ::blickfeld::protocol::Status* temp = data_.status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Status& Response::_internal_status() const {
  return _internal_has_status()
      ? *data_.status_
      : reinterpret_cast< ::blickfeld::protocol::Status&>(::blickfeld::protocol::_Status_default_instance_);
}
inline const ::blickfeld::protocol::Status& Response::status() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.status)
  return _internal_status();
}
inline ::blickfeld::protocol::Status* Response::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.status)
  if (_internal_has_status()) {
    clear_has_data();
    ::blickfeld::protocol::Status* temp = data_.status_;
    data_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_status(::blickfeld::protocol::Status* status) {
  clear_data();
  if (status) {
    set_has_status();
    data_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.status)
}
inline ::blickfeld::protocol::Status* Response::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_data();
    set_has_status();
    data_.status_ = CreateMaybeMessage< ::blickfeld::protocol::Status >(GetArena());
  }
  return data_.status_;
}
inline ::blickfeld::protocol::Status* Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.status)
  return _internal_mutable_status();
}

// .blickfeld.protocol.Response.RunSelfTest run_self_test = 20;
inline bool Response::_internal_has_run_self_test() const {
  return data_case() == kRunSelfTest;
}
inline bool Response::has_run_self_test() const {
  return _internal_has_run_self_test();
}
inline void Response::set_has_run_self_test() {
  _oneof_case_[0] = kRunSelfTest;
}
inline void Response::clear_run_self_test() {
  if (_internal_has_run_self_test()) {
    if (GetArena() == nullptr) {
      delete data_.run_self_test_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_RunSelfTest* Response::release_run_self_test() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.run_self_test)
  if (_internal_has_run_self_test()) {
    clear_has_data();
      ::blickfeld::protocol::Response_RunSelfTest* temp = data_.run_self_test_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.run_self_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_RunSelfTest& Response::_internal_run_self_test() const {
  return _internal_has_run_self_test()
      ? *data_.run_self_test_
      : reinterpret_cast< ::blickfeld::protocol::Response_RunSelfTest&>(::blickfeld::protocol::_Response_RunSelfTest_default_instance_);
}
inline const ::blickfeld::protocol::Response_RunSelfTest& Response::run_self_test() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.run_self_test)
  return _internal_run_self_test();
}
inline ::blickfeld::protocol::Response_RunSelfTest* Response::unsafe_arena_release_run_self_test() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.run_self_test)
  if (_internal_has_run_self_test()) {
    clear_has_data();
    ::blickfeld::protocol::Response_RunSelfTest* temp = data_.run_self_test_;
    data_.run_self_test_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_run_self_test(::blickfeld::protocol::Response_RunSelfTest* run_self_test) {
  clear_data();
  if (run_self_test) {
    set_has_run_self_test();
    data_.run_self_test_ = run_self_test;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.run_self_test)
}
inline ::blickfeld::protocol::Response_RunSelfTest* Response::_internal_mutable_run_self_test() {
  if (!_internal_has_run_self_test()) {
    clear_data();
    set_has_run_self_test();
    data_.run_self_test_ = CreateMaybeMessage< ::blickfeld::protocol::Response_RunSelfTest >(GetArena());
  }
  return data_.run_self_test_;
}
inline ::blickfeld::protocol::Response_RunSelfTest* Response::mutable_run_self_test() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.run_self_test)
  return _internal_mutable_run_self_test();
}

// .blickfeld.protocol.Response.SetAdvancedConfig set_advanced_config = 21;
inline bool Response::_internal_has_set_advanced_config() const {
  return data_case() == kSetAdvancedConfig;
}
inline bool Response::has_set_advanced_config() const {
  return _internal_has_set_advanced_config();
}
inline void Response::set_has_set_advanced_config() {
  _oneof_case_[0] = kSetAdvancedConfig;
}
inline void Response::clear_set_advanced_config() {
  if (_internal_has_set_advanced_config()) {
    if (GetArena() == nullptr) {
      delete data_.set_advanced_config_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_SetAdvancedConfig* Response::release_set_advanced_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.set_advanced_config)
  if (_internal_has_set_advanced_config()) {
    clear_has_data();
      ::blickfeld::protocol::Response_SetAdvancedConfig* temp = data_.set_advanced_config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.set_advanced_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_SetAdvancedConfig& Response::_internal_set_advanced_config() const {
  return _internal_has_set_advanced_config()
      ? *data_.set_advanced_config_
      : reinterpret_cast< ::blickfeld::protocol::Response_SetAdvancedConfig&>(::blickfeld::protocol::_Response_SetAdvancedConfig_default_instance_);
}
inline const ::blickfeld::protocol::Response_SetAdvancedConfig& Response::set_advanced_config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.set_advanced_config)
  return _internal_set_advanced_config();
}
inline ::blickfeld::protocol::Response_SetAdvancedConfig* Response::unsafe_arena_release_set_advanced_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.set_advanced_config)
  if (_internal_has_set_advanced_config()) {
    clear_has_data();
    ::blickfeld::protocol::Response_SetAdvancedConfig* temp = data_.set_advanced_config_;
    data_.set_advanced_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_set_advanced_config(::blickfeld::protocol::Response_SetAdvancedConfig* set_advanced_config) {
  clear_data();
  if (set_advanced_config) {
    set_has_set_advanced_config();
    data_.set_advanced_config_ = set_advanced_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.set_advanced_config)
}
inline ::blickfeld::protocol::Response_SetAdvancedConfig* Response::_internal_mutable_set_advanced_config() {
  if (!_internal_has_set_advanced_config()) {
    clear_data();
    set_has_set_advanced_config();
    data_.set_advanced_config_ = CreateMaybeMessage< ::blickfeld::protocol::Response_SetAdvancedConfig >(GetArena());
  }
  return data_.set_advanced_config_;
}
inline ::blickfeld::protocol::Response_SetAdvancedConfig* Response::mutable_set_advanced_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.set_advanced_config)
  return _internal_mutable_set_advanced_config();
}

// .blickfeld.protocol.Response.GetAdvancedConfig get_advanced_config = 22;
inline bool Response::_internal_has_get_advanced_config() const {
  return data_case() == kGetAdvancedConfig;
}
inline bool Response::has_get_advanced_config() const {
  return _internal_has_get_advanced_config();
}
inline void Response::set_has_get_advanced_config() {
  _oneof_case_[0] = kGetAdvancedConfig;
}
inline void Response::clear_get_advanced_config() {
  if (_internal_has_get_advanced_config()) {
    if (GetArena() == nullptr) {
      delete data_.get_advanced_config_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_GetAdvancedConfig* Response::release_get_advanced_config() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.get_advanced_config)
  if (_internal_has_get_advanced_config()) {
    clear_has_data();
      ::blickfeld::protocol::Response_GetAdvancedConfig* temp = data_.get_advanced_config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.get_advanced_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_GetAdvancedConfig& Response::_internal_get_advanced_config() const {
  return _internal_has_get_advanced_config()
      ? *data_.get_advanced_config_
      : reinterpret_cast< ::blickfeld::protocol::Response_GetAdvancedConfig&>(::blickfeld::protocol::_Response_GetAdvancedConfig_default_instance_);
}
inline const ::blickfeld::protocol::Response_GetAdvancedConfig& Response::get_advanced_config() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.get_advanced_config)
  return _internal_get_advanced_config();
}
inline ::blickfeld::protocol::Response_GetAdvancedConfig* Response::unsafe_arena_release_get_advanced_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.get_advanced_config)
  if (_internal_has_get_advanced_config()) {
    clear_has_data();
    ::blickfeld::protocol::Response_GetAdvancedConfig* temp = data_.get_advanced_config_;
    data_.get_advanced_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_advanced_config(::blickfeld::protocol::Response_GetAdvancedConfig* get_advanced_config) {
  clear_data();
  if (get_advanced_config) {
    set_has_get_advanced_config();
    data_.get_advanced_config_ = get_advanced_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.get_advanced_config)
}
inline ::blickfeld::protocol::Response_GetAdvancedConfig* Response::_internal_mutable_get_advanced_config() {
  if (!_internal_has_get_advanced_config()) {
    clear_data();
    set_has_get_advanced_config();
    data_.get_advanced_config_ = CreateMaybeMessage< ::blickfeld::protocol::Response_GetAdvancedConfig >(GetArena());
  }
  return data_.get_advanced_config_;
}
inline ::blickfeld::protocol::Response_GetAdvancedConfig* Response::mutable_get_advanced_config() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.get_advanced_config)
  return _internal_mutable_get_advanced_config();
}

// .blickfeld.protocol.Response.AttemptErrorRecovery attempt_error_recovery = 24;
inline bool Response::_internal_has_attempt_error_recovery() const {
  return data_case() == kAttemptErrorRecovery;
}
inline bool Response::has_attempt_error_recovery() const {
  return _internal_has_attempt_error_recovery();
}
inline void Response::set_has_attempt_error_recovery() {
  _oneof_case_[0] = kAttemptErrorRecovery;
}
inline void Response::clear_attempt_error_recovery() {
  if (_internal_has_attempt_error_recovery()) {
    if (GetArena() == nullptr) {
      delete data_.attempt_error_recovery_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_AttemptErrorRecovery* Response::release_attempt_error_recovery() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.attempt_error_recovery)
  if (_internal_has_attempt_error_recovery()) {
    clear_has_data();
      ::blickfeld::protocol::Response_AttemptErrorRecovery* temp = data_.attempt_error_recovery_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.attempt_error_recovery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_AttemptErrorRecovery& Response::_internal_attempt_error_recovery() const {
  return _internal_has_attempt_error_recovery()
      ? *data_.attempt_error_recovery_
      : reinterpret_cast< ::blickfeld::protocol::Response_AttemptErrorRecovery&>(::blickfeld::protocol::_Response_AttemptErrorRecovery_default_instance_);
}
inline const ::blickfeld::protocol::Response_AttemptErrorRecovery& Response::attempt_error_recovery() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.attempt_error_recovery)
  return _internal_attempt_error_recovery();
}
inline ::blickfeld::protocol::Response_AttemptErrorRecovery* Response::unsafe_arena_release_attempt_error_recovery() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.attempt_error_recovery)
  if (_internal_has_attempt_error_recovery()) {
    clear_has_data();
    ::blickfeld::protocol::Response_AttemptErrorRecovery* temp = data_.attempt_error_recovery_;
    data_.attempt_error_recovery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_attempt_error_recovery(::blickfeld::protocol::Response_AttemptErrorRecovery* attempt_error_recovery) {
  clear_data();
  if (attempt_error_recovery) {
    set_has_attempt_error_recovery();
    data_.attempt_error_recovery_ = attempt_error_recovery;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.attempt_error_recovery)
}
inline ::blickfeld::protocol::Response_AttemptErrorRecovery* Response::_internal_mutable_attempt_error_recovery() {
  if (!_internal_has_attempt_error_recovery()) {
    clear_data();
    set_has_attempt_error_recovery();
    data_.attempt_error_recovery_ = CreateMaybeMessage< ::blickfeld::protocol::Response_AttemptErrorRecovery >(GetArena());
  }
  return data_.attempt_error_recovery_;
}
inline ::blickfeld::protocol::Response_AttemptErrorRecovery* Response::mutable_attempt_error_recovery() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.attempt_error_recovery)
  return _internal_mutable_attempt_error_recovery();
}

// .blickfeld.protocol.Response.GetScanPatternConstraints get_scan_pattern_constraints = 25;
inline bool Response::_internal_has_get_scan_pattern_constraints() const {
  return data_case() == kGetScanPatternConstraints;
}
inline bool Response::has_get_scan_pattern_constraints() const {
  return _internal_has_get_scan_pattern_constraints();
}
inline void Response::set_has_get_scan_pattern_constraints() {
  _oneof_case_[0] = kGetScanPatternConstraints;
}
inline void Response::clear_get_scan_pattern_constraints() {
  if (_internal_has_get_scan_pattern_constraints()) {
    if (GetArena() == nullptr) {
      delete data_.get_scan_pattern_constraints_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_GetScanPatternConstraints* Response::release_get_scan_pattern_constraints() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.get_scan_pattern_constraints)
  if (_internal_has_get_scan_pattern_constraints()) {
    clear_has_data();
      ::blickfeld::protocol::Response_GetScanPatternConstraints* temp = data_.get_scan_pattern_constraints_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.get_scan_pattern_constraints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_GetScanPatternConstraints& Response::_internal_get_scan_pattern_constraints() const {
  return _internal_has_get_scan_pattern_constraints()
      ? *data_.get_scan_pattern_constraints_
      : reinterpret_cast< ::blickfeld::protocol::Response_GetScanPatternConstraints&>(::blickfeld::protocol::_Response_GetScanPatternConstraints_default_instance_);
}
inline const ::blickfeld::protocol::Response_GetScanPatternConstraints& Response::get_scan_pattern_constraints() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.get_scan_pattern_constraints)
  return _internal_get_scan_pattern_constraints();
}
inline ::blickfeld::protocol::Response_GetScanPatternConstraints* Response::unsafe_arena_release_get_scan_pattern_constraints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.get_scan_pattern_constraints)
  if (_internal_has_get_scan_pattern_constraints()) {
    clear_has_data();
    ::blickfeld::protocol::Response_GetScanPatternConstraints* temp = data_.get_scan_pattern_constraints_;
    data_.get_scan_pattern_constraints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_scan_pattern_constraints(::blickfeld::protocol::Response_GetScanPatternConstraints* get_scan_pattern_constraints) {
  clear_data();
  if (get_scan_pattern_constraints) {
    set_has_get_scan_pattern_constraints();
    data_.get_scan_pattern_constraints_ = get_scan_pattern_constraints;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.get_scan_pattern_constraints)
}
inline ::blickfeld::protocol::Response_GetScanPatternConstraints* Response::_internal_mutable_get_scan_pattern_constraints() {
  if (!_internal_has_get_scan_pattern_constraints()) {
    clear_data();
    set_has_get_scan_pattern_constraints();
    data_.get_scan_pattern_constraints_ = CreateMaybeMessage< ::blickfeld::protocol::Response_GetScanPatternConstraints >(GetArena());
  }
  return data_.get_scan_pattern_constraints_;
}
inline ::blickfeld::protocol::Response_GetScanPatternConstraints* Response::mutable_get_scan_pattern_constraints() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.get_scan_pattern_constraints)
  return _internal_mutable_get_scan_pattern_constraints();
}

// .blickfeld.protocol.Response.GetNamedScanPatterns get_named_scan_patterns = 26;
inline bool Response::_internal_has_get_named_scan_patterns() const {
  return data_case() == kGetNamedScanPatterns;
}
inline bool Response::has_get_named_scan_patterns() const {
  return _internal_has_get_named_scan_patterns();
}
inline void Response::set_has_get_named_scan_patterns() {
  _oneof_case_[0] = kGetNamedScanPatterns;
}
inline void Response::clear_get_named_scan_patterns() {
  if (_internal_has_get_named_scan_patterns()) {
    if (GetArena() == nullptr) {
      delete data_.get_named_scan_patterns_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_GetNamedScanPatterns* Response::release_get_named_scan_patterns() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.get_named_scan_patterns)
  if (_internal_has_get_named_scan_patterns()) {
    clear_has_data();
      ::blickfeld::protocol::Response_GetNamedScanPatterns* temp = data_.get_named_scan_patterns_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.get_named_scan_patterns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_GetNamedScanPatterns& Response::_internal_get_named_scan_patterns() const {
  return _internal_has_get_named_scan_patterns()
      ? *data_.get_named_scan_patterns_
      : reinterpret_cast< ::blickfeld::protocol::Response_GetNamedScanPatterns&>(::blickfeld::protocol::_Response_GetNamedScanPatterns_default_instance_);
}
inline const ::blickfeld::protocol::Response_GetNamedScanPatterns& Response::get_named_scan_patterns() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.get_named_scan_patterns)
  return _internal_get_named_scan_patterns();
}
inline ::blickfeld::protocol::Response_GetNamedScanPatterns* Response::unsafe_arena_release_get_named_scan_patterns() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.get_named_scan_patterns)
  if (_internal_has_get_named_scan_patterns()) {
    clear_has_data();
    ::blickfeld::protocol::Response_GetNamedScanPatterns* temp = data_.get_named_scan_patterns_;
    data_.get_named_scan_patterns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_named_scan_patterns(::blickfeld::protocol::Response_GetNamedScanPatterns* get_named_scan_patterns) {
  clear_data();
  if (get_named_scan_patterns) {
    set_has_get_named_scan_patterns();
    data_.get_named_scan_patterns_ = get_named_scan_patterns;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.get_named_scan_patterns)
}
inline ::blickfeld::protocol::Response_GetNamedScanPatterns* Response::_internal_mutable_get_named_scan_patterns() {
  if (!_internal_has_get_named_scan_patterns()) {
    clear_data();
    set_has_get_named_scan_patterns();
    data_.get_named_scan_patterns_ = CreateMaybeMessage< ::blickfeld::protocol::Response_GetNamedScanPatterns >(GetArena());
  }
  return data_.get_named_scan_patterns_;
}
inline ::blickfeld::protocol::Response_GetNamedScanPatterns* Response::mutable_get_named_scan_patterns() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.get_named_scan_patterns)
  return _internal_mutable_get_named_scan_patterns();
}

// .blickfeld.protocol.Response.StoreNamedScanPattern store_named_scan_pattern = 27;
inline bool Response::_internal_has_store_named_scan_pattern() const {
  return data_case() == kStoreNamedScanPattern;
}
inline bool Response::has_store_named_scan_pattern() const {
  return _internal_has_store_named_scan_pattern();
}
inline void Response::set_has_store_named_scan_pattern() {
  _oneof_case_[0] = kStoreNamedScanPattern;
}
inline void Response::clear_store_named_scan_pattern() {
  if (_internal_has_store_named_scan_pattern()) {
    if (GetArena() == nullptr) {
      delete data_.store_named_scan_pattern_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_StoreNamedScanPattern* Response::release_store_named_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.store_named_scan_pattern)
  if (_internal_has_store_named_scan_pattern()) {
    clear_has_data();
      ::blickfeld::protocol::Response_StoreNamedScanPattern* temp = data_.store_named_scan_pattern_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.store_named_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_StoreNamedScanPattern& Response::_internal_store_named_scan_pattern() const {
  return _internal_has_store_named_scan_pattern()
      ? *data_.store_named_scan_pattern_
      : reinterpret_cast< ::blickfeld::protocol::Response_StoreNamedScanPattern&>(::blickfeld::protocol::_Response_StoreNamedScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::Response_StoreNamedScanPattern& Response::store_named_scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.store_named_scan_pattern)
  return _internal_store_named_scan_pattern();
}
inline ::blickfeld::protocol::Response_StoreNamedScanPattern* Response::unsafe_arena_release_store_named_scan_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.store_named_scan_pattern)
  if (_internal_has_store_named_scan_pattern()) {
    clear_has_data();
    ::blickfeld::protocol::Response_StoreNamedScanPattern* temp = data_.store_named_scan_pattern_;
    data_.store_named_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_store_named_scan_pattern(::blickfeld::protocol::Response_StoreNamedScanPattern* store_named_scan_pattern) {
  clear_data();
  if (store_named_scan_pattern) {
    set_has_store_named_scan_pattern();
    data_.store_named_scan_pattern_ = store_named_scan_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.store_named_scan_pattern)
}
inline ::blickfeld::protocol::Response_StoreNamedScanPattern* Response::_internal_mutable_store_named_scan_pattern() {
  if (!_internal_has_store_named_scan_pattern()) {
    clear_data();
    set_has_store_named_scan_pattern();
    data_.store_named_scan_pattern_ = CreateMaybeMessage< ::blickfeld::protocol::Response_StoreNamedScanPattern >(GetArena());
  }
  return data_.store_named_scan_pattern_;
}
inline ::blickfeld::protocol::Response_StoreNamedScanPattern* Response::mutable_store_named_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.store_named_scan_pattern)
  return _internal_mutable_store_named_scan_pattern();
}

// .blickfeld.protocol.Response.DeleteNamedScanPattern delete_named_scan_pattern = 28;
inline bool Response::_internal_has_delete_named_scan_pattern() const {
  return data_case() == kDeleteNamedScanPattern;
}
inline bool Response::has_delete_named_scan_pattern() const {
  return _internal_has_delete_named_scan_pattern();
}
inline void Response::set_has_delete_named_scan_pattern() {
  _oneof_case_[0] = kDeleteNamedScanPattern;
}
inline void Response::clear_delete_named_scan_pattern() {
  if (_internal_has_delete_named_scan_pattern()) {
    if (GetArena() == nullptr) {
      delete data_.delete_named_scan_pattern_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_DeleteNamedScanPattern* Response::release_delete_named_scan_pattern() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.delete_named_scan_pattern)
  if (_internal_has_delete_named_scan_pattern()) {
    clear_has_data();
      ::blickfeld::protocol::Response_DeleteNamedScanPattern* temp = data_.delete_named_scan_pattern_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.delete_named_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_DeleteNamedScanPattern& Response::_internal_delete_named_scan_pattern() const {
  return _internal_has_delete_named_scan_pattern()
      ? *data_.delete_named_scan_pattern_
      : reinterpret_cast< ::blickfeld::protocol::Response_DeleteNamedScanPattern&>(::blickfeld::protocol::_Response_DeleteNamedScanPattern_default_instance_);
}
inline const ::blickfeld::protocol::Response_DeleteNamedScanPattern& Response::delete_named_scan_pattern() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.delete_named_scan_pattern)
  return _internal_delete_named_scan_pattern();
}
inline ::blickfeld::protocol::Response_DeleteNamedScanPattern* Response::unsafe_arena_release_delete_named_scan_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.delete_named_scan_pattern)
  if (_internal_has_delete_named_scan_pattern()) {
    clear_has_data();
    ::blickfeld::protocol::Response_DeleteNamedScanPattern* temp = data_.delete_named_scan_pattern_;
    data_.delete_named_scan_pattern_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_delete_named_scan_pattern(::blickfeld::protocol::Response_DeleteNamedScanPattern* delete_named_scan_pattern) {
  clear_data();
  if (delete_named_scan_pattern) {
    set_has_delete_named_scan_pattern();
    data_.delete_named_scan_pattern_ = delete_named_scan_pattern;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.delete_named_scan_pattern)
}
inline ::blickfeld::protocol::Response_DeleteNamedScanPattern* Response::_internal_mutable_delete_named_scan_pattern() {
  if (!_internal_has_delete_named_scan_pattern()) {
    clear_data();
    set_has_delete_named_scan_pattern();
    data_.delete_named_scan_pattern_ = CreateMaybeMessage< ::blickfeld::protocol::Response_DeleteNamedScanPattern >(GetArena());
  }
  return data_.delete_named_scan_pattern_;
}
inline ::blickfeld::protocol::Response_DeleteNamedScanPattern* Response::mutable_delete_named_scan_pattern() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.delete_named_scan_pattern)
  return _internal_mutable_delete_named_scan_pattern();
}

// .blickfeld.protocol.Response.ProxyHello proxy_hello = 29;
inline bool Response::_internal_has_proxy_hello() const {
  return data_case() == kProxyHello;
}
inline bool Response::has_proxy_hello() const {
  return _internal_has_proxy_hello();
}
inline void Response::set_has_proxy_hello() {
  _oneof_case_[0] = kProxyHello;
}
inline void Response::clear_proxy_hello() {
  if (_internal_has_proxy_hello()) {
    if (GetArena() == nullptr) {
      delete data_.proxy_hello_;
    }
    clear_has_data();
  }
}
inline ::blickfeld::protocol::Response_ProxyHello* Response::release_proxy_hello() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response.proxy_hello)
  if (_internal_has_proxy_hello()) {
    clear_has_data();
      ::blickfeld::protocol::Response_ProxyHello* temp = data_.proxy_hello_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.proxy_hello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::blickfeld::protocol::Response_ProxyHello& Response::_internal_proxy_hello() const {
  return _internal_has_proxy_hello()
      ? *data_.proxy_hello_
      : reinterpret_cast< ::blickfeld::protocol::Response_ProxyHello&>(::blickfeld::protocol::_Response_ProxyHello_default_instance_);
}
inline const ::blickfeld::protocol::Response_ProxyHello& Response::proxy_hello() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response.proxy_hello)
  return _internal_proxy_hello();
}
inline ::blickfeld::protocol::Response_ProxyHello* Response::unsafe_arena_release_proxy_hello() {
  // @@protoc_insertion_point(field_unsafe_arena_release:blickfeld.protocol.Response.proxy_hello)
  if (_internal_has_proxy_hello()) {
    clear_has_data();
    ::blickfeld::protocol::Response_ProxyHello* temp = data_.proxy_hello_;
    data_.proxy_hello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_proxy_hello(::blickfeld::protocol::Response_ProxyHello* proxy_hello) {
  clear_data();
  if (proxy_hello) {
    set_has_proxy_hello();
    data_.proxy_hello_ = proxy_hello;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blickfeld.protocol.Response.proxy_hello)
}
inline ::blickfeld::protocol::Response_ProxyHello* Response::_internal_mutable_proxy_hello() {
  if (!_internal_has_proxy_hello()) {
    clear_data();
    set_has_proxy_hello();
    data_.proxy_hello_ = CreateMaybeMessage< ::blickfeld::protocol::Response_ProxyHello >(GetArena());
  }
  return data_.proxy_hello_;
}
inline ::blickfeld::protocol::Response_ProxyHello* Response::mutable_proxy_hello() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response.proxy_hello)
  return _internal_mutable_proxy_hello();
}

// string _asJSON = 100;
inline bool Response::_internal_has__asjson() const {
  return data_case() == kAsJSON;
}
inline bool Response::has__asjson() const {
  return _internal_has__asjson();
}
inline void Response::set_has__asjson() {
  _oneof_case_[0] = kAsJSON;
}
inline void Response::clear__asjson() {
  if (_internal_has__asjson()) {
    data_._asjson_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& Response::_asjson() const {
  // @@protoc_insertion_point(field_get:blickfeld.protocol.Response._asJSON)
  return _internal__asjson();
}
template <typename ArgT0, typename... ArgT>
inline void Response::set__asjson(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has__asjson()) {
    clear_data();
    set_has__asjson();
    data_._asjson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_._asjson_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:blickfeld.protocol.Response._asJSON)
}
inline std::string* Response::mutable__asjson() {
  // @@protoc_insertion_point(field_mutable:blickfeld.protocol.Response._asJSON)
  return _internal_mutable__asjson();
}
inline const std::string& Response::_internal__asjson() const {
  if (_internal_has__asjson()) {
    return data_._asjson_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Response::_internal_set__asjson(const std::string& value) {
  if (!_internal_has__asjson()) {
    clear_data();
    set_has__asjson();
    data_._asjson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_._asjson_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Response::_internal_mutable__asjson() {
  if (!_internal_has__asjson()) {
    clear_data();
    set_has__asjson();
    data_._asjson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_._asjson_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release__asjson() {
  // @@protoc_insertion_point(field_release:blickfeld.protocol.Response._asJSON)
  if (_internal_has__asjson()) {
    clear_has_data();
    return data_._asjson_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Response::set_allocated__asjson(std::string* _asjson) {
  if (has_data()) {
    clear_data();
  }
  if (_asjson != nullptr) {
    set_has__asjson();
    data_._asjson_.UnsafeSetDefault(_asjson);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(_asjson);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:blickfeld.protocol.Response._asJSON)
}

inline bool Response::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Response::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Response::DataCase Response::data_case() const {
  return Response::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace blickfeld

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::blickfeld::protocol::Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::blickfeld::protocol::Format>() {
  return ::blickfeld::protocol::Format_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blickfeld_2fconnection_2eproto
